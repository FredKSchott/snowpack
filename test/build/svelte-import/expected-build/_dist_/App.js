import './App.css.proxy.js';
/* src/App.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	attr_dev,
	detach_dev,
	dispatch_dev,
	element,
	globals,
	init,
	insert_dev,
	noop,
	safe_not_equal,
	space,
	text,
	validate_slots
} from "../web_modules/svelte/internal.js";

const { console: console_1 } = globals;
import { onMount } from "../web_modules/svelte.js"; // load util from Svelte
import confetti from "../web_modules/canvas-confetti.js"; // load non-Svelte pkg
const file = "src/App.svelte";

function create_fragment(ctx) {
	let div;
	let header;
	let img;
	let img_src_value;
	let t0;
	let p;
	let t1;
	let code;
	let t3;
	let t4;
	let a;

	const block = {
		c: function create() {
			div = element("div");
			header = element("header");
			img = element("img");
			t0 = space();
			p = element("p");
			t1 = text("Edit ");
			code = element("code");
			code.textContent = "src/App.svelte";
			t3 = text(" and save to reload.");
			t4 = space();
			a = element("a");
			a.textContent = `${message}`;
			if (img.src !== (img_src_value = "/logo.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "App-logo svelte-1wibndw");
			attr_dev(img, "alt", "logo");
			add_location(img, file, 50, 2, 920);
			add_location(code, file, 52, 8, 986);
			add_location(p, file, 51, 2, 974);
			attr_dev(a, "class", "App-link svelte-1wibndw");
			attr_dev(a, "href", "https://svelte.dev");
			attr_dev(a, "target", "_blank");
			attr_dev(a, "rel", "noopener noreferrer");
			add_location(a, file, 54, 2, 1043);
			attr_dev(header, "class", "App-header svelte-1wibndw");
			add_location(header, file, 49, 1, 890);
			attr_dev(div, "class", "App svelte-1wibndw");
			add_location(div, file, 48, 0, 871);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, header);
			append_dev(header, img);
			append_dev(header, t0);
			append_dev(header, p);
			append_dev(p, t1);
			append_dev(p, code);
			append_dev(p, t3);
			append_dev(header, t4);
			append_dev(header, a);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const message = "Learn Svelte";

function instance($$self, $$props, $$invalidate) {
	confetti();

	onMount(() => {
		console.log("MOUNTED");
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<App> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("App", $$slots, []);
	$$self.$capture_state = () => ({ onMount, confetti, message });
	return [];
}

class App extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "App",
			options,
			id: create_fragment.name
		});
	}
}

export default App;
//# sourceMappingURL=App.js.map
