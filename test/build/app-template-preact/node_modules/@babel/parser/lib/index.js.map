{"version":3,"file":"index.js","sources":["../src/tokenizer/types.js","../src/util/scopeflags.js","../src/util/whitespace.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/error-message.js","../src/parser/error.js","../src/plugins/estree.js","../src/tokenizer/context.js","../../babel-helper-validator-identifier/src/identifier.js","../../babel-helper-validator-identifier/src/keyword.js","../src/util/identifier.js","../src/plugins/flow.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/util/scope.js","../src/plugins/typescript/scope.js","../src/util/production-parameter.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/parser/util.js","../src/parser/node.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/util/class-scope.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\nexport class TokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  updateContext: ?(prevType: TokenType) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return new TokenType(name, { beforeExpr, binop });\n}\n\nexport const types: { [name: string]: TokenType } = {\n  num: new TokenType(\"num\", { startsExpr }),\n  bigint: new TokenType(\"bigint\", { startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr }),\n  string: new TokenType(\"string\", { startsExpr }),\n  name: new TokenType(\"name\", { startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: new TokenType(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: new TokenType(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: new TokenType(\"#{\", { beforeExpr, startsExpr }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr, startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", { beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr, startsExpr }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: new TokenType(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr, isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: new TokenType(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: new TokenType(\"~\", { beforeExpr, prefix, startsExpr }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: new TokenType(\"%\", { beforeExpr, binop: 10, startsExpr }),\n  star: createBinop(\"*\", 10),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", { isLoop }),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", { isLoop }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n};\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b00000000,\n             SCOPE_PROGRAM      = 0b00000001,\n             SCOPE_FUNCTION     = 0b00000010,\n             SCOPE_ARROW        = 0b00000100,\n             SCOPE_SIMPLE_CATCH = 0b00001000,\n             SCOPE_SUPER        = 0b00010000,\n             SCOPE_DIRECT_SUPER = 0b00100000,\n             SCOPE_CLASS        = 0b01000000,\n             SCOPE_TS_MODULE    = 0b10000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE           = 0b00000_0000_01,\n             BIND_KIND_TYPE            = 0b00000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR            = 0b00000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL        = 0b00000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION       = 0b00000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE        = 0b00000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE           = 0b00001_0000_00,\n             BIND_FLAGS_CLASS          = 0b00010_0000_00,\n             BIND_FLAGS_TS_ENUM        = 0b00100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM  = 0b01000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY = 0b10000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  options: Options;\n  inModule: boolean;\n  scope: ScopeHandler<*>;\n  classScope: ClassScopeHandler;\n  prodParam: ProductionParameterHandler;\n  plugins: PluginsMap;\n  filename: ?string;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  input: string;\n  length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/**\n * Based on the comment attachment algorithm used in espree and estraverse.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\n\nfunction last<T>(stack: $ReadOnlyArray<T>): T {\n  return stack[stack.length - 1];\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(\n    node: Node,\n    elements: (Node | null)[],\n    // When the current node is followed by a token which hasn't a respective AST node, we\n    // need to take all the trailing comments to prevent them from being attached to an\n    // unrelated node. e.g. in\n    //     var { x } /* cmt */ = { y }\n    // we don't want /* cmt */ to be attached to { y }.\n    // On the other hand, in\n    //     fn(x) [new line] /* cmt */ [new line] y\n    // /* cmt */ is both a trailing comment of fn(x) and a leading comment of y\n    takeAllComments?: boolean,\n  ) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (\n        this.state.leadingComments[j].end < this.state.commentPreviousNode.end\n      ) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        // Perf: we don't need to splice if we are going to reset the array anyway\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n        node.trailingComments.push(leadingComment);\n      }\n    }\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node: Node): void {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n\n    const stack = this.state.commentStack;\n\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      // If the first comment in trailingComments comes after the\n      // current node, then we're good - all comments in the array will\n      // come after the node and so it's safe to add them as official\n      // trailingComments.\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        // Otherwise, if the first comment doesn't come after the\n        // current node, that means we have a mix of leading and trailing\n        // comments in the array and that leadingComments contains the\n        // same items as trailingComments. Reset trailingComments to\n        // zero items and we'll handle this by evaluating leadingComments\n        // later.\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n      if (\n        lastInStack.trailingComments &&\n        lastInStack.trailingComments[0].start >= node.end\n      ) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    // Eating the stack.\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    // Adjust comments that follow a trailing comma on the last element in a\n    // comma separated list of nodes to be the trailing comments on the last\n    // element\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (\n      this.state.commentPreviousNode &&\n      ((this.state.commentPreviousNode.type === \"ImportSpecifier\" &&\n        node.type !== \"ImportSpecifier\") ||\n        (this.state.commentPreviousNode.type === \"ExportSpecifier\" &&\n          node.type !== \"ExportSpecifier\"))\n    ) {\n      this.adjustCommentsAfterTrailingComma(node, [\n        this.state.commentPreviousNode,\n      ]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (\n          lastChild !== node &&\n          lastChild.leadingComments.length > 0 &&\n          last(lastChild.leadingComments).end <= node.start\n        ) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          // A leading comment for an anonymous class had been stolen by its first ClassMethod,\n          // so this takes back the leading comment.\n          // See also: https://github.com/eslint/espree/issues/158\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (\n              this.state.leadingComments[j].end <\n              this.state.commentPreviousNode.end\n            ) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        // https://github.com/eslint/espree/issues/2\n        //\n        // In special cases, such as return (without a value) and\n        // debugger, all comments will end up as leadingComments and\n        // will otherwise be eliminated. This step runs when the\n        // commentStack is empty and there are comments left\n        // in leadingComments.\n        //\n        // This loop figures out the stopping point between the actual\n        // leading and trailing comments by finding the location of the\n        // first comment that comes after the given node.\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        // Split the array based on the location of the first comment\n        // that comes after the node. Keep in mind that this could\n        // result in an empty array, and if so, the array must be\n        // deleted.\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        // Similarly, trailing comments are attached later. The variable\n        // must be reset to null if there are no trailing comments.\n        trailingComments = this.state.leadingComments.slice(i);\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (\n        trailingComments.length &&\n        trailingComments[0].start >= node.start &&\n        last(trailingComments).end <= node.end\n      ) {\n        node.innerComments = trailingComments;\n      } else {\n        // TrailingComments maybe contain innerComments\n        const firstTrailingCommentIndex = trailingComments.findIndex(\n          comment => comment.end >= node.end,\n        );\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(\n            0,\n            firstTrailingCommentIndex,\n          );\n          node.trailingComments = trailingComments.slice(\n            firstTrailingCommentIndex,\n          );\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n}\n","// @flow\n/* eslint sort-keys: \"error\" */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = Object.freeze({\n  ArgumentsDisallowedInInitializer:\n    \"'arguments' is not allowed in class field initializer\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter:\n    \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncFunction:\n    \"Can not use keyword 'await' outside an async function\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter:\n    \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport:\n    \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer:\n    \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys:\n    'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar:\n    \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline:\n    \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn:\n    \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed:\n    \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField:\n    \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper:\n    \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"yield is not allowed in generator parameters\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0\",\n});\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n};\n\nexport { ErrorMessages as Errors } from \"./error-message.js\";\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(pos: number, errorTemplate: string, ...params: any): Error | empty {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(\n    pos: number,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { Errors } from \"../parser/error\";\n\nfunction isSimpleProperty(node: N.Node): boolean {\n  return (\n    node != null &&\n    node.type === \"Property\" &&\n    node.kind === \"init\" &&\n    node.method === false\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    estreeParseRegExpLiteral({ pattern, flags }: N.RegExpLiteral): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    estreeParseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      // $FlowIgnore\n      const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n      const node = this.estreeParseLiteral(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral(value: any): N.Node {\n      return this.parseLiteral(value, \"Literal\");\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.value;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (isSimpleProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      const prop = ((method: any): N.EstreeProperty | N.EstreeMethodDefinition);\n      const paramCount = prop.kind === \"get\" ? 0 : 1;\n      const start = prop.start;\n      if (prop.value.params.length !== paramCount) {\n        if (method.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      } else if (\n        prop.kind === \"set\" &&\n        prop.value.params[0].type === \"RestElement\"\n      ) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n      disallowLetBinding?: boolean,\n    ): void {\n      switch (expr.type) {\n        case \"ObjectPattern\":\n          expr.properties.forEach(prop => {\n            this.checkLVal(\n              prop.type === \"Property\" ? prop.value : prop,\n              bindingType,\n              checkClashes,\n              \"object destructuring pattern\",\n              disallowLetBinding,\n            );\n          });\n          break;\n        default:\n          super.checkLVal(\n            expr,\n            bindingType,\n            checkClashes,\n            contextDescription,\n            disallowLetBinding,\n          );\n      }\n    }\n\n    checkProto(\n      prop: N.ObjectMember | N.SpreadElement,\n      isRecord: boolean,\n      protoRef: { used: boolean },\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      // $FlowIgnore: check prop.method and fallback to super method\n      if (prop.method) {\n        return;\n      }\n      super.checkProto(prop, isRecord, protoRef, refExpressionErrors);\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    stmtToDirective(stmt: N.Statement): N.Directive {\n      const directive = super.stmtToDirective(stmt);\n      const value = stmt.expression.value;\n\n      // Reset value to the actual value as in estree mode we want\n      // the stmt to have the real value and not the raw value\n      directive.value.value = value;\n\n      return directive;\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: ?boolean,\n      topLevel: boolean,\n      end: TokenType,\n    ): void {\n      super.parseBlockBody(node, allowDirectives, topLevel, end);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      switch (this.state.type) {\n        case tt.num:\n        case tt.string:\n          return this.estreeParseLiteral(this.state.value);\n\n        case tt.regexp:\n          return this.estreeParseRegExpLiteral(this.state.value);\n\n        case tt.bigint:\n          return this.estreeParseBigIntLiteral(this.state.value);\n\n        case tt._null:\n          return this.estreeParseLiteral(null);\n\n        case tt._true:\n          return this.estreeParseLiteral(true);\n\n        case tt._false:\n          return this.estreeParseLiteral(false);\n\n        default:\n          return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    parseLiteral<T: N.Literal>(\n      value: any,\n      type: /*T[\"kind\"]*/ string,\n      startPos?: number,\n      startLoc?: Position,\n    ): T {\n      const node = super.parseLiteral(value, type, startPos, startLoc);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n\n      type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n      return this.finishNode(node, type);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      containsEsc: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        containsEsc,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (isSimpleProperty(node)) {\n        this.toAssignable(node.value);\n\n        return node;\n      }\n\n      return super.toAssignable(node);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, isLast: boolean) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        throw this.raise(prop.key.start, Errors.PatternHasAccessor);\n      } else if (prop.method) {\n        throw this.raise(prop.key.start, Errors.PatternHasMethod);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      } else if (node.type === \"CallExpression\") {\n        (node: N.Node).optional = false;\n      }\n\n      return node;\n    }\n\n    toReferencedListDeep(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): void {\n      // ImportExpressions do not have an arguments array.\n      if (!exprList) {\n        return;\n      }\n\n      super.toReferencedListDeep(exprList, isParenthesizedExpr);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(...args) {\n      const node = super.parseSubscript(...args);\n\n      if (node.type === \"MemberExpression\") {\n        node.optional = false;\n      }\n\n      return node;\n    }\n  };\n","// @flow\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nimport { types as tt } from \"./types\";\nimport { lineBreak } from \"../util/whitespace\";\n\nexport class TokContext {\n  constructor(\n    token: string,\n    isExpr?: boolean,\n    preserveSpace?: boolean,\n    override?: ?Function, // Takes a Tokenizer as a this-parameter, and returns void.\n  ) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n  token: string;\n  isExpr: boolean;\n  preserveSpace: boolean;\n  override: ?Function;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false),\n};\n\n// Token-specific context update code\n\ntt.parenR.updateContext = tt.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n  if (out === types.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntt.name.updateContext = function (prevType) {\n  let allowed = false;\n  if (prevType !== tt.dot) {\n    if (\n      (this.state.value === \"of\" &&\n        !this.state.exprAllowed &&\n        prevType !== tt._function &&\n        prevType !== tt._class) ||\n      (this.state.value === \"yield\" && this.prodParam.hasYield)\n    ) {\n      allowed = true;\n    }\n  }\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntt.braceL.updateContext = function (prevType) {\n  this.state.context.push(\n    this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.dollarBraceL.updateContext = function () {\n  this.state.context.push(types.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntt.parenL.updateContext = function (prevType) {\n  const statementParens =\n    prevType === tt._if ||\n    prevType === tt._for ||\n    prevType === tt._with ||\n    prevType === tt._while;\n  this.state.context.push(\n    statementParens ? types.parenStatement : types.parenExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.incDec.updateContext = function () {\n  // tokExprAllowed stays unchanged\n};\n\ntt._function.updateContext = tt._class.updateContext = function (prevType) {\n  if (prevType === tt.dot || prevType === tt.questionDot) {\n    // when function/class follows dot/questionDot, it is part of\n    // (optional)MemberExpression, then we don't need to push new token context\n  } else if (\n    prevType.beforeExpr &&\n    prevType !== tt.semi &&\n    prevType !== tt._else &&\n    !(\n      prevType === tt._return &&\n      lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))\n    ) &&\n    !(\n      (prevType === tt.colon || prevType === tt.braceL) &&\n      this.curContext() === types.b_stat\n    )\n  ) {\n    this.state.context.push(types.functionExpression);\n  } else {\n    this.state.context.push(types.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntt.backQuote.updateContext = function () {\n  if (this.curContext() === types.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types.template);\n  }\n  this.state.exprAllowed = false;\n};\n\ntt.star.updateContext = function () {\n  this.state.exprAllowed = false;\n};\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: $ReadOnlyArray<number>): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (const char of Array.from(name)) {\n    const cp = char.codePointAt(0);\n    if (isFirst) {\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n      isFirst = false;\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","// @flow\n\nconst reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../parser\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport type { Options } from \"../options\";\nimport type { Pos, Position } from \"../util/location\";\nimport type State from \"../tokenizer/state\";\nimport { types as tc } from \"../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../util/identifier\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport { Errors } from \"../parser/error\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized:\n    \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName:\n    \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues:\n    \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType:\n    \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied:\n    \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType:\n    \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType:\n    \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType:\n    \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName:\n    \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized:\n    \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized:\n    \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration\",\n  UnsupportedDeclareExportKind:\n    \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state: State): boolean {\n  return (\n    (state.type === tt.name || !!state.type.keyword) && state.value !== \"from\"\n  );\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\";\n\n    constructor(options: ?Options, input: string) {\n      super(options, input);\n      this.flowPragma = undefined;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(tt.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n      // Force '%' and 'checks' to be adjacent\n      if (\n        moduloLoc.line !== checksLoc.line ||\n        moduloLoc.column !== checksLoc.column - 1\n      ) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(\"type\") && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            \"declare\",\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.DuplicateDeclareModuleExports,\n            );\n          }\n          if (kind === \"ES\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(\"type\") || this.isContextual(\"interface\")) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            this.state.start,\n            FlowErrors.UnsupportedDeclareExportKind,\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(\"opaque\") // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(\"interface\") || // declare export interface ...\n          this.isContextual(\"type\") || // declare export type ...\n          this.isContextual(\"opaque\") // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        startLoc,\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      } while (!this.isRelational(\">\"));\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n            if (\n              lookahead.type === tt.name ||\n              lookahead.type === tt.string ||\n              lookahead.type === tt.num\n            ) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            FlowErrors.UnexpectedExplicitInexactInObject,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in objec types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InexactInsideNonObject,\n            );\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        name = this.parseIdentifier();\n        if (this.eat(tt.question)) {\n          optional = true;\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(\n      params: N.FlowFunctionTypeParam[] = [],\n    ): { params: N.FlowFunctionTypeParam[], rest: ?N.FlowFunctionTypeParam } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n      return { params, rest };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(\n            startPos,\n            startLoc,\n            node,\n            this.parseIdentifier(),\n          );\n\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(tt.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(tt.parenR);\n\n            this.expect(tt.arrow);\n\n            node.returnType = this.flowParseType();\n\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n          break;\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (this.match(tt.name)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              FlowErrors.UnexpectedSubtractionOperand,\n            );\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start,\n        startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      while (this.match(tt.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(tt.bracketL);\n        this.expect(tt.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      // Ensure that a brace after a function generic type annotation is a\n      // statement, except in arrow functions (noAnonFunctionType)\n      this.state.exprAllowed =\n        this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (\n        this.state.strict &&\n        this.match(tt.name) &&\n        this.state.value === \"interface\"\n      ) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      } else {\n        const stmt = super.parseStatement(context, topLevel);\n        // We will parse a flow pragma in any comment before the first statement.\n        if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n          this.flowPragma = null;\n        }\n        return stmt;\n      }\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            this.match(tt.name) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(tt.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      return (\n        this.isContextual(\"type\") ||\n        this.isContextual(\"interface\") ||\n        this.isContextual(\"opaque\") ||\n        (this.shouldParseEnums() && this.isContextual(\"enum\")) ||\n        super.shouldParseExportDeclaration()\n      );\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (\n        this.match(tt.name) &&\n        (this.state.value === \"type\" ||\n          this.state.value === \"interface\" ||\n          this.state.value === \"opaque\" ||\n          (this.shouldParseEnums() && this.state.value === \"enum\"))\n      ) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      noIn: ?boolean,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      // only use the expensive \"tryParse\" method if there is a question mark\n      // and if we come from inside parens\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() =>\n          super.parseConditional(expr, noIn, startPos, startLoc),\n        );\n\n        if (!result.node) {\n          // $FlowIgnore\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(noIn, undefined, undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssign();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingComma,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: { hadConstructor: boolean },\n      constructorAllowsSuper: boolean,\n    ): void {\n      const pos = this.state.start;\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\"\n        ) {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(\n            member.value.start,\n            FlowErrors.DeclareClassFieldInitializer,\n          );\n        }\n      }\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\": {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type === \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          });\n        }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node));\n      } else {\n        return super.toAssignable(node);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaPos?: ?number,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaPos);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(\n          expr,\n          bindingType,\n          checkClashes,\n          contextDescription,\n        );\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    parsePropertyName(\n      node: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n      isPrivateNameAllowed: boolean,\n    ): N.Identifier {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      // $FlowIgnore (\"variance\" not defined on TsNamedTypeElementBase)\n      node.variance = variance;\n      return key;\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n      containsEsc: boolean,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.isRelational(\"<\")) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        refExpressionErrors,\n        containsEsc,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        contextDescription,\n      );\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n\n        // import type * is not allowed\n        if (kind === \"type\" && lh.type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(lh) ||\n          lh.type === tt.braceL ||\n          lh.type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(node: N.ImportDeclaration): void {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseIdentifier(true);\n\n      let specifierTypeKind = null;\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n\n      let isBinding = false;\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !this.match(tt.name) &&\n          !this.state.type.keyword\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (\n        specifierTypeKind !== null &&\n        (this.match(tt.name) || this.state.type.keyword)\n      ) {\n        // `import {type foo`\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(\n          firstIdentLoc,\n          FlowErrors.ImportTypeShorthandOnlyInPureImport,\n        );\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        \"import specifier\",\n      );\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      noIn?: ?boolean,\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () =>\n            super.parseMaybeAssign(\n              noIn,\n              refExpressionErrors,\n              afterLeftParse,\n              refNeedsArrowPos,\n            ),\n          state,\n        );\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === tc.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === tc.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (jsx?.error || this.isRelational(\"<\")) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(() => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () =>\n              super.parseMaybeAssign(\n                noIn,\n                refExpressionErrors,\n                afterLeftParse,\n                refNeedsArrowPos,\n              ),\n          );\n          arrowExpression.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(arrowExpression, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        const arrowExpression: ?N.ArrowFunctionExpression =\n          arrow.node?.type === \"ArrowFunctionExpression\" ? arrow.node : null;\n\n        if (!arrow.error && arrowExpression) return arrowExpression;\n\n        // If we are here, both JSX and Flow parsing attemps failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n        );\n      }\n\n      return super.parseMaybeAssign(\n        noIn,\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      );\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.isRelational(\"<\")\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadRelational(\"<\")) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        this.isRelational(\"<\")\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, Errors.UnterminatedComment);\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        FlowErrors.EnumInvalidMemberName,\n        memberName,\n        suggestion,\n        enumName,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        pos,\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n        default:\n          // null\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumNumberMemberNotInitialized,\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral();\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      booleanMembers: Array<N.Node>,\n      numberMembers: Array<N.Node>,\n      stringMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      while (!this.match(tt.braceR)) {\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return members;\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(tt.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const members = this.flowEnumMembers({ enumName, explicitType });\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (\n        this.match(tt.name) &&\n        this.state.value === \"of\" &&\n        prevType === tt.name &&\n        this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) ===\n          \"interface\"\n      ) {\n        this.state.exprAllowed = false;\n      } else {\n        super.updateContext(prevType);\n      }\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { TokenType, types as tt } from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors } from \"../../parser/error\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore this contexts and tokens do always exist.\ntc.j_oTag = new TokContext(\"<tag\", false);\ntc.j_cTag = new TokContext(\"</tag\", false);\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\n\ntt.jsxName = new TokenType(\"jsxName\");\ntt.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntt.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntt.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntt.jsxTagStart.updateContext = function () {\n  this.state.context.push(tc.j_expr); // treat as beginning of JSX expression\n  this.state.context.push(tc.j_oTag); // start opening tag context\n  this.state.exprAllowed = false;\n};\n\ntt.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n  if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === tc.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, Errors.UnterminatedString);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (this.state.type.keyword) {\n        node.name = this.state.type.keyword;\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(node.start, JsxErrors.AttributeIsEmpty);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        node.expression = this.parseExpression();\n      }\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagFragment,\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagElement,\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              JsxErrors.MissingClosingTagElement,\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.isRelational(\"<\")) {\n        throw this.raise(\n          this.state.start,\n          JsxErrors.UnwrappedAdjacentJSXElements,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.isRelational(\"<\") &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.finishToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    getTokenFromCode(code: number): void {\n      if (this.state.inPropertyName) return super.getTokenFromCode(code);\n\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.exprAllowed &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (this.match(tt.braceL)) {\n        const curContext = this.curContext();\n        if (curContext === tc.j_oTag) {\n          this.state.context.push(tc.braceExpression);\n        } else if (curContext === tc.j_expr) {\n          this.state.context.push(tc.templateQuasi);\n        } else {\n          super.updateContext(prevType);\n        }\n        this.state.exprAllowed = true;\n      } else if (this.match(tt.slash) && prevType === tt.jsxTagStart) {\n        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.state.context.push(tc.j_cTag); // reconsider as closing tag context\n        this.state.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlags;\n  // A list of var-declared names in the current lexical scope\n  var: string[] = [];\n  // A list of lexically-declared names in the current lexical scope\n  lexical: string[] = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: string[] = [];\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  raise: raiseFunction;\n  inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        scope.functions.indexOf(name) > -1 ||\n        scope.var.indexOf(name) > -1\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        (!this.treatFunctionsAsVarInScope(scope) &&\n          scope.var.indexOf(name) > -1)\n      );\n    }\n\n    return (\n      (scope.lexical.indexOf(name) > -1 &&\n        !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name)) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        scope.functions.indexOf(name) > -1)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1 &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      this.scopeStack[0].functions.indexOf(id.name) === -1\n    ) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (\n        (scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) &&\n        !(scope.flags & SCOPE_ARROW)\n      ) {\n        return scope;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: string[] = [];\n\n  // enums (which are also in .types)\n  enums: string[] = [];\n\n  // const enums (which are also in .enums and .types)\n  constEnums: string[] = [];\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: string[] = [];\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: string[] = [];\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.push(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].types.indexOf(id.name) === -1 &&\n      this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\nexport const PARAM = 0b000, // Initial Parameter flags\n  PARAM_YIELD = 0b001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b010, // track [Await] production parameter\n  PARAM_RETURN = 0b100; // track [Return] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above. Note that the [In] parameter is\n// tracked in `noIn` argument of `parseExpression`.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = typeof PARAM | typeof PARAM_AWAIT | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type { TokenType } from \"../../tokenizer/types\";\nimport type State from \"../../tokenizer/state\";\nimport { types as tt } from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Pos, Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors } from \"../../parser/error\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"public\"\n  | \"private\"\n  | \"protected\";\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  DeclareClassFieldHasInitializer:\n    \"'declare' class fields cannot have an initializer\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility:\n    \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility:\n    \"Private elements cannot have an accessibility modifier ('%0')\",\n  TemplateTypeHasSubstitution:\n    \"Template literal types cannot have any substitution\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind:\n    \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\",\n});\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return this.match(tt.name);\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return (\n        !this.hasPrecedingLineBreak() &&\n        !this.match(tt.parenL) &&\n        !this.match(tt.parenR) &&\n        !this.match(tt.colon) &&\n        !this.match(tt.eq) &&\n        !this.match(tt.question) &&\n        !this.match(tt.bang)\n      );\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(allowedModifiers: T[]): ?T {\n      if (!this.match(tt.name)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (\n        allowedModifiers.indexOf(modifier) !== -1 &&\n        this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))\n      ) {\n        return modifier;\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers<T: TsModifier>(\n      modified: { [key: TsModifier]: ?true },\n      allowedModifiers: T[],\n    ): void {\n      for (;;) {\n        const startPos = this.state.start;\n        const modifier: ?T = this.tsParseModifier(allowedModifiers);\n\n        if (!modifier) break;\n\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        }\n        modified[modifier] = true;\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n    ): ?(T[]) {\n      const result = [];\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      const result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n      );\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              TSErrors.UnsupportedSignatureParameterKind,\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma)) {\n        this.semicolon();\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      return this.eat(tt.name) && this.match(tt.colon);\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (!readonly && (this.match(tt.parenL) || this.isRelational(\"<\"))) {\n        const method: N.TsMethodSignature = nodeAny;\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      const readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        if (readonly) node.readonly = true;\n        return idx;\n      }\n\n      this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      return this.tsParsePropertyOrMethodSignature(node, readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure:\n      //   No mandatory elements may follow optional elements\n      //   If there's a rest element, it must be at the end of the tuple\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        if (elementNode.type === \"TSOptionalType\") {\n          seenOptionalElement = true;\n        } else if (seenOptionalElement && elementNode.type !== \"TSRestType\") {\n          this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType {\n      // parses `...TsType[]`\n      if (this.match(tt.ellipsis)) {\n        const restNode: N.TsRestType = this.startNode();\n        this.next(); // skips ellipsis\n        restNode.typeAnnotation = this.tsParseType();\n        if (\n          this.match(tt.comma) &&\n          this.lookaheadCharCode() !== charCodes.rightSquareBracket\n        ) {\n          this.raiseRestNotLast(this.state.start);\n        }\n        return this.finishNode(restNode, \"TSRestType\");\n      }\n\n      const type = this.tsParseType();\n      // parses `TsType?`\n      if (this.eat(tt.question)) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        return this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        this.expect(tt._new);\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      const templateNode = this.parseTemplate(false);\n      if (templateNode.expressions.length > 0) {\n        this.raise(\n          templateNode.expressions[0].start,\n          TSErrors.TemplateTypeHasSubstitution,\n        );\n      }\n      node.literal = templateNode;\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.name:\n        case tt._void:\n        case tt._null: {\n          const type = this.match(tt._void)\n            ? \"TSVoidKeyword\"\n            : this.match(tt._null)\n            ? \"TSNullKeyword\"\n            : keywordTypeFromName(this.state.value);\n          if (\n            type !== undefined &&\n            this.lookaheadCharCode() !== charCodes.dot\n          ) {\n            const node: N.TsKeywordType = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n          return this.tsParseTypeReference();\n        }\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(\n      operator: \"keyof\" | \"unique\" | \"readonly\",\n    ): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(node.start, TSErrors.UnexpectedReadonly);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(\"infer\");\n      const typeParameter = this.startNode();\n      typeParameter.name = this.parseIdentifierName(typeParameter.start);\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw =>\n        this.isContextual(kw),\n      );\n      return operator\n        ? this.tsParseTypeOperator(operator)\n        : this.isContextual(\"infer\")\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      this.eat(operator);\n      let type = parseConstituentType();\n      if (this.match(operator)) {\n        const types = [type];\n        while (this.eat(operator)) {\n          types.push(parseConstituentType());\n        }\n        const node: N.TsUnionType | N.TsIntersectionType = this.startNodeAtNode(\n          type,\n        );\n        node.types = types;\n        type = this.finishNode(node, kind);\n      }\n      return type;\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (this.match(tt.name) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const asserts = this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            const node: N.TsTypePredicate = this.startNodeAtNode(t);\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          const node: N.TsTypePredicate = this.startNodeAtNode(t);\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        const node = this.startNodeAtNode(t);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (\n        !this.match(tt.name) ||\n        this.state.value !== \"asserts\" ||\n        this.hasPrecedingLineBreak()\n      ) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!this.match(tt.name) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          Errors.InvalidEscapedReservedWord,\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_TS_INTERFACE,\n        undefined,\n        \"typescript interface declaration\",\n      );\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsExpectThenParseType(tt.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssign();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n        undefined,\n        \"typescript enum declaration\",\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          BIND_TS_NAMESPACE,\n          null,\n          \"module or namespace declaration\",\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_LEXICAL,\n        undefined,\n        \"import equals declaration\",\n      );\n      this.expect(tt.eq);\n      node.moduleReference = this.tsParseModuleReference();\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(\"require\") &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(\"let\")) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      switch (starttype) {\n        case tt._function:\n          return this.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        case tt._class:\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to now how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        case tt._const:\n          if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n          }\n        // falls through\n        case tt._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n        case tt.name: {\n          const value = this.state.value;\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, /* next */ true);\n          }\n        }\n      }\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      switch (value) {\n        case \"abstract\":\n          if (this.tsCheckLineTerminatorAndMatch(tt._class, next)) {\n            const cls: N.ClassDeclaration = node;\n            cls.abstract = true;\n            if (next) {\n              this.next();\n              if (!this.match(tt._class)) {\n                this.unexpected(null, tt._class);\n              }\n            }\n            return this.parseClass(\n              cls,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          }\n          break;\n\n        case \"enum\":\n          if (next || this.match(tt.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (next) this.next();\n          if (this.match(tt.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"namespace\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminatorAndMatch(tokenType: TokenType, next: boolean) {\n      return (next || this.match(tokenType)) && !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.isRelational(\"<\")) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expectRelational(\"<\");\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      // This reads the next token after the `>` too, so do this in the enclosing context.\n      // But be sure not to parse a regex in the jsx expression `<C<number> />`, so set exprAllowed = false\n      this.state.exprAllowed = false;\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      if (this.match(tt.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      if (allowModifiers) {\n        accessibility = this.parseAccessModifier();\n        readonly = !!this.tsParseModifier([\"readonly\"]);\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        this.state.exprAllowed = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n              node.typeParameters = typeArguments;\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (this.match(tt.backQuote)) {\n              return this.parseTaggedTemplateExpression(\n                startPos,\n                startLoc,\n                base,\n                state,\n                typeArguments,\n              );\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n      noIn: ?boolean,\n    ) {\n      if (\n        nonNull(tt._in.binop) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(\"as\")\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        return this.parseExprOp(\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n          noIn,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      if (this.match(tt.name) || this.match(tt.star) || this.match(tt.braceL)) {\n        const ahead = this.lookahead();\n\n        if (this.match(tt.name) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n\n        if (\n          this.isContextual(\"type\") &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          !(ahead.type === tt.name && ahead.value === \"from\")\n        ) {\n          node.importKind = \"type\";\n          this.next();\n        } else {\n          node.importKind = \"value\";\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(\n          importNode.start,\n          \"A type-only import can specify a default import or named bindings, but not both.\",\n        );\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.expect(tt._import);\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (this.isContextual(\"type\") && this.lookahead().type === tt.braceL) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(\"abstract\") && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        this.parseClass(cls, true, true);\n        cls.abstract = true;\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.state.value === \"interface\") {\n        const result = this.tsParseDeclaration(\n          this.startNode(),\n          this.state.value,\n          true,\n        );\n\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt.name && ahead.value === \"enum\") {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.expect(tt._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: { hadConstructor: boolean },\n      constructorAllowsSuper: boolean,\n    ): void {\n      this.tsParseModifiers(member, [\"declare\"]);\n      const accessibility = this.parseAccessModifier();\n      if (accessibility) member.accessibility = accessibility;\n      this.tsParseModifiers(member, [\"declare\"]);\n\n      super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: { hadConstructor: boolean },\n      isStatic: boolean,\n      constructorAllowsSuper: boolean,\n    ): void {\n      this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n        }\n        if (isStatic) {\n          this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            TSErrors.IndexSignatureHasAccessibility,\n            (member: any).accessibility,\n          );\n        }\n\n        return;\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member,\n        state,\n        isStatic,\n        constructorAllowsSuper,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      noIn: ?boolean,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!refNeedsArrowPos || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          noIn,\n          startPos,\n          startLoc,\n          refNeedsArrowPos,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, noIn, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        // $FlowIgnore\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(\"declare\");\n\n      let declaration: ?N.Declaration;\n\n      if (this.match(tt.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (node.declare && this.match(tt.equal)) {\n        this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          TSErrors.PrivateElementHasAccessibility,\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (this.match(tt.jsxTagStart)) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === ct.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === ct.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (!jsx?.error && !this.isRelational(\"<\")) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          (expr.extra && expr.extra.parenthesized)\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, TSErrors.PatternIsOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node));\n        case \"TSParameterProperty\":\n          return super.toAssignable(node);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression);\n          return node;\n        default:\n          return super.toAssignable(node);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(\n            expr.parameter,\n            bindingType,\n            checkClashes,\n            \"parameter property\",\n          );\n          return;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          this.checkLVal(\n            expr.expression,\n            bindingType,\n            checkClashes,\n            contextDescription,\n          );\n          return;\n        default:\n          super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          TSErrors.TypeAnnotationAfterAssign,\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(tt.relational, 1);\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          this.raise(expr.start, TSErrors.UnexpectedTypeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    shouldParseArrow() {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const firstParam = method.params[0];\n      const hasContextParam =\n        firstParam &&\n        firstParam.type === \"Identifier\" &&\n        firstParam.name === \"this\";\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\n\ntt.placeholder = new TokenType(\"%%\", { startsExpr: true });\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, \"A class name is required\");\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tt.placeholder.label,\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(\"from\");\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { types as tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.eat(tt.modulo);\n        if (this.match(tt.name)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (\n    hasPlugin(plugins, \"pipelineOperator\") &&\n    !PIPELINE_PROPOSALS.includes(\n      getPluginOption(plugins, \"pipelineOperator\", \"proposal\"),\n    )\n  ) {\n    throw new Error(\n      \"'pipelineOperator' requires 'proposal' option whose value should be one of: \" +\n        PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    const moduleAttributesVerionPluginOption = getPluginOption(\n      plugins,\n      \"moduleAttributes\",\n      \"version\",\n    );\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\n        \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n          \" representing the last proposal update. Currently, the\" +\n          \" only supported value is 'may-2020'.\",\n      );\n    }\n  }\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> = Object.keys(\n  mixinPlugins,\n);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { types as tt, type TokenType } from \"./types\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init(options: Options): void {\n    this.strict =\n      options.strictMode === false ? false : options.sourceType === \"module\";\n\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  errors: SyntaxError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  inParameters: boolean = false;\n  maybeInArrowParameters: boolean = false;\n  // This flag is used to track async arrow head across function declarations.\n  // e.g. async (foo = function (await) {}) => {}\n  // When parsing `await` in this expression, `maybeInAsyncArrowHead` is true\n  // but `maybeInArrowParameters` is false\n  maybeInAsyncArrowHead: boolean = false;\n  inPipeline: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  inPropertyName: boolean = false;\n  hasFlowComment: boolean = false;\n  isIterator: boolean = false;\n\n  // For the smartPipelines plugin:\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F# plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  yieldPos: number = -1;\n  awaitPos: number = -1;\n\n  // Comment store.\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  trailingComments: Array<N.Comment> = [];\n  leadingComments: Array<N.Comment> = [];\n  commentStack: Array<{\n    start: number,\n    leadingComments: ?Array<N.Comment>,\n    trailingComments: ?Array<N.Comment>,\n    type: string,\n  }> = [];\n  // $FlowIgnore this is initialized when the parser starts.\n  commentPreviousNode: N.Node = null;\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n  lineStart: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  context: Array<TokContext> = [ct.braceStatement];\n  exprAllowed: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to throw an error for\n  // an octal literal in a directive that occurs prior\n  // to a \"use strict\" directive.\n  octalPositions: number[] = [];\n\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  exportedIdentifiers: Array<string> = [];\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport { types as tt, keywords as keywordTypes, type TokenType } from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport ParserErrors, { Errors } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreak,\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  type: TokenType;\n  value: any;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +unexpected: (pos?: ?number, messageOrType?: string | TokenType) => empty;\n  +expectPlugin: (name: string, pos?: ?number) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // TODO\n\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  // TODO\n\n  lookahead(): State {\n    const old = this.state;\n    this.state = old.clone(true);\n\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    // $FlowIgnore: The skipWhiteSpace ensures to match any string\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (!this.match(tt.num) && !this.match(tt.string)) return;\n    this.state.pos = this.state.start;\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart =\n        this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n    this.nextToken();\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext?.preserveSpace) this.skipSpace();\n\n    this.state.octalPositions = [];\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    const override = curContext?.override;\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(\n    block: boolean,\n    text: string,\n    start: number,\n    end: number,\n    startLoc: Position,\n    endLoc: Position,\n  ): void {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc),\n    };\n\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment(): void {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n    while (\n      (match = lineBreakG.exec(this.input)) &&\n      match.index < this.state.pos\n    ) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      true,\n      this.input.slice(start + 2, end),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  skipLineComment(startSkip: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      false,\n      this.input.slice(start + startSkip, this.state.pos),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk:\n              this.skipBlockComment();\n              break;\n\n            case charCodes.slash:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        throw this.raise(\n          this.state.pos,\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n        );\n        /* eslint-enable @babel/development-internal/dry-error-messages */\n      }\n\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n      this.state.pos += 2;\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    // '/'\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    // Exponentiation operator **\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    if (next === charCodes.equalsTo && !exprAllowed) {\n      width++;\n      type = tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n\n        this.finishOp(tt.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    // '^'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (\n        next === charCodes.dash &&\n        !this.inModule &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan &&\n        (this.state.lastTokEnd === 0 ||\n          lineBreak.test(\n            this.input.slice(this.state.lastTokEnd, this.state.pos),\n          ))\n      ) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code: number): void {\n    // '<>'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size =\n        code === charCodes.greaterThan &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan\n          ? 3\n          : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (\n      next === charCodes.exclamationMark &&\n      code === charCodes.lessThan &&\n      !this.inModule &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dash &&\n      this.input.charCodeAt(this.state.pos + 3) === charCodes.dash\n    ) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      size = 2;\n    }\n\n    this.finishOp(tt.relational, size);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark && !this.state.inType) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // [|\n          this.finishToken(tt.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // {|\n          this.finishToken(tt.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n      case charCodes.greaterThan:\n        this.readToken_lt_gt(code);\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      Errors.InvalidOrUnexpectedToken,\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.pos;\n    let escaped, inClass;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      const ch = this.input.charAt(this.state.pos);\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n        escaped = ch === \"\\\\\";\n      }\n      ++this.state.pos;\n    }\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (\n        isIdentifierChar(charCode) ||\n        charCode === charCodes.backslash\n      ) {\n        this.raise(this.state.pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (this.hasPlugin(\"numericSeparator\")) {\n        if (code === charCodes.underscore) {\n          const prev = this.input.charCodeAt(this.state.pos - 1);\n          const next = this.input.charCodeAt(this.state.pos + 1);\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          } else if (\n            forbiddenSiblings.indexOf(prev) > -1 ||\n            forbiddenSiblings.indexOf(next) > -1 ||\n            Number.isNaN(next)\n          ) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          }\n\n          if (!allowNumSeparator) {\n            this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n          }\n\n          // Ignore this _ character\n          ++this.state.pos;\n          continue;\n        }\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.underscore) {\n      this.expectPlugin(\"numericSeparator\", this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isNonOctalDecimalInt = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n    let octal =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n    if (octal) {\n      if (this.state.strict) {\n        this.raise(start, Errors.StrictOctalLiteral);\n      }\n      if (/[89]/.test(this.input.slice(start, this.state.pos))) {\n        octal = false;\n        isNonOctalDecimalInt = true;\n      }\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !octal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !octal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) this.raise(start, Errors.InvalidNumber);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    // disallow numeric separators in non octal decimals and legacy octal likes\n    if (this.hasPlugin(\"numericSeparator\") && (octal || isNonOctalDecimalInt)) {\n      const underscorePos = this.input\n        .slice(start, this.state.pos)\n        .indexOf(\"_\");\n      if (underscorePos > 0) {\n        this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n      }\n    }\n\n    if (next === charCodes.underscore) {\n      this.expectPlugin(\"numericSeparator\", this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || octal || isNonOctalDecimalInt) {\n        this.raise(start, Errors.InvalidBigIntLiteral);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    // remove \"_\" for numeric literal separator, and \"n\" for BigInts\n    const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    const val = octal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  // Used to read escaped characters\n\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, Errors.StrictOctalLiteral);\n            } else {\n              // This property is used to throw an error for\n              // an octal literal in a directive that occurs prior\n              // to a \"use strict\" directive.\n              this.state.octalPositions.push(codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  readWord1(): string {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === charCodes.atSign) {\n        ++this.state.pos;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word: string): boolean {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(): void {\n    const word = this.readWord1();\n    const type = keywordTypes.get(word) || tt.name;\n\n    // Allow @@iterator and @@asyncIterator as a identifier only inside type\n    if (\n      this.state.isIterator &&\n      (!this.isIterator(word) || !this.state.inType)\n    ) {\n      this.raise(this.state.pos, Errors.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes(): void {\n    const kw = this.state.type.keyword;\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, Errors.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType: TokenType): boolean {\n    const parent = this.curContext();\n    if (parent === ct.functionExpression || parent === ct.functionStatement) {\n      return true;\n    }\n    if (\n      prevType === tt.colon &&\n      (parent === ct.braceStatement || parent === ct.braceExpression)\n    ) {\n      return !parent.isExpr;\n    }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (\n      prevType === tt._return ||\n      (prevType === tt.name && this.state.exprAllowed)\n    ) {\n      return lineBreak.test(\n        this.input.slice(this.state.lastTokEnd, this.state.start),\n      );\n    }\n\n    if (\n      prevType === tt._else ||\n      prevType === tt.semi ||\n      prevType === tt.eof ||\n      prevType === tt.parenR ||\n      prevType === tt.arrow\n    ) {\n      return true;\n    }\n\n    if (prevType === tt.braceL) {\n      return parent === ct.braceStatement;\n    }\n\n    if (\n      prevType === tt._var ||\n      prevType === tt._const ||\n      prevType === tt.name\n    ) {\n      return false;\n    }\n\n    if (prevType === tt.relational) {\n      // `class C<T> { ... }`\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType: TokenType): void {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === tt.dot || prevType === tt.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if ((update = type.updateContext)) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport * as charCodes from \"charcodes\";\nimport { Errors } from \"./error\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // TODO\n\n  isRelational(op: \"<\" | \">\"): boolean {\n    return this.match(tt.relational) && this.state.value === op;\n  }\n\n  isLookaheadRelational(op: \"<\" | \">\"): boolean {\n    const next = this.nextTokenStart();\n    if (this.input.charAt(next) === op) {\n      if (next + 1 === this.input.length) {\n        return true;\n      }\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== op.charCodeAt(0) && afterNext !== charCodes.equalsTo;\n    }\n    return false;\n  }\n\n  // TODO\n\n  expectRelational(op: \"<\" | \">\"): void {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, tt.relational);\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(name: string): boolean {\n    return (\n      this.match(tt.name) &&\n      this.state.value === name &&\n      !this.state.containsEsc\n    );\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    return (\n      this.input.slice(nameStart, nameEnd) === name &&\n      (nameEnd === this.input.length ||\n        !isIdentifierChar(this.input.charCodeAt(nameEnd)))\n    );\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(name: string): boolean {\n    return this.isContextual(name) && this.eat(tt.name);\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(name: string, message?: string): void {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(): void {\n    if (!this.isLineTerminator()) this.unexpected(null, tt.semi);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(this.state.lastTokEnd, message);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: string | TokenType = \"Unexpected token\",\n  ): empty {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: [name] },\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: names },\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n      );\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (\n      this.state.yieldPos !== -1 &&\n      (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)\n    ) {\n      this.raise(this.state.yieldPos, Errors.YieldBindingIdentifier);\n    }\n    if (this.state.awaitPos !== -1) {\n      this.raise(this.state.awaitPos, Errors.AwaitBindingIdentifier);\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, SyntaxError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: SyntaxError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssign, doubleProto } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return (\n      this.match(tt.name) ||\n      !!this.state.type.keyword ||\n      this.match(tt.string) ||\n      this.match(tt.num) ||\n      this.match(tt.bigint)\n    );\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track\n * - **shorthandAssign**: track initializer `=` position when parsing ambiguous\n *   patterns. When we are sure the parsed pattern is a RHS, which means it is\n *   not a pattern, we will throw on this position on invalid assign syntax,\n *   otherwise it will be reset to -1\n * - **doubleProto**: track the duplicate `__proto__` key position when parsing\n *   ambiguous object patterns. When we are sure the parsed pattern is a RHS,\n *   which means it is an object literal, we will throw on this position for\n *   __proto__ redefinition, otherwise it will be reset to -1\n */\nexport class ExpressionErrors {\n  shorthandAssign = -1;\n  doubleProto = -1;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n  range: [number, number];\n  leadingComments: Array<Comment>;\n  trailingComments: Array<Comment>;\n  innerComments: Array<Comment>;\n  extra: { [key: string]: any };\n\n  __clone(): this {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // $FlowIgnore\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node) => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssign: (\n    noIn?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObj: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n  // NOTE: There is a corresponding \"isAssignable\" method in flow.js.\n  // When this one is updated, please check if also that one needs to be updated.\n\n  toAssignable(node: Node): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (\n        parenthesized.type !== \"Identifier\" &&\n        parenthesized.type !== \"MemberExpression\"\n      ) {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingComma\n          ) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, node.extra?.trailingComma);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(((parenthesized: any): Expression));\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop: Node, isLast: boolean) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod;\n\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(prop.key.start, error);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaPos?: ?number,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(\n      false,\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObj(tt.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc || this.state.startLoc;\n    startPos = startPos || this.state.start;\n    left = left || this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n\n  checkLVal(\n    expr: Expression,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?{ [key: string]: boolean },\n    contextDescription: string,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(expr.name, this.inModule)\n            : isStrictBindOnlyReservedWord(expr.name))\n        ) {\n          /* eslint-disable @babel/development-internal/dry-error-messages */\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            expr.name,\n          );\n          /* eslint-enable @babel/development-internal/dry-error-messages */\n        }\n\n        if (checkClashes) {\n          // we need to prefix this with an underscore for the cases where we have a key of\n          // `__proto__`. there's a bug in old V8 where the following wouldn't work:\n          //\n          //   > var obj = Object.create(null);\n          //   undefined\n          //   > obj.__proto__\n          //   null\n          //   > obj.__proto__ = true;\n          //   true\n          //   > obj.__proto__\n          //   null\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (prop.type === \"ObjectProperty\") prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (prop.type === \"ObjectMethod\") continue;\n\n          this.checkLVal(\n            prop,\n            bindingType,\n            checkClashes,\n            \"object destructuring pattern\",\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              bindingType,\n              checkClashes,\n              \"array destructuring pattern\",\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          bindingType,\n          checkClashes,\n          \"assignment pattern\",\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          bindingType,\n          checkClashes,\n          \"rest element\",\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          bindingType,\n          checkClashes,\n          \"parenthesized expression\",\n        );\n        break;\n\n      default: {\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(\n          expr.start,\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          contextDescription,\n        );\n        /* eslint-enable @babel/development-internal/dry-error-messages */\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport { types as ct } from \"../tokenizer/context\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n} from \"../util/identifier\";\nimport type { Pos, Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_RETURN,\n  PARAM,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport { Errors } from \"./error\";\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      prop.type === \"ObjectMethod\" ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, Errors.RecordNoProto);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `noIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `noIn` is true, the production parameter [In] is not present.\n  //   Whenever [?In] appears in the right-hand sides of a production, we pass\n  //   `noIn` to the subroutine calls.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    noIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(noIn, refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(noIn, refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  parseMaybeAssign(\n    noIn?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield(noIn);\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      } else {\n        // The tokenizer will assume an expression is allowed after\n        // `yield`, but this isn't that kind of yield\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(tt.parenL) || this.match(tt.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(\n      noIn,\n      refExpressionErrors,\n      refNeedsArrowPos,\n    );\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (operator === \"??=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n      if (operator === \"||=\" || operator === \"&&=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left);\n        refExpressionErrors.doubleProto = -1; // reset because double __proto__ is valid in assignment expression\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  parseMaybeConditional(\n    noIn: ?boolean,\n    refExpressionErrors: ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(noIn, refExpressionErrors);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    return this.parseConditional(\n      expr,\n      noIn,\n      startPos,\n      startLoc,\n      refNeedsArrowPos,\n    );\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    noIn: ?boolean,\n    startPos: number,\n    startLoc: Position,\n    // FIXME: Disabling this for now since can't seem to get it to play nicely\n    // eslint-disable-next-line no-unused-vars\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  // Start the precedence parser.\n\n  parseExprOps(\n    noIn: ?boolean,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n    if (this.checkExpressionErrors(refExpressionErrors, false)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    let prec = this.state.type.binop;\n    if (prec != null && (!noIn || !this.match(tt._in))) {\n      if (prec > minPrec) {\n        const operator = this.state.value;\n        if (operator === \"|>\" && this.state.inFSharpPipelineDirectBody) {\n          return left;\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = operator;\n        if (\n          operator === \"**\" &&\n          left.type === \"UnaryExpression\" &&\n          (this.options.createParenthesizedExpressions ||\n            !(left.extra && left.extra.parenthesized))\n        ) {\n          this.raise(\n            left.argument.start,\n            Errors.UnexpectedTokenUnaryExponentiation,\n          );\n        }\n\n        const op = this.state.type;\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        } else if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = ((tt.logicalAND: any): { binop: number }).binop;\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (\n            this.match(tt.name) &&\n            this.state.value === \"await\" &&\n            this.prodParam.hasAwait\n          ) {\n            throw this.raise(\n              this.state.start,\n              Errors.UnexpectedAwaitAfterPipelineBody,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec, noIn);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n          noIn,\n        );\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    op: TokenType,\n    prec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(\n                this.parseExprOpBaseRightExpr(op, prec, noIn),\n                startPos,\n                startLoc,\n              );\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec, noIn);\n            });\n        }\n      // falls through\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec, noIn);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    op: TokenType,\n    prec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      op.rightAssociative ? prec - 1 : prec,\n      noIn,\n    );\n  }\n\n  // Parse unary operators, both prefix and postfix.\n\n  parseMaybeUnary(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    } else if (this.state.type.prefix) {\n      const node = this.startNode();\n      const update = this.match(tt.incDec);\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (node.operator === \"throw\") {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      this.next();\n\n      node.argument = this.parseMaybeUnary();\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (update) {\n        this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      } else if (this.state.strict && node.operator === \"delete\") {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (\n          (arg.type === \"MemberExpression\" ||\n            arg.type === \"OptionalMemberExpression\") &&\n          arg.property.type === \"PrivateName\"\n        ) {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      return this.finishNode(\n        node,\n        update ? \"UpdateExpression\" : \"UnaryExpression\",\n      );\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n      if (state.maybeAsyncArrow) {\n        this.state.maybeInAsyncArrowHead = true;\n      }\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n      this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(\n        this.finishNode(node, \"BindExpression\"),\n        startPos,\n        startLoc,\n        noCalls,\n      );\n    }\n    let optional = false;\n    if (this.match(tt.questionDot)) {\n      state.optionalChainMember = optional = true;\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        state.stop = true;\n        return base;\n      }\n      this.next();\n    }\n    const computed = this.eat(tt.bracketL);\n    if (\n      (optional && !this.match(tt.parenL) && !this.match(tt.backQuote)) ||\n      computed ||\n      this.eat(tt.dot)\n    ) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed\n        ? this.parseExpression()\n        : this.parseMaybePrivateName(true);\n      node.computed = computed;\n\n      if (node.property.type === \"PrivateName\") {\n        if (node.object.type === \"Super\") {\n          this.raise(startPos, Errors.SuperPrivateField);\n        }\n        this.classScope.usePrivateName(\n          node.property.id.name,\n          node.property.start,\n        );\n      }\n\n      if (computed) {\n        this.expect(tt.bracketR);\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else {\n        return this.finishNode(node, \"MemberExpression\");\n      }\n    } else if (!noCalls && this.match(tt.parenL)) {\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n\n      this.next();\n\n      let node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n      }\n      if (optional) {\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      } else {\n        node.arguments = this.parseCallExpressionArguments(\n          tt.parenR,\n          state.maybeAsyncArrow,\n          base.type === \"Import\",\n          base.type !== \"Super\",\n          node,\n        );\n      }\n      this.finishCallExpression(node, state.optionalChainMember);\n\n      if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n        state.stop = true;\n\n        node = this.parseAsyncArrowFromCallExpression(\n          this.startNodeAt(startPos, startLoc),\n          node,\n        );\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n      } else {\n        this.toReferencedListDeep(node.arguments);\n\n        // We keep the old value if it isn't null, for cases like\n        //   (x = async(yield)) => {}\n        //\n        // Hi developer of the future :) If you are implementing generator\n        // arrow functions, please read the note below about \"await\" and\n        // verify if the same logic is needed for yield.\n        if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n        // Await is trickier than yield. When parsing a possible arrow function\n        // (e.g. something starting with `async(`) we don't know if its possible\n        // parameters will actually be inside an async arrow function or if it is\n        // a normal call expression.\n        // If it ended up being a call expression, if we are in a context where\n        // await expression are disallowed (and thus \"await\" is an identifier)\n        // we must be careful not to leak this.state.awaitPos to an even outer\n        // context, where \"await\" could not be an identifier.\n        // For example, this code is valid because \"await\" isn't directly inside\n        // an async function:\n        //\n        //     async function a() {\n        //       function b(param = async (await)) {\n        //       }\n        //     }\n        //\n        if (\n          (!this.isAwaitAllowed() && !oldMaybeInArrowParameters) ||\n          oldAwaitPos !== -1\n        ) {\n          this.state.awaitPos = oldAwaitPos;\n        }\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      return node;\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        startPos,\n        startLoc,\n        base,\n        state,\n      );\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseTaggedTemplateExpression(\n    startPos: number,\n    startLoc: Position,\n    base: N.Expression,\n    state: N.ParseSubscriptState,\n    typeArguments?: ?N.TsTypeParameterInstantiation,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (typeArguments) node.typeParameters = typeArguments;\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        this.expectPlugin(\"moduleAttributes\");\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          node.start,\n          Errors.ImportCallArity,\n          this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, Errors.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    possibleAsyncArrow: boolean,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.ImportCallArgumentTrailingComma,\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      // we need to make sure that if this is an async arrow functions,\n      // that we don't allow inner parens inside the params\n      if (this.match(tt.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(\n        this.parseExprListItem(\n          false,\n          possibleAsyncArrow ? new ExpressionErrors() : undefined,\n          possibleAsyncArrow ? { start: 0 } : undefined,\n          allowPlaceholder,\n        ),\n      );\n    }\n\n    // we found an async arrow function so let's not allow any inner parens\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.state.type === tt.slash) this.readRegexp();\n\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case tt._super:\n        node = this.startNode();\n        this.next();\n        if (\n          this.match(tt.parenL) &&\n          !this.scope.allowDirectSuper &&\n          !this.options.allowSuperOutsideMethod\n        ) {\n          this.raise(node.start, Errors.SuperNotAllowed);\n        } else if (\n          !this.scope.allowSuper &&\n          !this.options.allowSuperOutsideMethod\n        ) {\n          this.raise(node.start, Errors.UnexpectedSuper);\n        }\n\n        if (\n          !this.match(tt.parenL) &&\n          !this.match(tt.bracketL) &&\n          !this.match(tt.dot)\n        ) {\n          this.raise(node.start, Errors.UnsupportedSuper);\n        }\n\n        return this.finishNode(node, \"Super\");\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt.name: {\n        node = this.startNode();\n        const containsEsc = this.state.containsEsc;\n        const id = this.parseIdentifier();\n\n        if (\n          !containsEsc &&\n          id.name === \"async\" &&\n          this.match(tt._function) &&\n          !this.canInsertSemicolon()\n        ) {\n          const last = this.state.context.length - 1;\n          if (this.state.context[last] !== ct.functionStatement) {\n            // Since \"async\" is an identifier and normally identifiers\n            // can't be followed by expression, the tokenizer assumes\n            // that \"function\" starts a statement.\n            // Fixing it in the tokenizer would mean tracking not only the\n            // previous token (\"async\"), but also the one before to know\n            // its beforeExpr value.\n            // It's easier and more efficient to adjust the context here.\n            throw new Error(\"Internal error\");\n          }\n          this.state.context[last] = ct.functionExpression;\n\n          this.next();\n          return this.parseFunction(node, undefined, true);\n        } else if (\n          canBeArrow &&\n          !containsEsc &&\n          id.name === \"async\" &&\n          this.match(tt.name) &&\n          !this.canInsertSemicolon()\n        ) {\n          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n          const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n          const oldYieldPos = this.state.yieldPos;\n          const oldAwaitPos = this.state.awaitPos;\n          this.state.maybeInArrowParameters = true;\n          this.state.maybeInAsyncArrowHead = true;\n          this.state.yieldPos = -1;\n          this.state.awaitPos = -1;\n          const params = [this.parseIdentifier()];\n          this.expect(tt.arrow);\n          this.checkYieldAwaitInDefaultParams();\n          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n          this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n          this.state.yieldPos = oldYieldPos;\n          this.state.awaitPos = oldAwaitPos;\n          // let foo = async bar => {};\n          this.parseArrowExpression(node, params, true);\n          return node;\n        }\n\n        if (canBeArrow && this.match(tt.arrow) && !this.canInsertSemicolon()) {\n          this.next();\n          this.parseArrowExpression(node, [id], false);\n          return node;\n        }\n\n        return id;\n      }\n\n      case tt._do: {\n        this.expectPlugin(\"doExpressions\");\n        const node = this.startNode();\n        this.next();\n        const oldLabels = this.state.labels;\n        this.state.labels = [];\n        node.body = this.parseBlock();\n        this.state.labels = oldLabels;\n        return this.finishNode(node, \"DoExpression\");\n      }\n\n      case tt.regexp: {\n        const value = this.state.value;\n        node = this.parseLiteral(value.value, \"RegExpLiteral\");\n        node.pattern = value.pattern;\n        node.flags = value.flags;\n        return node;\n      }\n\n      case tt.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case tt.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case tt.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case tt._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case tt._true:\n      case tt._false:\n        return this.parseBooleanLiteral();\n\n      case tt.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        this.expectPlugin(\"recordAndTuple\");\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        const close =\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR;\n        this.state.inFSharpPipelineDirectBody = false;\n        node = this.startNode();\n        this.next();\n        node.elements = this.parseExprList(\n          close,\n          false,\n          refExpressionErrors,\n          node,\n        );\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return this.finishNode(node, \"TupleExpression\");\n      }\n      case tt.bracketL: {\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = false;\n        node = this.startNode();\n        this.next();\n        node.elements = this.parseExprList(\n          tt.bracketR,\n          true,\n          refExpressionErrors,\n          node,\n        );\n        if (!this.state.maybeInArrowParameters) {\n          // This could be an array pattern:\n          //   ([a: string, b: string]) => {}\n          // In this case, we don't have to call toReferencedList. We will\n          // call it, if needed, when we are sure that it is a parenthesized\n          // expression by calling toReferencedListDeep.\n          this.toReferencedList(node.elements);\n        }\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return this.finishNode(node, \"ArrayExpression\");\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        this.expectPlugin(\"recordAndTuple\");\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        const close =\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR;\n        this.state.inFSharpPipelineDirectBody = false;\n        const ret = this.parseObj(close, false, true, refExpressionErrors);\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return ret;\n      }\n      case tt.braceL: {\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = false;\n        const ret = this.parseObj(tt.braceR, false, false, refExpressionErrors);\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return ret;\n      }\n      case tt._function:\n        return this.parseFunctionExpression();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNew();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(callee.start, Errors.UnsupportedBind);\n        }\n      }\n\n      case tt.hash: {\n        if (this.state.inPipeline) {\n          node = this.startNode();\n\n          if (\n            this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\"\n          ) {\n            this.raise(node.start, Errors.PrimaryTopicRequiresSmartPipeline);\n          }\n\n          this.next();\n\n          if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n            this.raise(node.start, Errors.PrimaryTopicNotAllowed);\n          }\n\n          this.registerTopicReference();\n          return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n        }\n\n        const nextCh = this.input.codePointAt(this.state.end);\n        if (isIdentifierStart(nextCh) || nextCh === charCodes.backslash) {\n          const start = this.state.start;\n          // $FlowIgnore It'll either parse a PrivateName or throw.\n          node = (this.parseMaybePrivateName(true): N.PrivateName);\n          if (this.match(tt._in)) {\n            this.expectPlugin(\"privateIn\");\n            this.classScope.usePrivateName(node.id.name, node.start);\n          } else if (this.hasPlugin(\"privateIn\")) {\n            this.raise(\n              this.state.start,\n              Errors.PrivateInExpectedIn,\n              node.id.name,\n            );\n          } else {\n            throw this.unexpected(start);\n          }\n          return node;\n        }\n      }\n      // fall through\n      case tt.relational: {\n        if (this.state.value === \"<\") {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (\n            isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n            lookaheadCh === charCodes.greaterThan // Fragment <>\n          ) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          }\n        }\n      }\n      // fall through\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseBooleanLiteral(): N.BooleanLiteral {\n    const node = this.startNode();\n    node.value = this.match(tt._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(\n    isPrivateNameAllowed: boolean,\n  ): N.PrivateName | N.Identifier {\n    const isPrivate = this.match(tt.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, Errors.UnexpectedPrivateField);\n      }\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionExpression(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionExpression\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"function\");\n\n    if (this.prodParam.hasYield && this.eat(tt.dot)) {\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        Errors.UnsupportedMetaProperty,\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.expect(tt.dot);\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raiseWithData(\n          id.start,\n          { code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\" },\n          Errors.ImportMetaOutsideModule,\n        );\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral<T: N.Literal>(\n    value: any,\n    type: /*T[\"kind\"]*/ string,\n    startPos?: number,\n    startLoc?: Position,\n  ): T {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.expect(tt.parenL);\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = { start: 0 };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma, refNeedsArrowPos.start || null);\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssign(\n            false,\n            refExpressionErrors,\n            this.parseParenItem,\n            refNeedsArrowPos,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.start;\n    const innerEndLoc = this.state.startLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow() &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      if (!this.isAwaitAllowed() && !this.state.maybeInAsyncArrowHead) {\n        this.state.awaitPos = oldAwaitPos;\n      }\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n      for (const param of exprList) {\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    // We keep the old value if it isn't null, for cases like\n    //   (x = (yield)) => {}\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  parseNew(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"new\");\n\n    if (this.eat(tt.dot)) {\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = Errors.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(metaProp.start, error);\n        /* eslint-enable @babel/development-internal/dry-error-messages */\n      }\n\n      return metaProp;\n    }\n\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (\n      node.callee.type === \"OptionalMemberExpression\" ||\n      node.callee.type === \"OptionalCallExpression\"\n    ) {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObj<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parseObjectMember(isPattern, refExpressionErrors);\n      if (!isPattern) {\n        // $FlowIgnore RestElement will never be returned if !isPattern\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        prop.type !== \"ObjectProperty\" &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(prop.start, Errors.InvalidRecordProperty);\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  isAsyncProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      prop.key.name === \"async\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star)) &&\n      !this.hasPrecedingLineBreak()\n    );\n  }\n\n  parseObjectMember(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement | N.RestElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      if (isPattern) {\n        this.next();\n        // Don't use parseRestBinding() as we only allow Identifier here.\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(tt.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n\n    if (!isPattern && !containsEsc && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.eat(tt.star);\n      this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n    } else {\n      isAsync = false;\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      isPattern,\n      refExpressionErrors,\n      containsEsc,\n    );\n\n    return prop;\n  }\n\n  isGetterOrSetterMethod(prop: N.ObjectMethod, isPattern: boolean): boolean {\n    return (\n      !isPattern &&\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n      (this.isLiteralPropertyName() || // get foo() {}\n        this.match(tt.bracketL)) // get [\"string\"]() {}\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const start = method.start;\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      method.params[method.params.length - 1].type === \"RestElement\"\n    ) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    containsEsc: boolean,\n  ): ?N.ObjectMethod {\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n\n    if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n      if (isGenerator || isAsync) this.unexpected();\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      this.parseMethod(\n        prop,\n        /* isGenerator */ false,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n  }\n\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssign(false, refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else if (this.match(tt.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else {\n        prop.value = prop.key.__clone();\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    containsEsc: boolean,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        containsEsc,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    isPrivateNameAllowed: boolean,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(tt.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      // We check if it's valid for it to be a private name when we push it.\n      (prop: $FlowFixMe).key =\n        this.match(tt.num) || this.match(tt.string) || this.match(tt.bigint)\n          ? this.parseExprAtom()\n          : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    this.prodParam.enter(functionFlags(isAsync, false));\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaPos);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorPos =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? node.key.end\n                : node.start;\n            this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              BIND_OUTSIDE,\n              undefined,\n              \"function name\",\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    // $FlowIssue\n    const nameHash: {} = Object.create(null);\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(\n        node.params[i],\n        BIND_VAR,\n        allowDuplicates ? null : nameHash,\n        \"function parameter list\",\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    refNeedsArrowPos: ?Pos,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, Errors.UnexpectedToken, \",\");\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors, refNeedsArrowPos),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssign(\n        false,\n        refExpressionErrors,\n        this.parseParenItem,\n        refNeedsArrowPos,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    if (this.match(tt.name)) {\n      name = this.state.value;\n    } else if (this.state.type.keyword) {\n      name = this.state.type.keyword;\n\n      // `class` and `function` keywords push function-type token context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed\n      // as an identifier such as a property name.\n      const context = this.state.context;\n      if (\n        (name === \"class\" || name === \"function\") &&\n        context[context.length - 1].token === \"function\"\n      ) {\n        context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      this.state.type = tt.name;\n    } else {\n      this.checkReservedWord(\n        name,\n        this.state.start,\n        !!this.state.type.keyword,\n        false,\n      );\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, Errors.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      }\n      if (\n        this.state.awaitPos === -1 &&\n        (this.state.maybeInAsyncArrowHead || this.isAwaitAllowed())\n      ) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (\n      this.scope.inClass &&\n      !this.scope.inNonArrowFunction &&\n      word === \"arguments\"\n    ) {\n      this.raise(startLoc, Errors.ArgumentsDisallowedInInitializer);\n      return;\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, Errors.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(): N.AwaitExpression {\n    const node = this.startNode();\n\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.AwaitExpressionFormalParameter);\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n    if (this.eat(tt.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (\n        this.hasPrecedingLineBreak() ||\n        // All the following expressions are ambiguous:\n        //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n        this.match(tt.plusMin) ||\n        this.match(tt.parenL) ||\n        this.match(tt.bracketL) ||\n        this.match(tt.backQuote) ||\n        // Sometimes the tokenizer generates tt.slash for regexps, and this is\n        // handler by parseExprAtom\n        this.match(tt.regexp) ||\n        this.match(tt.slash) ||\n        // This code could be parsed both as a modulo operator or as an intrinsic:\n        //   await %x(0)\n        (this.hasPlugin(\"v8intrinsic\") && this.match(tt.modulo))\n      ) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(noIn?: ?boolean): N.YieldExpression {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.YieldInParameter);\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n    if (\n      this.match(tt.semi) ||\n      (!this.match(tt.star) && !this.state.type.startsExpr) ||\n      this.hasPrecedingLineBreak()\n    ) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(tt.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const pipelineStyle = this.checkSmartPipelineBodyStyle(childExpression);\n\n    this.checkSmartPipelineBodyEarlyErrors(\n      childExpression,\n      pipelineStyle,\n      startPos,\n    );\n\n    return this.parseSmartPipelineBodyInStyle(\n      childExpression,\n      pipelineStyle,\n      startPos,\n      startLoc,\n    );\n  }\n\n  checkSmartPipelineBodyEarlyErrors(\n    childExpression: N.Expression,\n    pipelineStyle: N.PipelineStyle,\n    startPos: number,\n  ): void {\n    if (this.match(tt.arrow)) {\n      // If the following token is invalidly `=>`, then throw a human-friendly error\n      // instead of something like 'Unexpected token, expected \";\"'.\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    } else if (\n      pipelineStyle === \"PipelineTopicExpression\" &&\n      childExpression.type === \"SequenceExpression\"\n    ) {\n      this.raise(startPos, Errors.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpression: N.Expression,\n    pipelineStyle: N.PipelineStyle,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    switch (pipelineStyle) {\n      case \"PipelineBareFunction\":\n        bodyNode.callee = childExpression;\n        break;\n      case \"PipelineBareConstructor\":\n        bodyNode.callee = childExpression.callee;\n        break;\n      case \"PipelineBareAwaitedFunction\":\n        bodyNode.callee = childExpression.argument;\n        break;\n      case \"PipelineTopicExpression\":\n        if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n          this.raise(startPos, Errors.PipelineTopicUnused);\n        }\n        bodyNode.expression = childExpression;\n        break;\n      default:\n        throw new Error(\n          `Internal @babel/parser error: Unknown pipeline style (${pipelineStyle})`,\n        );\n    }\n    return this.finishNode(bodyNode, pipelineStyle);\n  }\n\n  checkSmartPipelineBodyStyle(expression: N.Expression): N.PipelineStyle {\n    switch (expression.type) {\n      default:\n        return this.isSimpleReference(expression)\n          ? \"PipelineBareFunction\"\n          : \"PipelineTopicExpression\";\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // Enable topic references from outer contexts within smart pipeline bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicPermittingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // Disable topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicForbiddingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Disable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 0,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  // Register the use of a primary topic reference (`#`) within the current\n  // topic context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number, noIn: ?boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      prec,\n      noIn,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"./error\";\nimport {\n  isIdentifierChar,\n  isIdentifierStart,\n  keywordRelationalOperator,\n} from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    program.sourceType = this.options.sourceType;\n\n    program.interpreter = this.parseInterpreterDirective();\n\n    this.parseBlockBody(program, true, true, tt.eof);\n\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = this.tokens;\n\n    return this.finishNode(file, \"File\");\n  }\n\n  // TODO\n\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const expr = stmt.expression;\n\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n\n    directive.value = this.finishNodeAt(\n      directiveLiteral,\n      \"DirectiveLiteral\",\n      expr.end,\n      expr.loc.end,\n    );\n\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === charCodes.leftSquareBracket) return true;\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n      case tt._continue:\n        // $FlowFixMe\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._export:\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis ||\n          nextTokenCharCode === charCodes.dot\n        ) {\n          break;\n        }\n\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(this.state.start, Errors.UnexpectedImportExport);\n        }\n\n        this.next();\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              Errors.AsyncFunctionInSingleStatementContext,\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      starttype === tt.name &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(\n        node.start,\n        {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n        },\n        Errors.ImportOutsideModule,\n      );\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ): N.BreakStatement | N.ContinueStatement {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ) {\n    const isBreak = keyword === \"break\";\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(node.start, Errors.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(\"of\")) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    if (this.match(tt._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init);\n      const description = this.isContextual(\"of\")\n        ? \"for-of statement\"\n        : \"for-in statement\";\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.MultipleDefaultsInSwitch,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (\n      lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))\n    ) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseBindingAtom();\n        const simple = clause.param.type === \"Identifier\";\n        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLVal(clause.param, BIND_LEXICAL, null, \"catch clause\");\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n      this.scope.exit();\n\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const octalPositions = [];\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      // Track octal literals that occur before a \"use strict\" directive.\n      if (!parsedNonDirective && this.state.octalPositions.length) {\n        octalPositions.push(...this.state.octalPositions);\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n          hasStrictModeDirective = true;\n          this.setStrict(true);\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    // Throw an error for any octal literals found before a\n    // \"use strict\" directive. Strict mode will be set at parse\n    // time for any literals that occur after the directive.\n    if (this.state.strict && octalPositions.length) {\n      for (const pos of octalPositions) {\n        this.raise(pos, Errors.StrictOctalLiteral);\n      }\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.expect(tt.semi);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.expect(tt.semi);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        Errors.ForInOfLoopInitializer,\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(\"of\"))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(\"of\")))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            Errors.DeclarationMissingInitializer,\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      \"variable declaration\",\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || this.match(tt.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n\n    this.expect(tt.parenL);\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    this.state.strict = oldStrict;\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  parseClassBody(\n    constructorAllowsSuper: boolean,\n    oldStrict?: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state = { hadConstructor: false };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    if (!oldStrict) {\n      this.state.strict = false;\n    }\n\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    } else if (containsEsc) {\n      throw this.unexpected();\n    }\n\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    constructorAllowsSuper: boolean,\n  ): void {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic && this.parseClassMemberFromModifier(classBody, member)) {\n      // a class element named 'static'\n      return;\n    }\n\n    this.parseClassMemberWithIsStatic(\n      classBody,\n      member,\n      state,\n      isStatic,\n      constructorAllowsSuper,\n    );\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    isStatic: boolean,\n    constructorAllowsSuper: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassPropertyName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    // Check the key is not a computed expression or string literal.\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isSimple &&\n      key.name === \"async\" &&\n      !containsEsc &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      this.parseClassPropertyName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isSimple &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !containsEsc &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      this.parseClassPropertyName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassPropertyName(member: N.ClassMember): N.Expression | N.Identifier {\n    const key = this.parsePropertyName(member, /* isPrivateNameAllowed */ true);\n\n    if (\n      !member.computed &&\n      member.static &&\n      ((key: $FlowSubtype<N.Identifier>).name === \"prototype\" ||\n        (key: $FlowSubtype<N.StringLiteral>).value === \"prototype\")\n    ) {\n      this.raise(key.start, Errors.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, Errors.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      node.key.id.name,\n      CLASS_ELEMENT_OTHER,\n      node.key.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // Overridden in typescript.js\n  parseAccessModifier(): ?N.Accessibility {\n    return undefined;\n  }\n\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    // [In] production parameter is tracked in parseMaybeAssign\n    this.prodParam.enter(PARAM);\n\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssign() : null;\n    this.semicolon();\n    this.prodParam.exit();\n\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    // [In] production parameter is tracked in parseMaybeAssign\n    this.prodParam.enter(PARAM);\n\n    if (this.match(tt.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssign();\n    } else {\n      node.value = null;\n    }\n    this.semicolon();\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (this.match(tt.name)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n\n      node.source = null;\n      node.declaration = null;\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      if (this.isContextual(\"async\")) {\n        const next = this.nextTokenStart();\n\n        // export async;\n        if (!this.isUnparsedContextual(next, \"function\")) {\n          this.unexpected(next, tt._function);\n        }\n      }\n\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssign();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    if (this.match(tt.name)) {\n      const value = this.state.value;\n      if (value === \"async\" || value === \"let\") {\n        return false;\n      }\n      if (\n        (value === \"type\" || value === \"interface\") &&\n        !this.state.containsEsc\n      ) {\n        const l = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (l.type === tt.name && l.value !== \"from\") ||\n          l.type === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (this.match(tt.name) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    if (this.match(tt.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      this.state.type.keyword === \"var\" ||\n      this.state.type.keyword === \"const\" ||\n      this.state.type.keyword === \"function\" ||\n      this.state.type.keyword === \"class\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(declaration.start, Errors.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            // check for keywords used as local names\n            this.checkReservedWord(\n              specifier.local.name,\n              specifier.local.start,\n              true,\n              false,\n            );\n            // check if export is defined\n            // $FlowIgnore\n            this.scope.checkLocalExport(specifier.local);\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (currentContextDecorators.length) {\n      const isClass =\n        node.declaration &&\n        (node.declaration.type === \"ClassDeclaration\" ||\n          node.declaration.type === \"ClassExpression\");\n      if (!node.declaration || !isClass) {\n        throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n      }\n      this.takeDecorators(node.declaration);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        name,\n      );\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    }\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseIdentifier(true);\n      node.exported = this.eatContextual(\"as\")\n        ? this.parseIdentifier(true)\n        : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  // Parses import declaration.\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-module-attributes\n    // parse module attributes if the next token is `with` or ignore and finish the ImportDeclaration node.\n    const attributes = this.maybeParseModuleAttributes();\n    if (attributes) {\n      node.attributes = attributes;\n    }\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return this.match(tt.name);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      contextDescription,\n    );\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      // we are trying to parse a node which has the following syntax\n      // with type: \"json\"\n      // [with -> keyword], [type -> Identifier], [\":\" -> token for colon], [\"json\" -> StringLiteral]\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      // for now we are only allowing `type` as the only allowed module attribute\n      if (node.key.name !== \"type\") {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributeDifferentFromType,\n          node.key.name,\n        );\n      }\n\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      // check if the value set to the module attribute is a string as we only allow string literals\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node: N.ImportDeclaration): void {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(\n        specifier.imported.name,\n        specifier.start,\n        true,\n        true,\n      );\n      specifier.local = specifier.imported.__clone();\n    }\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      \"import specifier\",\n    );\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Errors } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, number> = new Map();\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  raise: raiseFunction;\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    pos: number,\n  ) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, pos: number) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      // top-level\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ScopeHandler from \"../util/scope\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    const ScopeHandler = this.getScopeHandler();\n\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { types as tokTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexport { tokTypes };\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","regexp","string","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_SCOPE_OUTSIDE","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","last","stack","length","CommentsParser","addComment","comment","filename","loc","state","trailingComments","push","leadingComments","adjustCommentsAfterTrailingComma","node","elements","takeAllComments","lastElement","i","j","commentPreviousNode","splice","newTrailingComments","leadingComment","undefined","processComment","type","body","commentStack","firstChild","lastChild","lastInStack","pop","properties","arguments","slice","innerComments","firstTrailingCommentIndex","findIndex","ErrorMessages","Object","freeze","ArgumentsDisallowedInInitializer","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitExpressionFormalParameter","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportMetaOutsideModule","ImportOutsideModule","InvalidBigIntLiteral","InvalidCodePoint","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","errorTemplate","params","raiseWithData","data","message","replace","_","_raise","errorContext","err","SyntaxError","errorRecovery","isLookahead","errors","isSimpleProperty","kind","method","superClass","estreeParseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","estreeParseBigIntLiteral","value","bigInt","BigInt","String","parseLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","raw","extra","finishNodeAt","initFunction","isAsync","checkDeclaration","checkGetterSetterParams","prop","paramCount","Errors","checkLVal","expr","bindingType","checkClashes","contextDescription","disallowLetBinding","forEach","checkProto","isRecord","protoRef","refExpressionErrors","isValidDirective","parenthesized","stmtToDirective","parseBlockBody","allowDirectives","topLevel","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseExprAtom","tt","startPos","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","finishNode","parseObjectMethod","isPattern","containsEsc","shorthand","parseObjectProperty","toAssignable","toAssignableObjectExpressionProp","isLast","key","finishCallExpression","optional","callee","toReferencedListDeep","exprList","isParenthesizedExpr","parseExport","exported","specifiers","parseSubscript","args","TokContext","isExpr","preserveSpace","override","braceStatement","braceExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","curContext","prevType","allowed","prodParam","hasYield","isIterator","braceIsBlock","statementParens","test","b_stat","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","isIteratorStart","current","next","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SpreadVariance","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","finishToken","val","matches","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloLoc","moduloPos","checksLoc","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","id","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","scope","declareName","enter","bodyNode","parseImport","exit","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","lh","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","createIdentifier","flowParsePostfixType","canInsertSemicolon","elementType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","noIn","refNeedsArrowPos","result","tryParse","error","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","disallowInvalid","arrows","finishArrowValidation","every","isAssignable","toAssignableList","trailingComma","checkParams","parse","indexOf","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","constructorAllowsSuper","parseClassMemberFromModifier","getTokenFromCode","charCodeAt","finishOp","readWord","isBinding","element","operator","trailingCommaPos","toReferencedList","parseClassProperty","parseClassPrivateProperty","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","tc","j_oTag","j_expr","arrowExpression","resetStartLocationFromNode","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","base","noCalls","parseCallExpressionArguments","abort","parseAsyncArrowWithTypeParameters","aborted","subscriptState","isLookaheadRelational","optionalChainMember","stop","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","includes","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","parseBooleanLiteral","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","memberNode","add","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagFragment","MissingClosingTagElement","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","inPropertyName","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScope","allowSuper","currentThisScope","inClass","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasReturn","functionFlags","nonNull","x","assert","TSErrors","ClassMethodHasDeclare","ClassMethodHasReadonly","DeclareClassFieldHasInitializer","DuplicateModifier","EmptyHeritageClauseType","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasStatic","OptionalTypeBeforeRequired","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","TemplateTypeHasSubstitution","TypeAnnotationAfterAssign","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","getScopeHandler","tsIsIdentifier","tsNextTokenCanFollowModifier","hasPrecedingLineBreak","tsParseModifier","allowedModifiers","modifier","tsTryParse","bind","tsParseModifiers","modified","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","startNodeAtNode","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","elementNode","restNode","tsParseType","lookaheadCharCode","raiseRestNotLast","optionalTypeNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsParseLiteralTypeNode","tsParseTemplateLiteralType","templateNode","parseTemplate","expressions","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","tsParseArrayTypeOrHigher","objectType","indexType","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","asserts","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","isLineTerminator","starttype","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminatorAndMatch","cls","abstract","tokenType","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","maybeInArrowParameters","oldYieldPos","yieldPos","oldAwaitPos","awaitPos","tsIsDeclarationStart","parseAssignableListItem","decorators","accessibility","parseAccessModifier","elt","pp","parameter","bodilessType","registerFunctionStatementId","nonNullExpression","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","parseStatementContent","parseClassMemberWithIsStatic","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","equal","typeCast","ct","parseBindingAtom","parseMaybeDecoratorArguments","isInParens","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","placeholder","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","parseClassBody","expectPlugin","nextTokenStart","isUnparsedContextual","startsWith","nextTokenStartSince","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStart","identifier","some","Array","isArray","option","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","join","moduleAttributesVerionPluginOption","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","keys","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","getOptions","opts","State","potentialArrowAt","inParameters","maybeInAsyncArrowHead","inPipeline","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","octalPositions","exportedIdentifiers","tokensLength","curPosition","skipArrays","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","ParserErrors","pushToken","checkKeywordEscapes","old","curr","skip","setStrict","lastIndexOf","skipSpace","codePointAt","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","readToken_lt_gt","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","escaped","charAt","content","mods","char","charCode","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isNonOctalDecimalInt","octal","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","n","readWord1","escStart","identifierCheck","esc","keywordTypes","parent","update","UtilParser","addExtra","op","afterNext","nameStart","nameEnd","messageOrType","missingPlugin","expectOnePlugin","names","checkYieldAwaitInDefaultParams","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","isLiteralPropertyName","ExpressionErrors","Node","parser","range","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","checkToRestConversion","arg","raiseTrailingCommaAfterRest","parseSpread","parseRestBinding","parseObj","close","closeCharCode","allowEmpty","elts","first","checkCommaAfterRest","parseDecorator","strictModeChanged","elem","ExpressionParser","computed","used","getExpression","paramFlags","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","prec","logical","coalesce","checkPipelineAtInfixOperator","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","isAwaitAllowed","parseAwait","parseExprSubscripts","maybeAsyncArrow","oldMaybeInAsyncArrowHead","parseNoCallExpr","parseMaybePrivateName","classScope","usePrivateName","tag","quasi","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","innerParenStart","oldInFSharpPipelineDirectBody","parseExprListItem","parseImportMetaProperty","parseFunction","oldLabels","parseExprList","ret","parseFunctionExpression","parseDecorators","parseNew","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","nextCh","lookaheadCh","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenStart","metaProp","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","create","parseObjectMember","isAsyncProp","isGetterOrSetterMethod","oldInPropertyName","generator","async","isExpression","oldInParameters","oldStrict","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","nameHash","identifierName","reservedTest","delegate","childExpression","pipelineStyle","checkSmartPipelineBodyStyle","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","topicReferenceWasUsedInCurrentTopicContext","isSimpleReference","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","StatementParser","interpreter","parseInterpreterDirective","from","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","parseVar","declarations","parseForIn","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","handler","clause","simple","finalizer","statementStart","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassPropertyName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","declarePrivateName","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","hasFrom","nextAfterFrom","checkNames","isDefault","isFrom","nodes","parseNext","maybeParseModuleAttributes","attrs","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}