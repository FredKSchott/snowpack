//
// Copyright 2018 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "@material/theme/custom-properties";
@use "./variables";

//
// Flips the radius values based on RTL context.
//
// Examples:
//
// 1. mdc-shape-flip-radius((0, 4px, 4px, 0)) => 4px 0 0 4px
// 2. mdc-shape-flip-radius((0, 8px)) => 8px 0
//
@function flip-radius($radius) {
  @if meta.type-of($radius) == 'list' {
    @if list.length($radius) > 4 {
      @error "Invalid radius: '#{$radius}' is more than 4 values";
    }
  }

  @if list.length($radius) == 4 {
    @return list.nth($radius, 2) list.nth($radius, 1) list.nth($radius, 4)
      list.nth($radius, 3);
  } @else if list.length($radius) == 3 {
    @return list.nth($radius, 2) list.nth($radius, 1) list.nth($radius, 2)
      list.nth($radius, 3);
  } @else if list.length($radius) == 2 {
    @return list.nth($radius, 2) list.nth($radius, 1);
  } @else {
    @return $radius;
  }
}

//
// @deprecated use `resolve-radius()` and provide $component-height.
//
// Resolves the percentage unit radius to appropriate absolute radius value based on component height.
// Use this for fixed height components only.
//
// Examples:
//
// mdc-shape-resolve-percentage-radius(36px, 50%) => `18px` (i.e., 36px / 2)
//
@function resolve-percentage-radius($component-height, $radius) {
  $radius: prop-value($radius);

  @if meta.type-of($radius) == 'list' {
    $radius-value: ();

    @each $corner in $radius {
      $radius-value: list.append(
        $radius-value,
        resolve-percentage-for-corner_($component-height, $corner)
      );
    }

    @return $radius-value;
  } @else {
    @return resolve-percentage-for-corner_($component-height, $radius);
  }
}

/// Returns the resolved radius value of a shape category - `large`, `medium`,
/// or `small`. If $radius is not a category, this function returns the value
/// itself if valid. Valid values are numbers or percentages.
///
/// If a percentage is provided, $component-height should be specified if the
/// width of the component does not match the height.
///
/// $radius may be a single value or a list of 1 to 4 values.
///
/// Examples:
///
/// shape.resolve-radius(small) => (varname: --mdc-shape-small, fallback: 4px)
/// shape.resolve-radius((varname: --custom-shape, fallback: small)) =>
///     (varname: --custom-shape, fallback: (varname: --mdc-shape-small, fallback: 4px))
/// shape.resolve-radius(8px) => 8px
/// shape.resolve-radius(50%, $component-height: 36px) => 16px
///
/// @param {String | Number | Map | List} $radius - the radius shape category or
///     radius value to resolve. May be a number, custom property Map, or a List
///     of those values.
/// @return {Number | Map | List} the resolved radius value. May be a number,
///     a custom property Map, or a List if $radius was a List.
@function resolve-radius($radius, $component-height: null) {
  @if meta.type-of($radius) == 'list' {
    // $radius is a List
    @if list.length($radius) > 4 or list.length($radius) < 1 {
      @error "mdc-shape: Invalid radius: #{$radius}. Radius must be between 1 and 4 values.";
    }

    $radii: ();
    @each $corner in $radius {
      $radii: list.append(
        $radii,
        resolve-radius($corner, $component-height: $component-height)
      );
    }

    @return $radii;
  }

  @if map.has-key(variables.$category-keywords, $radius) {
    // $radius is a category value
    @return resolve-radius(
      map.get(variables.$category-keywords, $radius),
      $component-height: $component-height
    );
  } @else if custom-properties.is-custom-prop($radius) {
    // $radius is a custom property Map
    $fallback: resolve-radius(
      custom-properties.get-fallback($radius, $shallow: true),
      $component-height: $component-height
    );
    @return custom-properties.set-fallback($radius, $fallback);
  } @else {
    // $radius is a value
    @if meta.type-of($radius) != 'number' {
      @error "mdc-shape: Invalid radius: #{$radius}. Must be a number.";
    }

    $radius-unit: math.unit($radius);
    $component-height-type: meta.type-of($component-height);
    @if $radius-unit == '%' and $component-height-type == 'number' {
      $radius: _resolve-radius-percentage($radius, $component-height);
    }

    @return $radius;
  }
}

//
// @deprecated use `resolve-radius()` for custom property support
//
// Returns $radius value of shape category - `large`, `medium` or `small`.
// Otherwise, it returns the $radius itself if valid.
// $radius can be a single value, or a list of up to 4 values.
//
// Examples:
//
// mdc-shape-prop-value(small) => 4px
// mdc-shape-prop-value(small small 0 0) => 4px 4px 0 0
//
@function prop-value($radius) {
  @if meta.type-of($radius) == 'list' {
    @if list.length($radius) > 4 {
      @error "Invalid radius: '#{$radius}' is more than 4 values";
    }

    $radius-values: ();

    @for $i from 1 through list.length($radius) {
      $corner: list.nth($radius, $i);

      @if map.has-key(variables.$category-keywords, $corner) {
        // If a category is encountered within a list of radii, apply the category's value for the corresponding corner
        $category-value: custom-properties.get-fallback(
          map.get(variables.$category-keywords, $corner)
        );
        $radius-values: list.append(
          $radius-values,
          list.nth(unpack-radius($category-value), $i)
        );
      } @else {
        $radius-values: list.append(
          $radius-values,
          validate-radius-value_($corner)
        );
      }
    }

    @return $radius-values;
  } @else {
    @if map.has-key(variables.$category-keywords, $radius) {
      @return custom-properties.get-fallback(
        map.get(variables.$category-keywords, $radius)
      );
    } @else {
      @return validate-radius-value_($radius);
    }
  }
}

//
// Accepts radius number or list of 2-4 radius values and returns 4 value list with
// masked corners as mentioned in `$masked-corners`
//
// Example:
//
// 1. mdc-shape-mask-radius(2px 3px, 1 1 0 0) => 2px 3px 0 0
// 2. mdc-shape-mask-radius(8px, 0 0 1 1) => 0 0 8px 8px
// 3. mdc-shape-mask-radius(4px 4px 4px 4px, 0 1 1 0) => 0 4px 4px 0
//
@function mask-radius($radius, $masked-corners) {
  @if meta.type-of($radius) == 'list' {
    @if list.length($radius) > 4 {
      @error "Invalid radius: '#{$radius}' is more than 4 values";
    }
  }

  @if list.length($masked-corners) != 4 {
    @error "Expected masked-corners of length 4 but got '#{list.length($masked-corners)}'.";
  }

  $radius: unpack-radius($radius);

  @return if(list.nth($masked-corners, 1) == 1, list.nth($radius, 1), 0)
    if(list.nth($masked-corners, 2) == 1, list.nth($radius, 2), 0)
    if(list.nth($masked-corners, 3) == 1, list.nth($radius, 3), 0)
    if(list.nth($masked-corners, 4) == 1, list.nth($radius, 4), 0);
}

/// Unpacks shorthand values for border-radius (i.e. lists of 1-3 values).
/// If a list of 4 values is given, it is returned as-is.
///
/// Examples:
///
/// shape.unpack-radius(4px) => 4px 4px 4px 4px
/// shape.unpack-radius(4px 2px) => 4px 2px 4px 2px
/// shape.unpack-radius(4px 2px 2px) => 4px 2px 2px 2px
/// shape.unpack-radius(4px 2px 0 2px) => 4px 2px 0 2px
///
/// @param {Number | Map | List} $radius - List of 1 to 4 radius numbers.
/// @return {List} a List of 4 radius numbers.
@function unpack-radius($radius) {
  @if meta.type-of($radius) == 'map' or list.length($radius) == 1 {
    @return $radius $radius $radius $radius;
  } @else if list.length($radius) == 4 {
    @return $radius;
  } @else if list.length($radius) == 3 {
    @return list.nth($radius, 1) list.nth($radius, 2) list.nth($radius, 3)
      list.nth($radius, 2);
  } @else if list.length($radius) == 2 {
    @return list.nth($radius, 1) list.nth($radius, 2) list.nth($radius, 1)
      list.nth($radius, 2);
  }

  @error "Invalid radius: '#{$radius}' is more than 4 values";
}

/// Resolve a percentage radius into a number.
///
/// @param {Number} $percentage - the radius percentage.
/// @param {Number} $component-height - the height of the component.
/// @return {Number} the resolved radius as a number.
@function _resolve-radius-percentage($percentage, $component-height) {
  // Converts the percentage to number without unit. Example: 50% => 50.
  $percentage: $percentage / ($percentage * 0 + 1);
  @return $component-height * ($percentage / 100);
}

// @deprecated use `_resolve-radius-percentage()` directly
@function resolve-percentage-for-corner_($component-height, $radius) {
  @if meta.type-of($radius) == 'number' and math.unit($radius) == '%' {
    @return _resolve-radius-percentage($radius, $component-height);
  } @else {
    @return $radius;
  }
}

/// @deprecated
@function validate-radius-value_($radius) {
  $is-number: meta.type-of($radius) == 'number';

  @if not(
    $is-number or str_index($radius, 'var(') or str_index($radius, 'calc(')
  )
  {
    @error "Invalid radius: #{$radius}";
  }

  @return $radius;
}
