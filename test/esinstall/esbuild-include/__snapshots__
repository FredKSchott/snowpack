// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snowpack install esbuild-include: allFiles 1`] = `
Array [
  "import-map.json",
  "node_modules/array-flatten/dist.es2015/index.js",
  "node_modules/deepmerge/dist/cjs.js",
  "node_modules/http-vue-loader/src/httpVueLoader.js",
  "node_modules/vue/dist/vue.esm.browser.js",
  "test/esinstall/esbuild-include/node_modules/svelte/index.js",
  "test/esinstall/esbuild-include/node_modules/vue-router/dist/vue-router.esm.js",
]
`;

exports[`snowpack install esbuild-include: cli output 1`] = `
"[snowpack] installing dependencies...
[snowpack] ✔ install complete!
[snowpack]
  ⦿ web_modules/                                                                      size       gzip       brotli
    ├─ node_modules/array-flatten/dist.es2015/index.js    XXXX KB    XXXX KB       NaN KB
    ├─ node_modules/deepmerge/dist/cjs.js    XXXX KB    XXXX KB       NaN KB
    ├─ node_modules/http-vue-loader/src/httpVueLoader.js    XXXX KB    XXXX KB       NaN KB
    ├─ node_modules/vue/dist/vue.esm.browser.js    XXXX KB    XXXX KB       NaN KB
    ├─ test/esinstall/esbuild-include/node_modules/svelte/index.js    XXXX KB    XXXX KB       NaN KB
    └─ test/esinstall/esbuild-include/node_modules/vue-router/dist/vue-router.esm.js    XXXX KB    XXXX KB       NaN KB
  ⦿ web_modules/common/ (Shared)
    └─ chunk.Y7FREAVH.js    XXXX KB    XXXX KB       NaN KB"
`;

exports[`snowpack install esbuild-include: web_modules/import-map.json 1`] = `
"{
  \\"imports\\": {
    \\"array-flatten\\": \\"./node_modules/array-flatten/dist.es2015/index.js\\",
    \\"deepmerge\\": \\"./node_modules/deepmerge/dist/cjs.js\\",
    \\"http-vue-loader/src/httpVueLoader.js\\": \\"./node_modules/http-vue-loader/src/httpVueLoader.js\\",
    \\"svelte\\": \\"./test/esinstall/esbuild-include/node_modules/svelte/index.js\\",
    \\"vue-router\\": \\"./test/esinstall/esbuild-include/node_modules/vue-router/dist/vue-router.esm.js\\",
    \\"vue/dist/vue.esm.browser.js\\": \\"./node_modules/vue/dist/vue.esm.browser.js\\"
  }
}"
`;

exports[`snowpack install esbuild-include: web_modules/node_modules/array-flatten/dist.es2015/index.js 1`] = `
"// ../../../node_modules/array-flatten/dist.es2015/index.js
function flatten(array) {
  var result = [];
  $flatten(array, result);
  return result;
}
function $flatten(array, result) {
  for (var i = 0; i < array.length; i++) {
    var value = array[i];
    if (Array.isArray(value)) {
      $flatten(value, result);
    } else {
      result.push(value);
    }
  }
}
export {
  flatten
};"
`;

exports[`snowpack install esbuild-include: web_modules/node_modules/deepmerge/dist/cjs.js 1`] = `
"import {
  __commonJS
} from \\"../../../chunk.Y7FREAVH.js\\";
// ../../../node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS((exports, module) => {
  \\"use strict\\";
  var isMergeableObject = function isMergeableObject2(value) {
    return isNonNullObject(value) && !isSpecial(value);
  };
  function isNonNullObject(value) {
    return !!value && typeof value === \\"object\\";
  }
  function isSpecial(value) {
    var stringValue = Object.prototype.toString.call(value);
    return stringValue === \\"[object RegExp]\\" || stringValue === \\"[object Date]\\" || isReactElement(value);
  }
  var canUseSymbol = typeof Symbol === \\"function\\" && Symbol.for;
  var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for(\\"react.element\\") : 60103;
  function isReactElement(value) {
    return value.$$typeof === REACT_ELEMENT_TYPE;
  }
  function emptyTarget(val) {
    return Array.isArray(val) ? [] : {};
  }
  function cloneUnlessOtherwiseSpecified(value, options) {
    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
  }
  function defaultArrayMerge(target, source, options) {
    return target.concat(source).map(function(element) {
      return cloneUnlessOtherwiseSpecified(element, options);
    });
  }
  function getMergeFunction(key, options) {
    if (!options.customMerge) {
      return deepmerge;
    }
    var customMerge = options.customMerge(key);
    return typeof customMerge === \\"function\\" ? customMerge : deepmerge;
  }
  function getEnumerableOwnPropertySymbols(target) {
    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
      return target.propertyIsEnumerable(symbol);
    }) : [];
  }
  function getKeys(target) {
    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
  }
  function propertyIsOnObject(object, property) {
    try {
      return property in object;
    } catch (_) {
      return false;
    }
  }
  function propertyIsUnsafe(target, key) {
    return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
  }
  function mergeObject(target, source, options) {
    var destination = {};
    if (options.isMergeableObject(target)) {
      getKeys(target).forEach(function(key) {
        destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
      });
    }
    getKeys(source).forEach(function(key) {
      if (propertyIsUnsafe(target, key)) {
        return;
      }
      if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
        destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
      } else {
        destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
      }
    });
    return destination;
  }
  function deepmerge(target, source, options) {
    options = options || {};
    options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
    var sourceIsArray = Array.isArray(source);
    var targetIsArray = Array.isArray(target);
    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
    if (!sourceAndTargetTypesMatch) {
      return cloneUnlessOtherwiseSpecified(source, options);
    } else if (sourceIsArray) {
      return options.arrayMerge(target, source, options);
    } else {
      return mergeObject(target, source, options);
    }
  }
  deepmerge.all = function deepmergeAll(array, options) {
    if (!Array.isArray(array)) {
      throw new Error(\\"first argument should be an array\\");
    }
    return array.reduce(function(prev, next) {
      return deepmerge(prev, next, options);
    }, {});
  };
  var deepmerge_1 = deepmerge;
  module.exports = deepmerge_1;
});
export default require_cjs();"
`;

exports[`snowpack install esbuild-include: web_modules/node_modules/http-vue-loader/src/httpVueLoader.js 1`] = `
"import {
  __commonJS
} from \\"../../../chunk.Y7FREAVH.js\\";
// ../../../node_modules/http-vue-loader/src/httpVueLoader.js
var require_httpVueLoader = __commonJS((exports, module) => {
  (function umd(root, factory) {
    if (typeof module === \\"object\\" && typeof exports === \\"object\\")
      module.exports = factory();
    else if (typeof define === \\"function\\" && define.amd)
      define([], factory);
    else
      root.httpVueLoader = factory();
  })(exports, function factory() {
    \\"use strict\\";
    var scopeIndex = 0;
    StyleContext.prototype = {
      withBase: function(callback) {
        var tmpBaseElt;
        if (this.component.baseURI) {
          tmpBaseElt = document.createElement(\\"base\\");
          tmpBaseElt.href = this.component.baseURI;
          var headElt = this.component.getHead();
          headElt.insertBefore(tmpBaseElt, headElt.firstChild);
        }
        callback.call(this);
        if (tmpBaseElt)
          this.component.getHead().removeChild(tmpBaseElt);
      },
      scopeStyles: function(styleElt, scopeName) {
        function process() {
          var sheet = styleElt.sheet;
          var rules = sheet.cssRules;
          for (var i = 0; i < rules.length; ++i) {
            var rule = rules[i];
            if (rule.type !== 1)
              continue;
            var scopedSelectors = [];
            rule.selectorText.split(/\\\\s*,\\\\s*/).forEach(function(sel) {
              scopedSelectors.push(scopeName + \\" \\" + sel);
              var segments = sel.match(/([^ :]+)(.+)?/);
              scopedSelectors.push(segments[1] + scopeName + (segments[2] || \\"\\"));
            });
            var scopedRule = scopedSelectors.join(\\",\\") + rule.cssText.substr(rule.selectorText.length);
            sheet.deleteRule(i);
            sheet.insertRule(scopedRule, i);
          }
        }
        try {
          process();
        } catch (ex) {
          if (ex instanceof DOMException && ex.code === DOMException.INVALID_ACCESS_ERR) {
            styleElt.sheet.disabled = true;
            styleElt.addEventListener(\\"load\\", function onStyleLoaded() {
              styleElt.removeEventListener(\\"load\\", onStyleLoaded);
              setTimeout(function() {
                process();
                styleElt.sheet.disabled = false;
              });
            });
            return;
          }
          throw ex;
        }
      },
      compile: function() {
        var hasTemplate = this.template !== null;
        var scoped = this.elt.hasAttribute(\\"scoped\\");
        if (scoped) {
          if (!hasTemplate)
            return;
          this.elt.removeAttribute(\\"scoped\\");
        }
        this.withBase(function() {
          this.component.getHead().appendChild(this.elt);
        });
        if (scoped)
          this.scopeStyles(this.elt, \\"[\\" + this.component.getScopeId() + \\"]\\");
        return Promise.resolve();
      },
      getContent: function() {
        return this.elt.textContent;
      },
      setContent: function(content) {
        this.withBase(function() {
          this.elt.textContent = content;
        });
      }
    };
    function StyleContext(component, elt) {
      this.component = component;
      this.elt = elt;
    }
    ScriptContext.prototype = {
      getContent: function() {
        return this.elt.textContent;
      },
      setContent: function(content) {
        this.elt.textContent = content;
      },
      compile: function(module2) {
        var childModuleRequire = function(childURL) {
          return httpVueLoader.require(resolveURL(this.component.baseURI, childURL));
        }.bind(this);
        var childLoader = function(childURL, childName) {
          return httpVueLoader(resolveURL(this.component.baseURI, childURL), childName);
        }.bind(this);
        try {
          Function(\\"exports\\", \\"require\\", \\"httpVueLoader\\", \\"module\\", this.getContent()).call(this.module.exports, this.module.exports, childModuleRequire, childLoader, this.module);
        } catch (ex) {
          if (!(\\"lineNumber\\" in ex)) {
            return Promise.reject(ex);
          }
          var vueFileData = responseText.replace(/\\\\r?/g, \\"\\");
          var lineNumber = vueFileData.substr(0, vueFileData.indexOf(script)).split(\\"\\").length + ex.lineNumber - 1;
          throw new ex.constructor(ex.message, url, lineNumber);
        }
        return Promise.resolve(this.module.exports).then(httpVueLoader.scriptExportsHandler.bind(this)).then(function(exports2) {
          this.module.exports = exports2;
        }.bind(this));
      }
    };
    function ScriptContext(component, elt) {
      this.component = component;
      this.elt = elt;
      this.module = {exports: {}};
    }
    TemplateContext.prototype = {
      getContent: function() {
        return this.elt.innerHTML;
      },
      setContent: function(content) {
        this.elt.innerHTML = content;
      },
      getRootElt: function() {
        var tplElt = this.elt.content || this.elt;
        if (\\"firstElementChild\\" in tplElt)
          return tplElt.firstElementChild;
        for (tplElt = tplElt.firstChild; tplElt !== null; tplElt = tplElt.nextSibling)
          if (tplElt.nodeType === Node.ELEMENT_NODE)
            return tplElt;
        return null;
      },
      compile: function() {
        return Promise.resolve();
      }
    };
    function TemplateContext(component, elt) {
      this.component = component;
      this.elt = elt;
    }
    Component.prototype = {
      getHead: function() {
        return document.head || document.getElementsByTagName(\\"head\\")[0];
      },
      getScopeId: function() {
        if (this._scopeId === \\"\\") {
          this._scopeId = \\"data-s-\\" + (scopeIndex++).toString(36);
          this.template.getRootElt().setAttribute(this._scopeId, \\"\\");
        }
        return this._scopeId;
      },
      load: function(componentURL) {
        return httpVueLoader.httpRequest(componentURL).then(function(responseText2) {
          this.baseURI = componentURL.substr(0, componentURL.lastIndexOf(\\"/\\") + 1);
          var doc = document.implementation.createHTMLDocument(\\"\\");
          doc.body.innerHTML = (this.baseURI ? '<base href=\\"' + this.baseURI + '\\">' : \\"\\") + responseText2;
          for (var it = doc.body.firstChild; it; it = it.nextSibling) {
            switch (it.nodeName) {
              case \\"TEMPLATE\\":
                this.template = new TemplateContext(this, it);
                break;
              case \\"SCRIPT\\":
                this.script = new ScriptContext(this, it);
                break;
              case \\"STYLE\\":
                this.styles.push(new StyleContext(this, it));
                break;
            }
          }
          return this;
        }.bind(this));
      },
      _normalizeSection: function(eltCx) {
        var p;
        if (eltCx === null || !eltCx.elt.hasAttribute(\\"src\\")) {
          p = Promise.resolve(null);
        } else {
          p = httpVueLoader.httpRequest(eltCx.elt.getAttribute(\\"src\\")).then(function(content) {
            eltCx.elt.removeAttribute(\\"src\\");
            return content;
          });
        }
        return p.then(function(content) {
          if (eltCx !== null && eltCx.elt.hasAttribute(\\"lang\\")) {
            var lang = eltCx.elt.getAttribute(\\"lang\\");
            eltCx.elt.removeAttribute(\\"lang\\");
            return httpVueLoader.langProcessor[lang.toLowerCase()].call(this, content === null ? eltCx.getContent() : content);
          }
          return content;
        }.bind(this)).then(function(content) {
          if (content !== null)
            eltCx.setContent(content);
        });
      },
      normalize: function() {
        return Promise.all(Array.prototype.concat(this._normalizeSection(this.template), this._normalizeSection(this.script), this.styles.map(this._normalizeSection))).then(function() {
          return this;
        }.bind(this));
      },
      compile: function() {
        return Promise.all(Array.prototype.concat(this.template && this.template.compile(), this.script && this.script.compile(), this.styles.map(function(style) {
          return style.compile();
        }))).then(function() {
          return this;
        }.bind(this));
      }
    };
    function Component(name) {
      this.name = name;
      this.template = null;
      this.script = null;
      this.styles = [];
      this._scopeId = \\"\\";
    }
    function identity(value) {
      return value;
    }
    function parseComponentURL(url2) {
      var comp = url2.match(/(.*?)([^/]+?)\\\\/?(\\\\.vue)?(\\\\?.*|#.*|$)/);
      return {
        name: comp[2],
        url: comp[1] + comp[2] + (comp[3] === void 0 ? \\"/index.vue\\" : comp[3]) + comp[4]
      };
    }
    function resolveURL(baseURL, url2) {
      if (url2.substr(0, 2) === \\"./\\" || url2.substr(0, 3) === \\"../\\") {
        return baseURL + url2;
      }
      return url2;
    }
    httpVueLoader.load = function(url2, name) {
      return function() {
        return new Component(name).load(url2).then(function(component) {
          return component.normalize();
        }).then(function(component) {
          return component.compile();
        }).then(function(component) {
          var exports2 = component.script !== null ? component.script.module.exports : {};
          if (component.template !== null)
            exports2.template = component.template.getContent();
          if (exports2.name === void 0) {
            if (component.name !== void 0)
              exports2.name = component.name;
          }
          exports2._baseURI = component.baseURI;
          return exports2;
        });
      };
    };
    httpVueLoader.register = function(Vue, url2) {
      var comp = parseComponentURL(url2);
      Vue.component(comp.name, httpVueLoader.load(comp.url));
    };
    httpVueLoader.install = function(Vue) {
      Vue.mixin({
        beforeCreate: function() {
          var components = this.$options.components;
          for (var componentName in components) {
            if (typeof components[componentName] === \\"string\\" && components[componentName].substr(0, 4) === \\"url:\\") {
              var comp = parseComponentURL(components[componentName].substr(4));
              var componentURL = \\"_baseURI\\" in this.$options ? resolveURL(this.$options._baseURI, comp.url) : comp.url;
              if (isNaN(componentName))
                components[componentName] = httpVueLoader.load(componentURL, componentName);
              else
                components[componentName] = Vue.component(comp.name, httpVueLoader.load(componentURL, comp.name));
            }
          }
        }
      });
    };
    httpVueLoader.require = function(moduleName) {
      return window[moduleName];
    };
    httpVueLoader.httpRequest = function(url2) {
      return new Promise(function(resolve, reject) {
        var xhr = new XMLHttpRequest();
        xhr.open(\\"GET\\", url2);
        xhr.responseType = \\"text\\";
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4) {
            if (xhr.status >= 200 && xhr.status < 300)
              resolve(xhr.responseText);
            else
              reject(xhr.status);
          }
        };
        xhr.send(null);
      });
    };
    httpVueLoader.langProcessor = {
      html: identity,
      js: identity,
      css: identity
    };
    httpVueLoader.scriptExportsHandler = identity;
    function httpVueLoader(url2, name) {
      var comp = parseComponentURL(url2);
      return httpVueLoader.load(comp.url, name);
    }
    return httpVueLoader;
  });
});
export default require_httpVueLoader();"
`;

exports[`snowpack install esbuild-include: web_modules/node_modules/vue/dist/vue.esm.browser.js 1`] = `
"// ../../../node_modules/vue/dist/vue.esm.browser.js
/*!
 * Vue.js v2.6.12
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */
const emptyObject = Object.freeze({});
function isUndef(v) {
  return v === void 0 || v === null;
}
function isDef(v) {
  return v !== void 0 && v !== null;
}
function isTrue(v) {
  return v === true;
}
function isFalse(v) {
  return v === false;
}
function isPrimitive(value) {
  return typeof value === \\"string\\" || typeof value === \\"number\\" || typeof value === \\"symbol\\" || typeof value === \\"boolean\\";
}
function isObject(obj) {
  return obj !== null && typeof obj === \\"object\\";
}
const _toString = Object.prototype.toString;
function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
function isPlainObject(obj) {
  return _toString.call(obj) === \\"[object Object]\\";
}
function isRegExp(v) {
  return _toString.call(v) === \\"[object RegExp]\\";
}
function isValidArrayIndex(val) {
  const n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}
function isPromise(val) {
  return isDef(val) && typeof val.then === \\"function\\" && typeof val.catch === \\"function\\";
}
function toString(val) {
  return val == null ? \\"\\" : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
function toNumber(val) {
  const n = parseFloat(val);
  return isNaN(n) ? val : n;
}
function makeMap(str2, expectsLowerCase) {
  const map = Object.create(null);
  const list = str2.split(\\",\\");
  for (let i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase ? (val) => map[val.toLowerCase()] : (val) => map[val];
}
const isBuiltInTag = makeMap(\\"slot,component\\", true);
const isReservedAttribute = makeMap(\\"key,ref,slot,slot-scope,is\\");
function remove(arr, item) {
  if (arr.length) {
    const index2 = arr.indexOf(item);
    if (index2 > -1) {
      return arr.splice(index2, 1);
    }
  }
}
const hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
function cached(fn) {
  const cache = Object.create(null);
  return function cachedFn(str2) {
    const hit = cache[str2];
    return hit || (cache[str2] = fn(str2));
  };
}
const camelizeRE = /-(\\\\w)/g;
const camelize = cached((str2) => {
  return str2.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : \\"\\");
});
const capitalize = cached((str2) => {
  return str2.charAt(0).toUpperCase() + str2.slice(1);
});
const hyphenateRE = /\\\\B([A-Z])/g;
const hyphenate = cached((str2) => {
  return str2.replace(hyphenateRE, \\"-$1\\").toLowerCase();
});
function polyfillBind(fn, ctx) {
  function boundFn(a) {
    const l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }
  boundFn._length = fn.length;
  return boundFn;
}
function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}
const bind = Function.prototype.bind ? nativeBind : polyfillBind;
function toArray(list, start) {
  start = start || 0;
  let i = list.length - start;
  const ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret;
}
function extend(to, _from) {
  for (const key in _from) {
    to[key] = _from[key];
  }
  return to;
}
function toObject(arr) {
  const res = {};
  for (let i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}
function noop(a, b, c) {
}
const no = (a, b, c) => false;
const identity = (_) => _;
function genStaticKeys(modules2) {
  return modules2.reduce((keys, m) => {
    return keys.concat(m.staticKeys || []);
  }, []).join(\\",\\");
}
function looseEqual(a, b) {
  if (a === b)
    return true;
  const isObjectA = isObject(a);
  const isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      const isArrayA = Array.isArray(a);
      const isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every((e, i) => {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        const keysA = Object.keys(a);
        const keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every((key) => {
          return looseEqual(a[key], b[key]);
        });
      } else {
        return false;
      }
    } catch (e) {
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
function looseIndexOf(arr, val) {
  for (let i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val))
      return i;
  }
  return -1;
}
function once(fn) {
  let called = false;
  return function() {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}
const SSR_ATTR = \\"data-server-rendered\\";
const ASSET_TYPES = [
  \\"component\\",
  \\"directive\\",
  \\"filter\\"
];
const LIFECYCLE_HOOKS = [
  \\"beforeCreate\\",
  \\"created\\",
  \\"beforeMount\\",
  \\"mounted\\",
  \\"beforeUpdate\\",
  \\"updated\\",
  \\"beforeDestroy\\",
  \\"destroyed\\",
  \\"activated\\",
  \\"deactivated\\",
  \\"errorCaptured\\",
  \\"serverPrefetch\\"
];
var config = {
  optionMergeStrategies: Object.create(null),
  silent: false,
  productionTip: true,
  devtools: true,
  performance: false,
  errorHandler: null,
  warnHandler: null,
  ignoredElements: [],
  keyCodes: Object.create(null),
  isReservedTag: no,
  isReservedAttr: no,
  isUnknownElement: no,
  getTagNamespace: noop,
  parsePlatformTagName: identity,
  mustUseProp: no,
  async: true,
  _lifecycleHooks: LIFECYCLE_HOOKS
};
const unicodeRegExp = /a-zA-Z\\\\u00B7\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u203F-\\\\u2040\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD/;
function isReserved(str2) {
  const c = (str2 + \\"\\").charCodeAt(0);
  return c === 36 || c === 95;
}
function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
const bailRE = new RegExp(\`[^\${unicodeRegExp.source}.$_\\\\\\\\d]\`);
function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }
  const segments = path.split(\\".\\");
  return function(obj) {
    for (let i = 0; i < segments.length; i++) {
      if (!obj)
        return;
      obj = obj[segments[i]];
    }
    return obj;
  };
}
const hasProto = \\"__proto__\\" in {};
const inBrowser = typeof window !== \\"undefined\\";
const inWeex = typeof WXEnvironment !== \\"undefined\\" && !!WXEnvironment.platform;
const weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
const UA = inBrowser && window.navigator.userAgent.toLowerCase();
const isIE = UA && /msie|trident/.test(UA);
const isIE9 = UA && UA.indexOf(\\"msie 9.0\\") > 0;
const isEdge = UA && UA.indexOf(\\"edge/\\") > 0;
const isAndroid = UA && UA.indexOf(\\"android\\") > 0 || weexPlatform === \\"android\\";
const isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === \\"ios\\";
const isChrome = UA && /chrome\\\\/\\\\d+/.test(UA) && !isEdge;
const isPhantomJS = UA && /phantomjs/.test(UA);
const isFF = UA && UA.match(/firefox\\\\/(\\\\d+)/);
const nativeWatch = {}.watch;
let supportsPassive = false;
if (inBrowser) {
  try {
    const opts = {};
    Object.defineProperty(opts, \\"passive\\", {
      get() {
        supportsPassive = true;
      }
    });
    window.addEventListener(\\"test-passive\\", null, opts);
  } catch (e) {
  }
}
let _isServer;
const isServerRendering = () => {
  if (_isServer === void 0) {
    if (!inBrowser && !inWeex && typeof window !== \\"undefined\\") {
      _isServer = window[\\"process\\"] && window[\\"process\\"].env.VUE_ENV === \\"server\\";
    } else {
      _isServer = false;
    }
  }
  return _isServer;
};
const devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
function isNative(Ctor) {
  return typeof Ctor === \\"function\\" && /native code/.test(Ctor.toString());
}
const hasSymbol = typeof Symbol !== \\"undefined\\" && isNative(Symbol) && typeof Reflect !== \\"undefined\\" && isNative(Reflect.ownKeys);
let _Set;
if (typeof Set !== \\"undefined\\" && isNative(Set)) {
  _Set = Set;
} else {
  _Set = class Set2 {
    constructor() {
      this.set = Object.create(null);
    }
    has(key) {
      return this.set[key] === true;
    }
    add(key) {
      this.set[key] = true;
    }
    clear() {
      this.set = Object.create(null);
    }
  };
}
let warn = noop;
let tip = noop;
let generateComponentTrace = noop;
let formatComponentName = noop;
{
  const hasConsole = typeof console !== \\"undefined\\";
  const classifyRE = /(?:^|[-_])(\\\\w)/g;
  const classify = (str2) => str2.replace(classifyRE, (c) => c.toUpperCase()).replace(/[-_]/g, \\"\\");
  warn = (msg, vm) => {
    const trace = vm ? generateComponentTrace(vm) : \\"\\";
    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error(\`[Vue warn]: \${msg}\${trace}\`);
    }
  };
  tip = (msg, vm) => {
    if (hasConsole && !config.silent) {
      console.warn(\`[Vue tip]: \${msg}\` + (vm ? generateComponentTrace(vm) : \\"\\"));
    }
  };
  formatComponentName = (vm, includeFile) => {
    if (vm.$root === vm) {
      return \\"<Root>\\";
    }
    const options = typeof vm === \\"function\\" && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
    let name = options.name || options._componentTag;
    const file = options.__file;
    if (!name && file) {
      const match = file.match(/([^/\\\\\\\\]+)\\\\.vue$/);
      name = match && match[1];
    }
    return (name ? \`<\${classify(name)}>\` : \`<Anonymous>\`) + (file && includeFile !== false ? \` at \${file}\` : \\"\\");
  };
  const repeat2 = (str2, n) => {
    let res = \\"\\";
    while (n) {
      if (n % 2 === 1)
        res += str2;
      if (n > 1)
        str2 += str2;
      n >>= 1;
    }
    return res;
  };
  generateComponentTrace = (vm) => {
    if (vm._isVue && vm.$parent) {
      const tree = [];
      let currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          const last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return \\"found in\\" + tree.map((vm2, i) => \`\${i === 0 ? \\"---> \\" : repeat2(\\" \\", 5 + i * 2)}\${Array.isArray(vm2) ? \`\${formatComponentName(vm2[0])}... (\${vm2[1]} recursive calls)\` : formatComponentName(vm2)}\`).join(\\"\\");
    } else {
      return \`
(found in \${formatComponentName(vm)})\`;
    }
  };
}
let uid = 0;
class Dep {
  constructor() {
    this.id = uid++;
    this.subs = [];
  }
  addSub(sub) {
    this.subs.push(sub);
  }
  removeSub(sub) {
    remove(this.subs, sub);
  }
  depend() {
    if (Dep.target) {
      Dep.target.addDep(this);
    }
  }
  notify() {
    const subs = this.subs.slice();
    if (!config.async) {
      subs.sort((a, b) => a.id - b.id);
    }
    for (let i = 0, l = subs.length; i < l; i++) {
      subs[i].update();
    }
  }
}
Dep.target = null;
const targetStack = [];
function pushTarget(target2) {
  targetStack.push(target2);
  Dep.target = target2;
}
function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
class VNode {
  constructor(tag, data, children, text2, elm, context, componentOptions, asyncFactory) {
    this.tag = tag;
    this.data = data;
    this.children = children;
    this.text = text2;
    this.elm = elm;
    this.ns = void 0;
    this.context = context;
    this.fnContext = void 0;
    this.fnOptions = void 0;
    this.fnScopeId = void 0;
    this.key = data && data.key;
    this.componentOptions = componentOptions;
    this.componentInstance = void 0;
    this.parent = void 0;
    this.raw = false;
    this.isStatic = false;
    this.isRootInsert = true;
    this.isComment = false;
    this.isCloned = false;
    this.isOnce = false;
    this.asyncFactory = asyncFactory;
    this.asyncMeta = void 0;
    this.isAsyncPlaceholder = false;
  }
  get child() {
    return this.componentInstance;
  }
}
const createEmptyVNode = (text2 = \\"\\") => {
  const node = new VNode();
  node.text = text2;
  node.isComment = true;
  return node;
};
function createTextVNode(val) {
  return new VNode(void 0, void 0, void 0, String(val));
}
function cloneVNode(vnode) {
  const cloned = new VNode(vnode.tag, vnode.data, vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
const arrayProto = Array.prototype;
const arrayMethods = Object.create(arrayProto);
const methodsToPatch = [
  \\"push\\",
  \\"pop\\",
  \\"shift\\",
  \\"unshift\\",
  \\"splice\\",
  \\"sort\\",
  \\"reverse\\"
];
methodsToPatch.forEach(function(method) {
  const original = arrayProto[method];
  def(arrayMethods, method, function mutator(...args) {
    const result = original.apply(this, args);
    const ob = this.__ob__;
    let inserted;
    switch (method) {
      case \\"push\\":
      case \\"unshift\\":
        inserted = args;
        break;
      case \\"splice\\":
        inserted = args.slice(2);
        break;
    }
    if (inserted)
      ob.observeArray(inserted);
    ob.dep.notify();
    return result;
  });
});
const arrayKeys = Object.getOwnPropertyNames(arrayMethods);
let shouldObserve = true;
function toggleObserving(value) {
  shouldObserve = value;
}
class Observer {
  constructor(value) {
    this.value = value;
    this.dep = new Dep();
    this.vmCount = 0;
    def(value, \\"__ob__\\", this);
    if (Array.isArray(value)) {
      if (hasProto) {
        protoAugment(value, arrayMethods);
      } else {
        copyAugment(value, arrayMethods, arrayKeys);
      }
      this.observeArray(value);
    } else {
      this.walk(value);
    }
  }
  walk(obj) {
    const keys = Object.keys(obj);
    for (let i = 0; i < keys.length; i++) {
      defineReactive$$1(obj, keys[i]);
    }
  }
  observeArray(items) {
    for (let i = 0, l = items.length; i < l; i++) {
      observe(items[i]);
    }
  }
}
function protoAugment(target2, src) {
  target2.__proto__ = src;
}
function copyAugment(target2, src, keys) {
  for (let i = 0, l = keys.length; i < l; i++) {
    const key = keys[i];
    def(target2, key, src[key]);
  }
}
function observe(value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return;
  }
  let ob;
  if (hasOwn(value, \\"__ob__\\") && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob;
}
function defineReactive$$1(obj, key, val, customSetter, shallow) {
  const dep = new Dep();
  const property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return;
  }
  const getter = property && property.get;
  const setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }
  let childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      const value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value;
    },
    set: function reactiveSetter(newVal) {
      const value = getter ? getter.call(obj) : val;
      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      if (customSetter) {
        customSetter();
      }
      if (getter && !setter)
        return;
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
function set(target2, key, val) {
  if (isUndef(target2) || isPrimitive(target2)) {
    warn(\`Cannot set reactive property on undefined, null, or primitive value: \${target2}\`);
  }
  if (Array.isArray(target2) && isValidArrayIndex(key)) {
    target2.length = Math.max(target2.length, key);
    target2.splice(key, 1, val);
    return val;
  }
  if (key in target2 && !(key in Object.prototype)) {
    target2[key] = val;
    return val;
  }
  const ob = target2.__ob__;
  if (target2._isVue || ob && ob.vmCount) {
    warn(\\"Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option.\\");
    return val;
  }
  if (!ob) {
    target2[key] = val;
    return val;
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
function del(target2, key) {
  if (isUndef(target2) || isPrimitive(target2)) {
    warn(\`Cannot delete reactive property on undefined, null, or primitive value: \${target2}\`);
  }
  if (Array.isArray(target2) && isValidArrayIndex(key)) {
    target2.splice(key, 1);
    return;
  }
  const ob = target2.__ob__;
  if (target2._isVue || ob && ob.vmCount) {
    warn(\\"Avoid deleting properties on a Vue instance or its root $data - just set it to null.\\");
    return;
  }
  if (!hasOwn(target2, key)) {
    return;
  }
  delete target2[key];
  if (!ob) {
    return;
  }
  ob.dep.notify();
}
function dependArray(value) {
  for (let e, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
const strats = config.optionMergeStrategies;
{
  strats.el = strats.propsData = function(parent, child, vm, key) {
    if (!vm) {
      warn(\`option \\"\${key}\\" can only be used during instance creation with the \\\\\`new\\\\\` keyword.\`);
    }
    return defaultStrat(parent, child);
  };
}
function mergeData(to, from) {
  if (!from)
    return to;
  let key, toVal, fromVal;
  const keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);
  for (let i = 0; i < keys.length; i++) {
    key = keys[i];
    if (key === \\"__ob__\\")
      continue;
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to;
}
function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    if (!childVal) {
      return parentVal;
    }
    if (!parentVal) {
      return childVal;
    }
    return function mergedDataFn() {
      return mergeData(typeof childVal === \\"function\\" ? childVal.call(this, this) : childVal, typeof parentVal === \\"function\\" ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      const instanceData = typeof childVal === \\"function\\" ? childVal.call(vm, vm) : childVal;
      const defaultData = typeof parentVal === \\"function\\" ? parentVal.call(vm, vm) : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}
strats.data = function(parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== \\"function\\") {
      warn('The \\"data\\" option should be a function that returns a per-instance value in component definitions.', vm);
      return parentVal;
    }
    return mergeDataOrFn(parentVal, childVal);
  }
  return mergeDataOrFn(parentVal, childVal, vm);
};
function mergeHook(parentVal, childVal) {
  const res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}
function dedupeHooks(hooks2) {
  const res = [];
  for (let i = 0; i < hooks2.length; i++) {
    if (res.indexOf(hooks2[i]) === -1) {
      res.push(hooks2[i]);
    }
  }
  return res;
}
LIFECYCLE_HOOKS.forEach((hook) => {
  strats[hook] = mergeHook;
});
function mergeAssets(parentVal, childVal, vm, key) {
  const res = Object.create(parentVal || null);
  if (childVal) {
    assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}
ASSET_TYPES.forEach(function(type) {
  strats[type + \\"s\\"] = mergeAssets;
});
strats.watch = function(parentVal, childVal, vm, key) {
  if (parentVal === nativeWatch)
    parentVal = void 0;
  if (childVal === nativeWatch)
    childVal = void 0;
  if (!childVal)
    return Object.create(parentVal || null);
  {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal)
    return childVal;
  const ret = {};
  extend(ret, parentVal);
  for (const key2 in childVal) {
    let parent = ret[key2];
    const child = childVal[key2];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key2] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }
  return ret;
};
strats.props = strats.methods = strats.inject = strats.computed = function(parentVal, childVal, vm, key) {
  if (childVal && true) {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal)
    return childVal;
  const ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal)
    extend(ret, childVal);
  return ret;
};
strats.provide = mergeDataOrFn;
const defaultStrat = function(parentVal, childVal) {
  return childVal === void 0 ? parentVal : childVal;
};
function checkComponents(options) {
  for (const key in options.components) {
    validateComponentName(key);
  }
}
function validateComponentName(name) {
  if (!new RegExp(\`^[a-zA-Z][\\\\\\\\-\\\\\\\\.0-9_\${unicodeRegExp.source}]*$\`).test(name)) {
    warn('Invalid component name: \\"' + name + '\\". Component names should conform to valid custom element name in html5 specification.');
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(\\"Do not use built-in or reserved HTML elements as component id: \\" + name);
  }
}
function normalizeProps(options, vm) {
  const props2 = options.props;
  if (!props2)
    return;
  const res = {};
  let i, val, name;
  if (Array.isArray(props2)) {
    i = props2.length;
    while (i--) {
      val = props2[i];
      if (typeof val === \\"string\\") {
        name = camelize(val);
        res[name] = {type: null};
      } else {
        warn(\\"props must be strings when using array syntax.\\");
      }
    }
  } else if (isPlainObject(props2)) {
    for (const key in props2) {
      val = props2[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {type: val};
    }
  } else {
    warn(\`Invalid value for option \\"props\\": expected an Array or an Object, but got \${toRawType(props2)}.\`, vm);
  }
  options.props = res;
}
function normalizeInject(options, vm) {
  const inject = options.inject;
  if (!inject)
    return;
  const normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (let i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {from: inject[i]};
    }
  } else if (isPlainObject(inject)) {
    for (const key in inject) {
      const val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({from: key}, val) : {from: val};
    }
  } else {
    warn(\`Invalid value for option \\"inject\\": expected an Array or an Object, but got \${toRawType(inject)}.\`, vm);
  }
}
function normalizeDirectives(options) {
  const dirs = options.directives;
  if (dirs) {
    for (const key in dirs) {
      const def$$1 = dirs[key];
      if (typeof def$$1 === \\"function\\") {
        dirs[key] = {bind: def$$1, update: def$$1};
      }
    }
  }
}
function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn(\`Invalid value for option \\"\${name}\\": expected an Object, but got \${toRawType(value)}.\`, vm);
  }
}
function mergeOptions(parent, child, vm) {
  {
    checkComponents(child);
  }
  if (typeof child === \\"function\\") {
    child = child.options;
  }
  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (let i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }
  const options = {};
  let key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField(key2) {
    const strat = strats[key2] || defaultStrat;
    options[key2] = strat(parent[key2], child[key2], vm, key2);
  }
  return options;
}
function resolveAsset(options, type, id, warnMissing) {
  if (typeof id !== \\"string\\") {
    return;
  }
  const assets = options[type];
  if (hasOwn(assets, id))
    return assets[id];
  const camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId))
    return assets[camelizedId];
  const PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId))
    return assets[PascalCaseId];
  const res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (warnMissing && !res) {
    warn(\\"Failed to resolve \\" + type.slice(0, -1) + \\": \\" + id, options);
  }
  return res;
}
function validateProp(key, propOptions, propsData, vm) {
  const prop = propOptions[key];
  const absent = !hasOwn(propsData, key);
  let value = propsData[key];
  const booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, \\"default\\")) {
      value = false;
    } else if (value === \\"\\" || value === hyphenate(key)) {
      const stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  if (value === void 0) {
    value = getPropDefaultValue(vm, prop, key);
    const prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  {
    assertProp(prop, key, value, vm, absent);
  }
  return value;
}
function getPropDefaultValue(vm, prop, key) {
  if (!hasOwn(prop, \\"default\\")) {
    return void 0;
  }
  const def2 = prop.default;
  if (isObject(def2)) {
    warn('Invalid default value for prop \\"' + key + '\\": Props with type Object/Array must use a factory function to return the default value.', vm);
  }
  if (vm && vm.$options.propsData && vm.$options.propsData[key] === void 0 && vm._props[key] !== void 0) {
    return vm._props[key];
  }
  return typeof def2 === \\"function\\" && getType(prop.type) !== \\"Function\\" ? def2.call(vm) : def2;
}
function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: \\"' + name + '\\"', vm);
    return;
  }
  if (value == null && !prop.required) {
    return;
  }
  let type = prop.type;
  let valid = !type || type === true;
  const expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (let i = 0; i < type.length && !valid; i++) {
      const assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || \\"\\");
      valid = assertedType.valid;
    }
  }
  if (!valid) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }
  const validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop \\"' + name + '\\".', vm);
    }
  }
}
const simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;
function assertType(value, type) {
  let valid;
  const expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    const t = typeof value;
    valid = t === expectedType.toLowerCase();
    if (!valid && t === \\"object\\") {
      valid = value instanceof type;
    }
  } else if (expectedType === \\"Object\\") {
    valid = isPlainObject(value);
  } else if (expectedType === \\"Array\\") {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid,
    expectedType
  };
}
function getType(fn) {
  const match = fn && fn.toString().match(/^\\\\s*function (\\\\w+)/);
  return match ? match[1] : \\"\\";
}
function isSameType(a, b) {
  return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  for (let i = 0, len2 = expectedTypes.length; i < len2; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }
  return -1;
}
function getInvalidTypeMessage(name, value, expectedTypes) {
  let message = \`Invalid prop: type check failed for prop \\"\${name}\\". Expected \${expectedTypes.map(capitalize).join(\\", \\")}\`;
  const expectedType = expectedTypes[0];
  const receivedType = toRawType(value);
  const expectedValue = styleValue(value, expectedType);
  const receivedValue = styleValue(value, receivedType);
  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
    message += \` with value \${expectedValue}\`;
  }
  message += \`, got \${receivedType} \`;
  if (isExplicable(receivedType)) {
    message += \`with value \${receivedValue}.\`;
  }
  return message;
}
function styleValue(value, type) {
  if (type === \\"String\\") {
    return \`\\"\${value}\\"\`;
  } else if (type === \\"Number\\") {
    return \`\${Number(value)}\`;
  } else {
    return \`\${value}\`;
  }
}
function isExplicable(value) {
  const explicitTypes = [\\"string\\", \\"number\\", \\"boolean\\"];
  return explicitTypes.some((elem) => value.toLowerCase() === elem);
}
function isBoolean(...args) {
  return args.some((elem) => elem.toLowerCase() === \\"boolean\\");
}
function handleError(err, vm, info) {
  pushTarget();
  try {
    if (vm) {
      let cur = vm;
      while (cur = cur.$parent) {
        const hooks2 = cur.$options.errorCaptured;
        if (hooks2) {
          for (let i = 0; i < hooks2.length; i++) {
            try {
              const capture = hooks2[i].call(cur, err, vm, info) === false;
              if (capture)
                return;
            } catch (e) {
              globalHandleError(e, cur, \\"errorCaptured hook\\");
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}
function invokeWithErrorHandling(handler, context, args, vm, info) {
  let res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch((e) => handleError(e, vm, info + \` (Promise/async)\`));
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res;
}
function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      if (e !== err) {
        logError(e, null, \\"config.errorHandler\\");
      }
    }
  }
  logError(err, vm, info);
}
function logError(err, vm, info) {
  {
    warn(\`Error in \${info}: \\"\${err.toString()}\\"\`, vm);
  }
  if ((inBrowser || inWeex) && typeof console !== \\"undefined\\") {
    console.error(err);
  } else {
    throw err;
  }
}
let isUsingMicroTask = false;
const callbacks = [];
let pending = false;
function flushCallbacks() {
  pending = false;
  const copies = callbacks.slice(0);
  callbacks.length = 0;
  for (let i = 0; i < copies.length; i++) {
    copies[i]();
  }
}
let timerFunc;
if (typeof Promise !== \\"undefined\\" && isNative(Promise)) {
  const p = Promise.resolve();
  timerFunc = () => {
    p.then(flushCallbacks);
    if (isIOS)
      setTimeout(noop);
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== \\"undefined\\" && (isNative(MutationObserver) || MutationObserver.toString() === \\"[object MutationObserverConstructor]\\")) {
  let counter = 1;
  const observer = new MutationObserver(flushCallbacks);
  const textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = () => {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== \\"undefined\\" && isNative(setImmediate)) {
  timerFunc = () => {
    setImmediate(flushCallbacks);
  };
} else {
  timerFunc = () => {
    setTimeout(flushCallbacks, 0);
  };
}
function nextTick(cb, ctx) {
  let _resolve;
  callbacks.push(() => {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, \\"nextTick\\");
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  if (!cb && typeof Promise !== \\"undefined\\") {
    return new Promise((resolve) => {
      _resolve = resolve;
    });
  }
}
let mark;
let measure;
{
  const perf = inBrowser && window.performance;
  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = (tag) => perf.mark(tag);
    measure = (name, startTag, endTag2) => {
      perf.measure(name, startTag, endTag2);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag2);
    };
  }
}
let initProxy;
{
  const allowedGlobals = makeMap(\\"Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require\\");
  const warnNonPresent = (target2, key) => {
    warn(\`Property or method \\"\${key}\\" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.\`, target2);
  };
  const warnReservedPrefix = (target2, key) => {
    warn(\`Property \\"\${key}\\" must be accessed with \\"$data.\${key}\\" because properties starting with \\"$\\" or \\"_\\" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://vuejs.org/v2/api/#data\`, target2);
  };
  const hasProxy = typeof Proxy !== \\"undefined\\" && isNative(Proxy);
  if (hasProxy) {
    const isBuiltInModifier = makeMap(\\"stop,prevent,self,ctrl,shift,alt,meta,exact\\");
    config.keyCodes = new Proxy(config.keyCodes, {
      set(target2, key, value) {
        if (isBuiltInModifier(key)) {
          warn(\`Avoid overwriting built-in modifier in config.keyCodes: .\${key}\`);
          return false;
        } else {
          target2[key] = value;
          return true;
        }
      }
    });
  }
  const hasHandler = {
    has(target2, key) {
      const has2 = key in target2;
      const isAllowed = allowedGlobals(key) || typeof key === \\"string\\" && key.charAt(0) === \\"_\\" && !(key in target2.$data);
      if (!has2 && !isAllowed) {
        if (key in target2.$data)
          warnReservedPrefix(target2, key);
        else
          warnNonPresent(target2, key);
      }
      return has2 || !isAllowed;
    }
  };
  const getHandler = {
    get(target2, key) {
      if (typeof key === \\"string\\" && !(key in target2)) {
        if (key in target2.$data)
          warnReservedPrefix(target2, key);
        else
          warnNonPresent(target2, key);
      }
      return target2[key];
    }
  };
  initProxy = function initProxy2(vm) {
    if (hasProxy) {
      const options = vm.$options;
      const handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
const seenObjects = new _Set();
function traverse(val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}
function _traverse(val, seen) {
  let i, keys;
  const isA = Array.isArray(val);
  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }
  if (val.__ob__) {
    const depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return;
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--)
      _traverse(val[i], seen);
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--)
      _traverse(val[keys[i]], seen);
  }
}
const normalizeEvent = cached((name) => {
  const passive = name.charAt(0) === \\"&\\";
  name = passive ? name.slice(1) : name;
  const once$$1 = name.charAt(0) === \\"~\\";
  name = once$$1 ? name.slice(1) : name;
  const capture = name.charAt(0) === \\"!\\";
  name = capture ? name.slice(1) : name;
  return {
    name,
    once: once$$1,
    capture,
    passive
  };
});
function createFnInvoker(fns, vm) {
  function invoker() {
    const fns2 = invoker.fns;
    if (Array.isArray(fns2)) {
      const cloned = fns2.slice();
      for (let i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments, vm, \`v-on handler\`);
      }
    } else {
      return invokeWithErrorHandling(fns2, null, arguments, vm, \`v-on handler\`);
    }
  }
  invoker.fns = fns;
  return invoker;
}
function updateListeners(on2, oldOn, add2, remove$$1, createOnceHandler2, vm) {
  let name, def$$1, cur, old, event;
  for (name in on2) {
    def$$1 = cur = on2[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      warn(\`Invalid handler for event \\"\${event.name}\\": got \` + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on2[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on2[name] = createOnceHandler2(event.name, cur, event.capture);
      }
      add2(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on2[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on2[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}
function mergeVNodeHook(def2, hookKey, hook) {
  if (def2 instanceof VNode) {
    def2 = def2.data.hook || (def2.data.hook = {});
  }
  let invoker;
  const oldHook = def2[hookKey];
  function wrappedHook() {
    hook.apply(this, arguments);
    remove(invoker.fns, wrappedHook);
  }
  if (isUndef(oldHook)) {
    invoker = createFnInvoker([wrappedHook]);
  } else {
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }
  invoker.merged = true;
  def2[hookKey] = invoker;
}
function extractPropsFromVNodeData(data, Ctor, tag) {
  const propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return;
  }
  const res = {};
  const {attrs: attrs2, props: props2} = data;
  if (isDef(attrs2) || isDef(props2)) {
    for (const key in propOptions) {
      const altKey = hyphenate(key);
      {
        const keyInLowerCase = key.toLowerCase();
        if (key !== keyInLowerCase && attrs2 && hasOwn(attrs2, keyInLowerCase)) {
          tip(\`Prop \\"\${keyInLowerCase}\\" is passed to component \${formatComponentName(tag || Ctor)}, but the declared prop name is \\"\${key}\\". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use \\"\${altKey}\\" instead of \\"\${key}\\".\`);
        }
      }
      checkProp(res, props2, key, altKey, true) || checkProp(res, attrs2, key, altKey, false);
    }
  }
  return res;
}
function checkProp(res, hash2, key, altKey, preserve) {
  if (isDef(hash2)) {
    if (hasOwn(hash2, key)) {
      res[key] = hash2[key];
      if (!preserve) {
        delete hash2[key];
      }
      return true;
    } else if (hasOwn(hash2, altKey)) {
      res[key] = hash2[altKey];
      if (!preserve) {
        delete hash2[altKey];
      }
      return true;
    }
  }
  return false;
}
function simpleNormalizeChildren(children) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }
  return children;
}
function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : void 0;
}
function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}
function normalizeArrayChildren(children, nestedIndex) {
  const res = [];
  let i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === \\"boolean\\")
      continue;
    lastIndex = res.length - 1;
    last = res[lastIndex];
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, \`\${nestedIndex || \\"\\"}_\${i}\`);
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== \\"\\") {
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = \`__vlist\${nestedIndex}_\${i}__\`;
        }
        res.push(c);
      }
    }
  }
  return res;
}
function initProvide(vm) {
  const provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === \\"function\\" ? provide.call(vm) : provide;
  }
}
function initInjections(vm) {
  const result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach((key) => {
      {
        defineReactive$$1(vm, key, result[key], () => {
          warn(\`Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: \\"\${key}\\"\`, vm);
        });
      }
    });
    toggleObserving(true);
  }
}
function resolveInject(inject, vm) {
  if (inject) {
    const result = Object.create(null);
    const keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      if (key === \\"__ob__\\")
        continue;
      const provideKey = inject[key].from;
      let source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }
        source = source.$parent;
      }
      if (!source) {
        if (\\"default\\" in inject[key]) {
          const provideDefault = inject[key].default;
          result[key] = typeof provideDefault === \\"function\\" ? provideDefault.call(vm) : provideDefault;
        } else {
          warn(\`Injection \\"\${key}\\" not found\`, vm);
        }
      }
    }
    return result;
  }
}
function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }
  const slots = {};
  for (let i = 0, l = children.length; i < l; i++) {
    const child = children[i];
    const data = child.data;
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      const name = data.slot;
      const slot = slots[name] || (slots[name] = []);
      if (child.tag === \\"template\\") {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  for (const name in slots) {
    if (slots[name].every(isWhitespace)) {
      delete slots[name];
    }
  }
  return slots;
}
function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === \\" \\";
}
function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  let res;
  const hasNormalSlots = Object.keys(normalSlots).length > 0;
  const isStable = slots ? !!slots.$stable : !hasNormalSlots;
  const key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    return prevSlots;
  } else {
    res = {};
    for (const key2 in slots) {
      if (slots[key2] && key2[0] !== \\"$\\") {
        res[key2] = normalizeScopedSlot(normalSlots, key2, slots[key2]);
      }
    }
  }
  for (const key2 in normalSlots) {
    if (!(key2 in res)) {
      res[key2] = proxyNormalSlot(normalSlots, key2);
    }
  }
  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }
  def(res, \\"$stable\\", isStable);
  def(res, \\"$key\\", key);
  def(res, \\"$hasNormal\\", hasNormalSlots);
  return res;
}
function normalizeScopedSlot(normalSlots, key, fn) {
  const normalized = function() {
    let res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === \\"object\\" && !Array.isArray(res) ? [res] : normalizeChildren(res);
    return res && (res.length === 0 || res.length === 1 && res[0].isComment) ? void 0 : res;
  };
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized;
}
function proxyNormalSlot(slots, key) {
  return () => slots[key];
}
function renderList(val, render) {
  let ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === \\"string\\") {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === \\"number\\") {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      const iterator = val[Symbol.iterator]();
      let result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  ret._isVList = true;
  return ret;
}
function renderSlot(name, fallback, props2, bindObject) {
  const scopedSlotFn = this.$scopedSlots[name];
  let nodes;
  if (scopedSlotFn) {
    props2 = props2 || {};
    if (bindObject) {
      if (!isObject(bindObject)) {
        warn(\\"slot v-bind without argument expects an Object\\", this);
      }
      props2 = extend(extend({}, bindObject), props2);
    }
    nodes = scopedSlotFn(props2) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }
  const target2 = props2 && props2.slot;
  if (target2) {
    return this.$createElement(\\"template\\", {slot: target2}, nodes);
  } else {
    return nodes;
  }
}
function resolveFilter(id) {
  return resolveAsset(this.$options, \\"filters\\", id, true) || identity;
}
function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  const mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
      warn(\\"v-bind without argument expects an Object or Array value\\", this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      let hash2;
      for (const key in value) {
        if (key === \\"class\\" || key === \\"style\\" || isReservedAttribute(key)) {
          hash2 = data;
        } else {
          const type = data.attrs && data.attrs.type;
          hash2 = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }
        const camelizedKey = camelize(key);
        const hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash2) && !(hyphenatedKey in hash2)) {
          hash2[key] = value[key];
          if (isSync) {
            const on2 = data.on || (data.on = {});
            on2[\`update:\${key}\`] = function($event) {
              value[key] = $event;
            };
          }
        }
      }
    }
  }
  return data;
}
function renderStatic(index2, isInFor) {
  const cached2 = this._staticTrees || (this._staticTrees = []);
  let tree = cached2[index2];
  if (tree && !isInFor) {
    return tree;
  }
  tree = cached2[index2] = this.$options.staticRenderFns[index2].call(this._renderProxy, null, this);
  markStatic(tree, \`__static__\${index2}\`, false);
  return tree;
}
function markOnce(tree, index2, key) {
  markStatic(tree, \`__once__\${index2}\${key ? \`_\${key}\` : \`\`}\`, true);
  return tree;
}
function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (let i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== \\"string\\") {
        markStaticNode(tree[i], \`\${key}_\${i}\`, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}
function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      warn(\\"v-on without argument expects an Object value\\", this);
    } else {
      const on2 = data.on = data.on ? extend({}, data.on) : {};
      for (const key in value) {
        const existing = on2[key];
        const ours = value[key];
        on2[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data;
}
function resolveScopedSlots(fns, res, hasDynamicKeys, contentHashKey) {
  res = res || {$stable: !hasDynamicKeys};
  for (let i = 0; i < fns.length; i++) {
    const slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    res.$key = contentHashKey;
  }
  return res;
}
function bindDynamicKeys(baseObj, values) {
  for (let i = 0; i < values.length; i += 2) {
    const key = values[i];
    if (typeof key === \\"string\\" && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (key !== \\"\\" && key !== null) {
      warn(\`Invalid value for dynamic directive argument (expected string or null): \${key}\`, this);
    }
  }
  return baseObj;
}
function prependModifier(value, symbol) {
  return typeof value === \\"string\\" ? symbol + value : value;
}
function installRenderHelpers(target2) {
  target2._o = markOnce;
  target2._n = toNumber;
  target2._s = toString;
  target2._l = renderList;
  target2._t = renderSlot;
  target2._q = looseEqual;
  target2._i = looseIndexOf;
  target2._m = renderStatic;
  target2._f = resolveFilter;
  target2._k = checkKeyCodes;
  target2._b = bindObjectProps;
  target2._v = createTextVNode;
  target2._e = createEmptyVNode;
  target2._u = resolveScopedSlots;
  target2._g = bindObjectListeners;
  target2._d = bindDynamicKeys;
  target2._p = prependModifier;
}
function FunctionalRenderContext(data, props2, children, parent, Ctor) {
  const options = Ctor.options;
  let contextVm;
  if (hasOwn(parent, \\"_uid\\")) {
    contextVm = Object.create(parent);
    contextVm._original = parent;
  } else {
    contextVm = parent;
    parent = parent._original;
  }
  const isCompiled = isTrue(options._compiled);
  const needNormalization = !isCompiled;
  this.data = data;
  this.props = props2;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = () => {
    if (!this.$slots) {
      normalizeScopedSlots(data.scopedSlots, this.$slots = resolveSlots(children, parent));
    }
    return this.$slots;
  };
  Object.defineProperty(this, \\"scopedSlots\\", {
    enumerable: true,
    get() {
      return normalizeScopedSlots(data.scopedSlots, this.slots());
    }
  });
  if (isCompiled) {
    this.$options = options;
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }
  if (options._scopeId) {
    this._c = (a, b, c, d) => {
      const vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode;
    };
  } else {
    this._c = (a, b, c, d) => createElement(contextVm, a, b, c, d, needNormalization);
  }
}
installRenderHelpers(FunctionalRenderContext.prototype);
function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  const options = Ctor.options;
  const props2 = {};
  const propOptions = options.props;
  if (isDef(propOptions)) {
    for (const key in propOptions) {
      props2[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs))
      mergeProps(props2, data.attrs);
    if (isDef(data.props))
      mergeProps(props2, data.props);
  }
  const renderContext = new FunctionalRenderContext(data, props2, children, contextVm, Ctor);
  const vnode = options.render.call(null, renderContext._c, renderContext);
  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    const vnodes = normalizeChildren(vnode) || [];
    const res = new Array(vnodes.length);
    for (let i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res;
  }
}
function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  const clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone;
}
function mergeProps(to, from) {
  for (const key in from) {
    to[camelize(key)] = from[key];
  }
}
const componentVNodeHooks = {
  init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      const mountedNode = vnode;
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      const child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : void 0, hydrating);
    }
  },
  prepatch(oldVnode, vnode) {
    const options = vnode.componentOptions;
    const child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, options.listeners, vnode, options.children);
  },
  insert(vnode) {
    const {context, componentInstance} = vnode;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, \\"mounted\\");
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true);
      }
    }
  },
  destroy(vnode) {
    const {componentInstance} = vnode;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true);
      }
    }
  }
};
const hooksToMerge = Object.keys(componentVNodeHooks);
function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }
  const baseCtor = context.$options._base;
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }
  if (typeof Ctor !== \\"function\\") {
    {
      warn(\`Invalid Component definition: \${String(Ctor)}\`, context);
    }
    return;
  }
  let asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === void 0) {
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }
  data = data || {};
  resolveConstructorOptions(Ctor);
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }
  const propsData = extractPropsFromVNodeData(data, Ctor, tag);
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  }
  const listeners = data.on;
  data.on = data.nativeOn;
  if (isTrue(Ctor.options.abstract)) {
    const slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }
  installComponentHooks(data);
  const name = Ctor.options.name || tag;
  const vnode = new VNode(\`vue-component-\${Ctor.cid}\${name ? \`-\${name}\` : \\"\\"}\`, data, void 0, void 0, void 0, context, {Ctor, propsData, listeners, tag, children}, asyncFactory);
  return vnode;
}
function createComponentInstanceForVnode(vnode, parent) {
  const options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent
  };
  const inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options);
}
function installComponentHooks(data) {
  const hooks2 = data.hook || (data.hook = {});
  for (let i = 0; i < hooksToMerge.length; i++) {
    const key = hooksToMerge[i];
    const existing = hooks2[key];
    const toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks2[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}
function mergeHook$1(f1, f2) {
  const merged = (a, b) => {
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged;
}
function transformModel(options, data) {
  const prop = options.model && options.model.prop || \\"value\\";
  const event = options.model && options.model.event || \\"input\\";
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  const on2 = data.on || (data.on = {});
  const existing = on2[event];
  const callback = data.model.callback;
  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on2[event] = [callback].concat(existing);
    }
  } else {
    on2[event] = callback;
  }
}
const SIMPLE_NORMALIZE = 1;
const ALWAYS_NORMALIZE = 2;
function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = void 0;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType);
}
function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
    warn(\`Avoid using observed data object as vnode data: \${JSON.stringify(data)}
Always create fresh vnode data objects in each render!\`, context);
    return createEmptyVNode();
  }
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    return createEmptyVNode();
  }
  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn(\\"Avoid using non-primitive value as key, use string/number value instead.\\", context);
    }
  }
  if (Array.isArray(children) && typeof children[0] === \\"function\\") {
    data = data || {};
    data.scopedSlots = {default: children[0]};
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  let vnode, ns;
  if (typeof tag === \\"string\\") {
    let Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      if (isDef(data) && isDef(data.nativeOn)) {
        warn(\`The .native modifier for v-on is only valid on components but it was used on <\${tag}>.\`, context);
      }
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, void 0, void 0, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, \\"components\\", tag))) {
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      vnode = new VNode(tag, data, children, void 0, void 0, context);
    }
  } else {
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns))
      applyNS(vnode, ns);
    if (isDef(data))
      registerDeepBindings(data);
    return vnode;
  } else {
    return createEmptyVNode();
  }
}
function applyNS(vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === \\"foreignObject\\") {
    ns = void 0;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (let i = 0, l = vnode.children.length; i < l; i++) {
      const child = vnode.children[i];
      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== \\"svg\\")) {
        applyNS(child, ns, force);
      }
    }
  }
}
function registerDeepBindings(data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}
function initRender(vm) {
  vm._vnode = null;
  vm._staticTrees = null;
  const options = vm.$options;
  const parentVnode = vm.$vnode = options._parentVnode;
  const renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false);
  vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true);
  const parentData = parentVnode && parentVnode.data;
  {
    defineReactive$$1(vm, \\"$attrs\\", parentData && parentData.attrs || emptyObject, () => {
      !isUpdatingChildComponent && warn(\`$attrs is readonly.\`, vm);
    }, true);
    defineReactive$$1(vm, \\"$listeners\\", options._parentListeners || emptyObject, () => {
      !isUpdatingChildComponent && warn(\`$listeners is readonly.\`, vm);
    }, true);
  }
}
let currentRenderingInstance = null;
function renderMixin(Vue2) {
  installRenderHelpers(Vue2.prototype);
  Vue2.prototype.$nextTick = function(fn) {
    return nextTick(fn, this);
  };
  Vue2.prototype._render = function() {
    const vm = this;
    const {render, _parentVnode} = vm.$options;
    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    }
    vm.$vnode = _parentVnode;
    let vnode;
    try {
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, \`render\`);
      if (vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e2) {
          handleError(e2, vm, \`renderError\`);
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    if (!(vnode instanceof VNode)) {
      if (Array.isArray(vnode)) {
        warn(\\"Multiple root nodes returned from render function. Render function should return a single root node.\\", vm);
      }
      vnode = createEmptyVNode();
    }
    vnode.parent = _parentVnode;
    return vnode;
  };
}
function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === \\"Module\\") {
    comp = comp.default;
  }
  return isObject(comp) ? base.extend(comp) : comp;
}
function createAsyncPlaceholder(factory, data, context, children, tag) {
  const node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {data, context, children, tag};
  return node;
}
function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }
  if (isDef(factory.resolved)) {
    return factory.resolved;
  }
  const owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    factory.owners.push(owner);
  }
  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }
  if (owner && !isDef(factory.owners)) {
    const owners = factory.owners = [owner];
    let sync = true;
    let timerLoading = null;
    let timerTimeout = null;
    owner.$on(\\"hook:destroyed\\", () => remove(owners, owner));
    const forceRender = (renderCompleted) => {
      for (let i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }
      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };
    const resolve = once((res2) => {
      factory.resolved = ensureCtor(res2, baseCtor);
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    const reject = once((reason) => {
      warn(\`Failed to resolve async component: \${String(factory)}\` + (reason ? \`
Reason: \${reason}\` : \\"\\"));
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    const res = factory(resolve, reject);
    if (isObject(res)) {
      if (isPromise(res)) {
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);
        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }
        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(() => {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }
        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(() => {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(\`timeout (\${res.timeout}ms)\`);
            }
          }, res.timeout);
        }
      }
    }
    sync = false;
    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (let i = 0; i < children.length; i++) {
      const c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  const listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}
let target;
function add(event, fn) {
  target.$on(event, fn);
}
function remove$1(event, fn) {
  target.$off(event, fn);
}
function createOnceHandler(event, fn) {
  const _target = target;
  return function onceHandler() {
    const res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}
function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = void 0;
}
function eventsMixin(Vue2) {
  const hookRE = /^hook:/;
  Vue2.prototype.$on = function(event, fn) {
    const vm = this;
    if (Array.isArray(event)) {
      for (let i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm;
  };
  Vue2.prototype.$once = function(event, fn) {
    const vm = this;
    function on2() {
      vm.$off(event, on2);
      fn.apply(vm, arguments);
    }
    on2.fn = fn;
    vm.$on(event, on2);
    return vm;
  };
  Vue2.prototype.$off = function(event, fn) {
    const vm = this;
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    }
    if (Array.isArray(event)) {
      for (let i2 = 0, l = event.length; i2 < l; i2++) {
        vm.$off(event[i2], fn);
      }
      return vm;
    }
    const cbs = vm._events[event];
    if (!cbs) {
      return vm;
    }
    if (!fn) {
      vm._events[event] = null;
      return vm;
    }
    let cb;
    let i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }
    return vm;
  };
  Vue2.prototype.$emit = function(event) {
    const vm = this;
    {
      const lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(\`Event \\"\${lowerCaseEvent}\\" is emitted in component \${formatComponentName(vm)} but the handler is registered for \\"\${event}\\". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use \\"\${hyphenate(event)}\\" instead of \\"\${event}\\".\`);
      }
    }
    let cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      const args = toArray(arguments, 1);
      const info = \`event handler for \\"\${event}\\"\`;
      for (let i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm;
  };
}
let activeInstance = null;
let isUpdatingChildComponent = false;
function setActiveInstance(vm) {
  const prevActiveInstance = activeInstance;
  activeInstance = vm;
  return () => {
    activeInstance = prevActiveInstance;
  };
}
function initLifecycle(vm) {
  const options = vm.$options;
  let parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }
  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}
function lifecycleMixin(Vue2) {
  Vue2.prototype._update = function(vnode, hydrating) {
    const vm = this;
    const prevEl = vm.$el;
    const prevVnode = vm._vnode;
    const restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    if (!prevVnode) {
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false);
    } else {
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
  };
  Vue2.prototype.$forceUpdate = function() {
    const vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };
  Vue2.prototype.$destroy = function() {
    const vm = this;
    if (vm._isBeingDestroyed) {
      return;
    }
    callHook(vm, \\"beforeDestroy\\");
    vm._isBeingDestroyed = true;
    const parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    let i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    vm._isDestroyed = true;
    vm.__patch__(vm._vnode, null);
    callHook(vm, \\"destroyed\\");
    vm.$off();
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}
function mountComponent(vm, el, hydrating) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    {
      if (vm.$options.template && vm.$options.template.charAt(0) !== \\"#\\" || vm.$options.el || el) {
        warn(\\"You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.\\", vm);
      } else {
        warn(\\"Failed to mount component: template or render function not defined.\\", vm);
      }
    }
  }
  callHook(vm, \\"beforeMount\\");
  let updateComponent;
  if (config.performance && mark) {
    updateComponent = () => {
      const name = vm._name;
      const id = vm._uid;
      const startTag = \`vue-perf-start:\${id}\`;
      const endTag2 = \`vue-perf-end:\${id}\`;
      mark(startTag);
      const vnode = vm._render();
      mark(endTag2);
      measure(\`vue \${name} render\`, startTag, endTag2);
      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag2);
      measure(\`vue \${name} patch\`, startTag, endTag2);
    };
  } else {
    updateComponent = () => {
      vm._update(vm._render(), hydrating);
    };
  }
  new Watcher(vm, updateComponent, noop, {
    before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, \\"beforeUpdate\\");
      }
    }
  }, true);
  hydrating = false;
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, \\"mounted\\");
  }
  return vm;
}
function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  {
    isUpdatingChildComponent = true;
  }
  const newScopedSlots = parentVnode.data.scopedSlots;
  const oldScopedSlots = vm.$scopedSlots;
  const hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key);
  const needsForceUpdate = !!(renderChildren || vm.$options._renderChildren || hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode;
  if (vm._vnode) {
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    const props2 = vm._props;
    const propKeys = vm.$options._propKeys || [];
    for (let i = 0; i < propKeys.length; i++) {
      const key = propKeys[i];
      const propOptions = vm.$options.props;
      props2[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    vm.$options.propsData = propsData;
  }
  listeners = listeners || emptyObject;
  const oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }
  {
    isUpdatingChildComponent = false;
  }
}
function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive)
      return true;
  }
  return false;
}
function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (let i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, \\"activated\\");
  }
}
function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return;
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (let i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, \\"deactivated\\");
  }
}
function callHook(vm, hook) {
  pushTarget();
  const handlers = vm.$options[hook];
  const info = \`\${hook} hook\`;
  if (handlers) {
    for (let i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit(\\"hook:\\" + hook);
  }
  popTarget();
}
const MAX_UPDATE_COUNT = 100;
const queue = [];
const activatedChildren = [];
let has = {};
let circular = {};
let waiting = false;
let flushing = false;
let index = 0;
function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  {
    circular = {};
  }
  waiting = flushing = false;
}
let currentFlushTimestamp = 0;
let getNow = Date.now;
if (inBrowser && !isIE) {
  const performance = window.performance;
  if (performance && typeof performance.now === \\"function\\" && getNow() > document.createEvent(\\"Event\\").timeStamp) {
    getNow = () => performance.now();
  }
}
function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  let watcher, id;
  queue.sort((a, b) => a.id - b.id);
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    if (has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(\\"You may have an infinite update loop \\" + (watcher.user ? \`in watcher with expression \\"\${watcher.expression}\\"\` : \`in a component render function.\`), watcher.vm);
        break;
      }
    }
  }
  const activatedQueue = activatedChildren.slice();
  const updatedQueue = queue.slice();
  resetSchedulerState();
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);
  if (devtools && config.devtools) {
    devtools.emit(\\"flush\\");
  }
}
function callUpdatedHooks(queue2) {
  let i = queue2.length;
  while (i--) {
    const watcher = queue2[i];
    const vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, \\"updated\\");
    }
  }
}
function queueActivatedComponent(vm) {
  vm._inactive = false;
  activatedChildren.push(vm);
}
function callActivatedHooks(queue2) {
  for (let i = 0; i < queue2.length; i++) {
    queue2[i]._inactive = true;
    activateChildComponent(queue2[i], true);
  }
}
function queueWatcher(watcher) {
  const id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      let i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    if (!waiting) {
      waiting = true;
      if (!config.async) {
        flushSchedulerQueue();
        return;
      }
      nextTick(flushSchedulerQueue);
    }
  }
}
let uid$2 = 0;
class Watcher {
  constructor(vm, expOrFn, cb, options, isRenderWatcher) {
    this.vm = vm;
    if (isRenderWatcher) {
      vm._watcher = this;
    }
    vm._watchers.push(this);
    if (options) {
      this.deep = !!options.deep;
      this.user = !!options.user;
      this.lazy = !!options.lazy;
      this.sync = !!options.sync;
      this.before = options.before;
    } else {
      this.deep = this.user = this.lazy = this.sync = false;
    }
    this.cb = cb;
    this.id = ++uid$2;
    this.active = true;
    this.dirty = this.lazy;
    this.deps = [];
    this.newDeps = [];
    this.depIds = new _Set();
    this.newDepIds = new _Set();
    this.expression = expOrFn.toString();
    if (typeof expOrFn === \\"function\\") {
      this.getter = expOrFn;
    } else {
      this.getter = parsePath(expOrFn);
      if (!this.getter) {
        this.getter = noop;
        warn(\`Failed watching path: \\"\${expOrFn}\\" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.\`, vm);
      }
    }
    this.value = this.lazy ? void 0 : this.get();
  }
  get() {
    pushTarget(this);
    let value;
    const vm = this.vm;
    try {
      value = this.getter.call(vm, vm);
    } catch (e) {
      if (this.user) {
        handleError(e, vm, \`getter for watcher \\"\${this.expression}\\"\`);
      } else {
        throw e;
      }
    } finally {
      if (this.deep) {
        traverse(value);
      }
      popTarget();
      this.cleanupDeps();
    }
    return value;
  }
  addDep(dep) {
    const id = dep.id;
    if (!this.newDepIds.has(id)) {
      this.newDepIds.add(id);
      this.newDeps.push(dep);
      if (!this.depIds.has(id)) {
        dep.addSub(this);
      }
    }
  }
  cleanupDeps() {
    let i = this.deps.length;
    while (i--) {
      const dep = this.deps[i];
      if (!this.newDepIds.has(dep.id)) {
        dep.removeSub(this);
      }
    }
    let tmp = this.depIds;
    this.depIds = this.newDepIds;
    this.newDepIds = tmp;
    this.newDepIds.clear();
    tmp = this.deps;
    this.deps = this.newDeps;
    this.newDeps = tmp;
    this.newDeps.length = 0;
  }
  update() {
    if (this.lazy) {
      this.dirty = true;
    } else if (this.sync) {
      this.run();
    } else {
      queueWatcher(this);
    }
  }
  run() {
    if (this.active) {
      const value = this.get();
      if (value !== this.value || isObject(value) || this.deep) {
        const oldValue = this.value;
        this.value = value;
        if (this.user) {
          try {
            this.cb.call(this.vm, value, oldValue);
          } catch (e) {
            handleError(e, this.vm, \`callback for watcher \\"\${this.expression}\\"\`);
          }
        } else {
          this.cb.call(this.vm, value, oldValue);
        }
      }
    }
  }
  evaluate() {
    this.value = this.get();
    this.dirty = false;
  }
  depend() {
    let i = this.deps.length;
    while (i--) {
      this.deps[i].depend();
    }
  }
  teardown() {
    if (this.active) {
      if (!this.vm._isBeingDestroyed) {
        remove(this.vm._watchers, this);
      }
      let i = this.deps.length;
      while (i--) {
        this.deps[i].removeSub(this);
      }
      this.active = false;
    }
  }
}
const sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};
function proxy(target2, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };
  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target2, key, sharedPropertyDefinition);
}
function initState(vm) {
  vm._watchers = [];
  const opts = vm.$options;
  if (opts.props)
    initProps(vm, opts.props);
  if (opts.methods)
    initMethods(vm, opts.methods);
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true);
  }
  if (opts.computed)
    initComputed(vm, opts.computed);
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}
function initProps(vm, propsOptions) {
  const propsData = vm.$options.propsData || {};
  const props2 = vm._props = {};
  const keys = vm.$options._propKeys = [];
  const isRoot = !vm.$parent;
  if (!isRoot) {
    toggleObserving(false);
  }
  for (const key in propsOptions) {
    keys.push(key);
    const value = validateProp(key, propsOptions, propsData, vm);
    {
      const hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn(\`\\"\${hyphenatedKey}\\" is a reserved attribute and cannot be used as component prop.\`, vm);
      }
      defineReactive$$1(props2, key, value, () => {
        if (!isRoot && !isUpdatingChildComponent) {
          warn(\`Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \\"\${key}\\"\`, vm);
        }
      });
    }
    if (!(key in vm)) {
      proxy(vm, \`_props\`, key);
    }
  }
  toggleObserving(true);
}
function initData(vm) {
  let data = vm.$options.data;
  data = vm._data = typeof data === \\"function\\" ? getData(data, vm) : data || {};
  if (!isPlainObject(data)) {
    data = {};
    warn(\\"data functions should return an object:https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function\\", vm);
  }
  const keys = Object.keys(data);
  const props2 = vm.$options.props;
  const methods = vm.$options.methods;
  let i = keys.length;
  while (i--) {
    const key = keys[i];
    {
      if (methods && hasOwn(methods, key)) {
        warn(\`Method \\"\${key}\\" has already been defined as a data property.\`, vm);
      }
    }
    if (props2 && hasOwn(props2, key)) {
      warn(\`The data property \\"\${key}\\" is already declared as a prop. Use prop default value instead.\`, vm);
    } else if (!isReserved(key)) {
      proxy(vm, \`_data\`, key);
    }
  }
  observe(data, true);
}
function getData(data, vm) {
  pushTarget();
  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, \`data()\`);
    return {};
  } finally {
    popTarget();
  }
}
const computedWatcherOptions = {lazy: true};
function initComputed(vm, computed) {
  const watchers = vm._computedWatchers = Object.create(null);
  const isSSR = isServerRendering();
  for (const key in computed) {
    const userDef = computed[key];
    const getter = typeof userDef === \\"function\\" ? userDef : userDef.get;
    if (getter == null) {
      warn(\`Getter is missing for computed property \\"\${key}\\".\`, vm);
    }
    if (!isSSR) {
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    }
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else {
      if (key in vm.$data) {
        warn(\`The computed property \\"\${key}\\" is already defined in data.\`, vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(\`The computed property \\"\${key}\\" is already defined as a prop.\`, vm);
      }
    }
  }
}
function defineComputed(target2, key, userDef) {
  const shouldCache = !isServerRendering();
  if (typeof userDef === \\"function\\") {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function() {
      warn(\`Computed property \\"\${key}\\" was assigned to but it has no setter.\`, this);
    };
  }
  Object.defineProperty(target2, key, sharedPropertyDefinition);
}
function createComputedGetter(key) {
  return function computedGetter() {
    const watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value;
    }
  };
}
function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}
function initMethods(vm, methods) {
  const props2 = vm.$options.props;
  for (const key in methods) {
    {
      if (typeof methods[key] !== \\"function\\") {
        warn(\`Method \\"\${key}\\" has type \\"\${typeof methods[key]}\\" in the component definition. Did you reference the function correctly?\`, vm);
      }
      if (props2 && hasOwn(props2, key)) {
        warn(\`Method \\"\${key}\\" has already been defined as a prop.\`, vm);
      }
      if (key in vm && isReserved(key)) {
        warn(\`Method \\"\${key}\\" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.\`);
      }
    }
    vm[key] = typeof methods[key] !== \\"function\\" ? noop : bind(methods[key], vm);
  }
}
function initWatch(vm, watch) {
  for (const key in watch) {
    const handler = watch[key];
    if (Array.isArray(handler)) {
      for (let i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}
function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === \\"string\\") {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options);
}
function stateMixin(Vue2) {
  const dataDef = {};
  dataDef.get = function() {
    return this._data;
  };
  const propsDef = {};
  propsDef.get = function() {
    return this._props;
  };
  {
    dataDef.set = function() {
      warn(\\"Avoid replacing instance root $data. Use nested data properties instead.\\", this);
    };
    propsDef.set = function() {
      warn(\`$props is readonly.\`, this);
    };
  }
  Object.defineProperty(Vue2.prototype, \\"$data\\", dataDef);
  Object.defineProperty(Vue2.prototype, \\"$props\\", propsDef);
  Vue2.prototype.$set = set;
  Vue2.prototype.$delete = del;
  Vue2.prototype.$watch = function(expOrFn, cb, options) {
    const vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }
    options = options || {};
    options.user = true;
    const watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, \`callback for immediate watcher \\"\${watcher.expression}\\"\`);
      }
    }
    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
let uid$3 = 0;
function initMixin(Vue2) {
  Vue2.prototype._init = function(options) {
    const vm = this;
    vm._uid = uid$3++;
    let startTag, endTag2;
    if (config.performance && mark) {
      startTag = \`vue-perf-start:\${vm._uid}\`;
      endTag2 = \`vue-perf-end:\${vm._uid}\`;
      mark(startTag);
    }
    vm._isVue = true;
    if (options && options._isComponent) {
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    {
      initProxy(vm);
    }
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, \\"beforeCreate\\");
    initInjections(vm);
    initState(vm);
    initProvide(vm);
    callHook(vm, \\"created\\");
    if (config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag2);
      measure(\`vue \${vm._name} init\`, startTag, endTag2);
    }
    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}
function initInternalComponent(vm, options) {
  const opts = vm.$options = Object.create(vm.constructor.options);
  const parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  const vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;
  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}
function resolveConstructorOptions(Ctor) {
  let options = Ctor.options;
  if (Ctor.super) {
    const superOptions = resolveConstructorOptions(Ctor.super);
    const cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      Ctor.superOptions = superOptions;
      const modifiedOptions = resolveModifiedOptions(Ctor);
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options;
}
function resolveModifiedOptions(Ctor) {
  let modified;
  const latest = Ctor.options;
  const sealed = Ctor.sealedOptions;
  for (const key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified)
        modified = {};
      modified[key] = latest[key];
    }
  }
  return modified;
}
function Vue(options) {
  if (!(this instanceof Vue)) {
    warn(\\"Vue is a constructor and should be called with the \`new\` keyword\\");
  }
  this._init(options);
}
initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
function initUse(Vue2) {
  Vue2.use = function(plugin) {
    const installedPlugins = this._installedPlugins || (this._installedPlugins = []);
    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    }
    const args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === \\"function\\") {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === \\"function\\") {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this;
  };
}
function initMixin$1(Vue2) {
  Vue2.mixin = function(mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
function initExtend(Vue2) {
  Vue2.cid = 0;
  let cid = 1;
  Vue2.extend = function(extendOptions) {
    extendOptions = extendOptions || {};
    const Super = this;
    const SuperId = Super.cid;
    const cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }
    const name = extendOptions.name || Super.options.name;
    if (name) {
      validateComponentName(name);
    }
    const Sub = function VueComponent(options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub[\\"super\\"] = Super;
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;
    ASSET_TYPES.forEach(function(type) {
      Sub[type] = Super[type];
    });
    if (name) {
      Sub.options.components[name] = Sub;
    }
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);
    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}
function initProps$1(Comp) {
  const props2 = Comp.options.props;
  for (const key in props2) {
    proxy(Comp.prototype, \`_props\`, key);
  }
}
function initComputed$1(Comp) {
  const computed = Comp.options.computed;
  for (const key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
function initAssetRegisters(Vue2) {
  ASSET_TYPES.forEach((type) => {
    Vue2[type] = function(id, definition) {
      if (!definition) {
        return this.options[type + \\"s\\"][id];
      } else {
        if (type === \\"component\\") {
          validateComponentName(id);
        }
        if (type === \\"component\\" && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === \\"directive\\" && typeof definition === \\"function\\") {
          definition = {bind: definition, update: definition};
        }
        this.options[type + \\"s\\"][id] = definition;
        return definition;
      }
    };
  });
}
function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}
function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === \\"string\\") {
    return pattern.split(\\",\\").indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  return false;
}
function pruneCache(keepAliveInstance, filter) {
  const {cache, keys, _vnode} = keepAliveInstance;
  for (const key in cache) {
    const cachedNode = cache[key];
    if (cachedNode) {
      const name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}
function pruneCacheEntry(cache, key, keys, current) {
  const cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}
const patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: \\"keep-alive\\",
  abstract: true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed() {
    for (const key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted() {
    this.$watch(\\"include\\", (val) => {
      pruneCache(this, (name) => matches(val, name));
    });
    this.$watch(\\"exclude\\", (val) => {
      pruneCache(this, (name) => !matches(val, name));
    });
  },
  render() {
    const slot = this.$slots.default;
    const vnode = getFirstComponentChild(slot);
    const componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      const name = getComponentName(componentOptions);
      const {include, exclude} = this;
      if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
        return vnode;
      }
      const {cache, keys} = this;
      const key = vnode.key == null ? componentOptions.Ctor.cid + (componentOptions.tag ? \`::\${componentOptions.tag}\` : \\"\\") : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }
      vnode.data.keepAlive = true;
    }
    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive
};
function initGlobalAPI(Vue2) {
  const configDef = {};
  configDef.get = () => config;
  {
    configDef.set = () => {
      warn(\\"Do not replace the Vue.config object, set individual fields instead.\\");
    };
  }
  Object.defineProperty(Vue2, \\"config\\", configDef);
  Vue2.util = {
    warn,
    extend,
    mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue2.set = set;
  Vue2.delete = del;
  Vue2.nextTick = nextTick;
  Vue2.observable = (obj) => {
    observe(obj);
    return obj;
  };
  Vue2.options = Object.create(null);
  ASSET_TYPES.forEach((type) => {
    Vue2.options[type + \\"s\\"] = Object.create(null);
  });
  Vue2.options._base = Vue2;
  extend(Vue2.options.components, builtInComponents);
  initUse(Vue2);
  initMixin$1(Vue2);
  initExtend(Vue2);
  initAssetRegisters(Vue2);
}
initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, \\"$isServer\\", {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, \\"$ssrContext\\", {
  get() {
    return this.$vnode && this.$vnode.ssrContext;
  }
});
Object.defineProperty(Vue, \\"FunctionalRenderContext\\", {
  value: FunctionalRenderContext
});
Vue.version = \\"2.6.12\\";
const isReservedAttr = makeMap(\\"style,class\\");
const acceptValue = makeMap(\\"input,textarea,option,select,progress\\");
const mustUseProp = (tag, type, attr) => {
  return attr === \\"value\\" && acceptValue(tag) && type !== \\"button\\" || attr === \\"selected\\" && tag === \\"option\\" || attr === \\"checked\\" && tag === \\"input\\" || attr === \\"muted\\" && tag === \\"video\\";
};
const isEnumeratedAttr = makeMap(\\"contenteditable,draggable,spellcheck\\");
const isValidContentEditableValue = makeMap(\\"events,caret,typing,plaintext-only\\");
const convertEnumeratedValue = (key, value) => {
  return isFalsyAttrValue(value) || value === \\"false\\" ? \\"false\\" : key === \\"contenteditable\\" && isValidContentEditableValue(value) ? value : \\"true\\";
};
const isBooleanAttr = makeMap(\\"allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible\\");
const xlinkNS = \\"http://www.w3.org/1999/xlink\\";
const isXlink = (name) => {
  return name.charAt(5) === \\":\\" && name.slice(0, 5) === \\"xlink\\";
};
const getXlinkProp = (name) => {
  return isXlink(name) ? name.slice(6, name.length) : \\"\\";
};
const isFalsyAttrValue = (val) => {
  return val == null || val === false;
};
function genClassForVnode(vnode) {
  let data = vnode.data;
  let parentNode2 = vnode;
  let childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode2 = parentNode2.parent)) {
    if (parentNode2 && parentNode2.data) {
      data = mergeClassData(data, parentNode2.data);
    }
  }
  return renderClass(data.staticClass, data.class);
}
function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}
function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  return \\"\\";
}
function concat(a, b) {
  return a ? b ? a + \\" \\" + b : a : b || \\"\\";
}
function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }
  if (isObject(value)) {
    return stringifyObject(value);
  }
  if (typeof value === \\"string\\") {
    return value;
  }
  return \\"\\";
}
function stringifyArray(value) {
  let res = \\"\\";
  let stringified;
  for (let i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== \\"\\") {
      if (res)
        res += \\" \\";
      res += stringified;
    }
  }
  return res;
}
function stringifyObject(value) {
  let res = \\"\\";
  for (const key in value) {
    if (value[key]) {
      if (res)
        res += \\" \\";
      res += key;
    }
  }
  return res;
}
const namespaceMap = {
  svg: \\"http://www.w3.org/2000/svg\\",
  math: \\"http://www.w3.org/1998/Math/MathML\\"
};
const isHTMLTag = makeMap(\\"html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot\\");
const isSVG = makeMap(\\"svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view\\", true);
const isPreTag = (tag) => tag === \\"pre\\";
const isReservedTag = (tag) => {
  return isHTMLTag(tag) || isSVG(tag);
};
function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return \\"svg\\";
  }
  if (tag === \\"math\\") {
    return \\"math\\";
  }
}
const unknownElementCache = Object.create(null);
function isUnknownElement(tag) {
  if (!inBrowser) {
    return true;
  }
  if (isReservedTag(tag)) {
    return false;
  }
  tag = tag.toLowerCase();
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }
  const el = document.createElement(tag);
  if (tag.indexOf(\\"-\\") > -1) {
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}
const isTextInputType = makeMap(\\"text,number,password,search,email,tel,url\\");
function query(el) {
  if (typeof el === \\"string\\") {
    const selected = document.querySelector(el);
    if (!selected) {
      warn(\\"Cannot find element: \\" + el);
      return document.createElement(\\"div\\");
    }
    return selected;
  } else {
    return el;
  }
}
function createElement$1(tagName2, vnode) {
  const elm = document.createElement(tagName2);
  if (tagName2 !== \\"select\\") {
    return elm;
  }
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== void 0) {
    elm.setAttribute(\\"multiple\\", \\"multiple\\");
  }
  return elm;
}
function createElementNS(namespace, tagName2) {
  return document.createElementNS(namespaceMap[namespace], tagName2);
}
function createTextNode(text2) {
  return document.createTextNode(text2);
}
function createComment(text2) {
  return document.createComment(text2);
}
function insertBefore(parentNode2, newNode, referenceNode) {
  parentNode2.insertBefore(newNode, referenceNode);
}
function removeChild(node, child) {
  node.removeChild(child);
}
function appendChild(node, child) {
  node.appendChild(child);
}
function parentNode(node) {
  return node.parentNode;
}
function nextSibling(node) {
  return node.nextSibling;
}
function tagName(node) {
  return node.tagName;
}
function setTextContent(node, text2) {
  node.textContent = text2;
}
function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, \\"\\");
}
var nodeOps = /* @__PURE__ */ Object.freeze({
  createElement: createElement$1,
  createElementNS,
  createTextNode,
  createComment,
  insertBefore,
  removeChild,
  appendChild,
  parentNode,
  nextSibling,
  tagName,
  setTextContent,
  setStyleScope
});
var ref = {
  create(_, vnode) {
    registerRef(vnode);
  },
  update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy(vnode) {
    registerRef(vnode, true);
  }
};
function registerRef(vnode, isRemoval) {
  const key = vnode.data.ref;
  if (!isDef(key))
    return;
  const vm = vnode.context;
  const ref2 = vnode.componentInstance || vnode.elm;
  const refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref2);
    } else if (refs[key] === ref2) {
      refs[key] = void 0;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref2];
      } else if (refs[key].indexOf(ref2) < 0) {
        refs[key].push(ref2);
      }
    } else {
      refs[key] = ref2;
    }
  }
}
const emptyNode = new VNode(\\"\\", {}, []);
const hooks = [\\"create\\", \\"activate\\", \\"update\\", \\"remove\\", \\"destroy\\"];
function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}
function sameInputType(a, b) {
  if (a.tag !== \\"input\\")
    return true;
  let i;
  const typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  const typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}
function createKeyToOldIdx(children, beginIdx, endIdx) {
  let i, key;
  const map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key))
      map[key] = i;
  }
  return map;
}
function createPatchFunction(backend) {
  let i, j;
  const cbs = {};
  const {modules: modules2, nodeOps: nodeOps2} = backend;
  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules2.length; ++j) {
      if (isDef(modules2[j][hooks[i]])) {
        cbs[hooks[i]].push(modules2[j][hooks[i]]);
      }
    }
  }
  function emptyNodeAt(elm) {
    return new VNode(nodeOps2.tagName(elm).toLowerCase(), {}, [], void 0, elm);
  }
  function createRmCb(childElm, listeners) {
    function remove$$1() {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1;
  }
  function removeNode(el) {
    const parent = nodeOps2.parentNode(el);
    if (isDef(parent)) {
      nodeOps2.removeChild(parent, el);
    }
  }
  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some((ignore) => {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }
  let creatingElmInVPre = 0;
  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index2) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      vnode = ownerArray[index2] = cloneVNode(vnode);
    }
    vnode.isRootInsert = !nested;
    if (createComponent2(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }
    const data = vnode.data;
    const children = vnode.children;
    const tag = vnode.tag;
    if (isDef(tag)) {
      {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn(\\"Unknown custom element: <\\" + tag + '> - did you register the component correctly? For recursive components, make sure to provide the \\"name\\" option.', vnode.context);
        }
      }
      vnode.elm = vnode.ns ? nodeOps2.createElementNS(vnode.ns, tag) : nodeOps2.createElement(tag, vnode);
      setScope(vnode);
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }
      if (data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps2.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps2.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }
  function createComponent2(vnode, insertedVnodeQueue, parentElm, refElm) {
    let i2 = vnode.data;
    if (isDef(i2)) {
      const isReactivated = isDef(vnode.componentInstance) && i2.keepAlive;
      if (isDef(i2 = i2.hook) && isDef(i2 = i2.init)) {
        i2(vnode, false);
      }
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true;
      }
    }
  }
  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      registerRef(vnode);
      insertedVnodeQueue.push(vnode);
    }
  }
  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    let i2;
    let innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i2 = innerNode.data) && isDef(i2 = i2.transition)) {
        for (i2 = 0; i2 < cbs.activate.length; ++i2) {
          cbs.activate[i2](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break;
      }
    }
    insert(parentElm, vnode.elm, refElm);
  }
  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps2.parentNode(ref$$1) === parent) {
          nodeOps2.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps2.appendChild(parent, elm);
      }
    }
  }
  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      {
        checkDuplicateKeys(children);
      }
      for (let i2 = 0; i2 < children.length; ++i2) {
        createElm(children[i2], insertedVnodeQueue, vnode.elm, null, true, children, i2);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps2.appendChild(vnode.elm, nodeOps2.createTextNode(String(vnode.text)));
    }
  }
  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag);
  }
  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (let i2 = 0; i2 < cbs.create.length; ++i2) {
      cbs.create[i2](emptyNode, vnode);
    }
    i = vnode.data.hook;
    if (isDef(i)) {
      if (isDef(i.create))
        i.create(emptyNode, vnode);
      if (isDef(i.insert))
        insertedVnodeQueue.push(vnode);
    }
  }
  function setScope(vnode) {
    let i2;
    if (isDef(i2 = vnode.fnScopeId)) {
      nodeOps2.setStyleScope(vnode.elm, i2);
    } else {
      let ancestor = vnode;
      while (ancestor) {
        if (isDef(i2 = ancestor.context) && isDef(i2 = i2.$options._scopeId)) {
          nodeOps2.setStyleScope(vnode.elm, i2);
        }
        ancestor = ancestor.parent;
      }
    }
    if (isDef(i2 = activeInstance) && i2 !== vnode.context && i2 !== vnode.fnContext && isDef(i2 = i2.$options._scopeId)) {
      nodeOps2.setStyleScope(vnode.elm, i2);
    }
  }
  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }
  function invokeDestroyHook(vnode) {
    let i2, j2;
    const data = vnode.data;
    if (isDef(data)) {
      if (isDef(i2 = data.hook) && isDef(i2 = i2.destroy))
        i2(vnode);
      for (i2 = 0; i2 < cbs.destroy.length; ++i2)
        cbs.destroy[i2](vnode);
    }
    if (isDef(i2 = vnode.children)) {
      for (j2 = 0; j2 < vnode.children.length; ++j2) {
        invokeDestroyHook(vnode.children[j2]);
      }
    }
  }
  function removeVnodes(vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      const ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          removeNode(ch.elm);
        }
      }
    }
  }
  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      let i2;
      const listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        rm.listeners += listeners;
      } else {
        rm = createRmCb(vnode.elm, listeners);
      }
      if (isDef(i2 = vnode.componentInstance) && isDef(i2 = i2._vnode) && isDef(i2.data)) {
        removeAndInvokeRemoveHook(i2, rm);
      }
      for (i2 = 0; i2 < cbs.remove.length; ++i2) {
        cbs.remove[i2](vnode, rm);
      }
      if (isDef(i2 = vnode.data.hook) && isDef(i2 = i2.remove)) {
        i2(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }
  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    let oldStartIdx = 0;
    let newStartIdx = 0;
    let oldEndIdx = oldCh.length - 1;
    let oldStartVnode = oldCh[0];
    let oldEndVnode = oldCh[oldEndIdx];
    let newEndIdx = newCh.length - 1;
    let newStartVnode = newCh[0];
    let newEndVnode = newCh[newEndIdx];
    let oldKeyToIdx, idxInOld, vnodeToMove, refElm;
    const canMove = !removeOnly;
    {
      checkDuplicateKeys(newCh);
    }
    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx];
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps2.insertBefore(parentElm, oldStartVnode.elm, nodeOps2.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps2.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx))
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) {
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = void 0;
            canMove && nodeOps2.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }
  function checkDuplicateKeys(children) {
    const seenKeys = {};
    for (let i2 = 0; i2 < children.length; i2++) {
      const vnode = children[i2];
      const key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(\`Duplicate keys detected: '\${key}'. This may cause an update error.\`, vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }
  function findIdxInOld(node, oldCh, start, end) {
    for (let i2 = start; i2 < end; i2++) {
      const c = oldCh[i2];
      if (isDef(c) && sameVnode(node, c))
        return i2;
    }
  }
  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index2, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      vnode = ownerArray[index2] = cloneVNode(vnode);
    }
    const elm = vnode.elm = oldVnode.elm;
    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return;
    }
    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }
    let i2;
    const data = vnode.data;
    if (isDef(data) && isDef(i2 = data.hook) && isDef(i2 = i2.prepatch)) {
      i2(oldVnode, vnode);
    }
    const oldCh = oldVnode.children;
    const ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i2 = 0; i2 < cbs.update.length; ++i2)
        cbs.update[i2](oldVnode, vnode);
      if (isDef(i2 = data.hook) && isDef(i2 = i2.update))
        i2(oldVnode, vnode);
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch)
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
      } else if (isDef(ch)) {
        {
          checkDuplicateKeys(ch);
        }
        if (isDef(oldVnode.text))
          nodeOps2.setTextContent(elm, \\"\\");
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps2.setTextContent(elm, \\"\\");
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps2.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i2 = data.hook) && isDef(i2 = i2.postpatch))
        i2(oldVnode, vnode);
    }
  }
  function invokeInsertHook(vnode, queue2, initial) {
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue2;
    } else {
      for (let i2 = 0; i2 < queue2.length; ++i2) {
        queue2[i2].data.hook.insert(queue2[i2]);
      }
    }
  }
  let hydrationBailed = false;
  const isRenderedModule = makeMap(\\"attrs,class,staticClass,staticStyle,key\\");
  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    let i2;
    const {tag, data, children} = vnode;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;
    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    }
    {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }
    if (isDef(data)) {
      if (isDef(i2 = data.hook) && isDef(i2 = i2.init))
        i2(vnode, true);
      if (isDef(i2 = vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          if (isDef(i2 = data) && isDef(i2 = i2.domProps) && isDef(i2 = i2.innerHTML)) {
            if (i2 !== elm.innerHTML) {
              if (typeof console !== \\"undefined\\" && !hydrationBailed) {
                hydrationBailed = true;
                console.warn(\\"Parent: \\", elm);
                console.warn(\\"server innerHTML: \\", i2);
                console.warn(\\"client innerHTML: \\", elm.innerHTML);
              }
              return false;
            }
          } else {
            let childrenMatch = true;
            let childNode = elm.firstChild;
            for (let i3 = 0; i3 < children.length; i3++) {
              if (!childNode || !hydrate(childNode, children[i3], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }
              childNode = childNode.nextSibling;
            }
            if (!childrenMatch || childNode) {
              if (typeof console !== \\"undefined\\" && !hydrationBailed) {
                hydrationBailed = true;
                console.warn(\\"Parent: \\", elm);
                console.warn(\\"Mismatching childNodes vs. VNodes: \\", elm.childNodes, children);
              }
              return false;
            }
          }
        }
      }
      if (isDef(data)) {
        let fullInvoke = false;
        for (const key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }
        if (!fullInvoke && data[\\"class\\"]) {
          traverse(data[\\"class\\"]);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true;
  }
  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf(\\"vue-component\\") === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }
  return function patch2(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode))
        invokeDestroyHook(oldVnode);
      return;
    }
    let isInitialPatch = false;
    const insertedVnodeQueue = [];
    if (isUndef(oldVnode)) {
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      const isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else {
              warn(\\"The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.\\");
            }
          }
          oldVnode = emptyNodeAt(oldVnode);
        }
        const oldElm = oldVnode.elm;
        const parentElm = nodeOps2.parentNode(oldElm);
        createElm(vnode, insertedVnodeQueue, oldElm._leaveCb ? null : parentElm, nodeOps2.nextSibling(oldElm));
        if (isDef(vnode.parent)) {
          let ancestor = vnode.parent;
          const patchable = isPatchable(vnode);
          while (ancestor) {
            for (let i2 = 0; i2 < cbs.destroy.length; ++i2) {
              cbs.destroy[i2](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (let i2 = 0; i2 < cbs.create.length; ++i2) {
                cbs.create[i2](emptyNode, ancestor);
              }
              const insert2 = ancestor.data.hook.insert;
              if (insert2.merged) {
                for (let i2 = 1; i2 < insert2.fns.length; i2++) {
                  insert2.fns[i2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }
        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }
    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};
function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}
function _update(oldVnode, vnode) {
  const isCreate = oldVnode === emptyNode;
  const isDestroy = vnode === emptyNode;
  const oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  const newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  const dirsWithInsert = [];
  const dirsWithPostpatch = [];
  let key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      callHook$1(dir, \\"bind\\", vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, \\"update\\", vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }
  if (dirsWithInsert.length) {
    const callInsert = () => {
      for (let i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], \\"inserted\\", vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, \\"insert\\", callInsert);
    } else {
      callInsert();
    }
  }
  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, \\"postpatch\\", () => {
      for (let i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], \\"componentUpdated\\", vnode, oldVnode);
      }
    });
  }
  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        callHook$1(oldDirs[key], \\"unbind\\", oldVnode, oldVnode, isDestroy);
      }
    }
  }
}
const emptyModifiers = Object.create(null);
function normalizeDirectives$1(dirs, vm) {
  const res = Object.create(null);
  if (!dirs) {
    return res;
  }
  let i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, \\"directives\\", dir.name, true);
  }
  return res;
}
function getRawDirName(dir) {
  return dir.rawName || \`\${dir.name}.\${Object.keys(dir.modifiers || {}).join(\\".\\")}\`;
}
function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  const fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, \`directive \${dir.name} \${hook} hook\`);
    }
  }
}
var baseModules = [
  ref,
  directives
];
function updateAttrs(oldVnode, vnode) {
  const opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }
  let key, cur, old;
  const elm = vnode.elm;
  const oldAttrs = oldVnode.data.attrs || {};
  let attrs2 = vnode.data.attrs || {};
  if (isDef(attrs2.__ob__)) {
    attrs2 = vnode.data.attrs = extend({}, attrs2);
  }
  for (key in attrs2) {
    cur = attrs2[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  if ((isIE || isEdge) && attrs2.value !== oldAttrs.value) {
    setAttr(elm, \\"value\\", attrs2.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs2[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}
function setAttr(el, key, value) {
  if (el.tagName.indexOf(\\"-\\") > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      value = key === \\"allowfullscreen\\" && el.tagName === \\"EMBED\\" ? \\"true\\" : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}
function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    if (isIE && !isIE9 && el.tagName === \\"TEXTAREA\\" && key === \\"placeholder\\" && value !== \\"\\" && !el.__ieph) {
      const blocker = (e) => {
        e.stopImmediatePropagation();
        el.removeEventListener(\\"input\\", blocker);
      };
      el.addEventListener(\\"input\\", blocker);
      el.__ieph = true;
    }
    el.setAttribute(key, value);
  }
}
var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
function updateClass(oldVnode, vnode) {
  const el = vnode.elm;
  const data = vnode.data;
  const oldData = oldVnode.data;
  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
    return;
  }
  let cls = genClassForVnode(vnode);
  const transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }
  if (cls !== el._prevClass) {
    el.setAttribute(\\"class\\", cls);
    el._prevClass = cls;
  }
}
var klass = {
  create: updateClass,
  update: updateClass
};
const validDivisionCharRE = /[\\\\w).+\\\\-_$\\\\]]/;
function parseFilters(exp) {
  let inSingle = false;
  let inDouble = false;
  let inTemplateString = false;
  let inRegex = false;
  let curly = 0;
  let square = 0;
  let paren = 0;
  let lastFilterIndex = 0;
  let c, prev, i, expression, filters;
  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 39 && prev !== 92)
        inSingle = false;
    } else if (inDouble) {
      if (c === 34 && prev !== 92)
        inDouble = false;
    } else if (inTemplateString) {
      if (c === 96 && prev !== 92)
        inTemplateString = false;
    } else if (inRegex) {
      if (c === 47 && prev !== 92)
        inRegex = false;
    } else if (c === 124 && exp.charCodeAt(i + 1) !== 124 && exp.charCodeAt(i - 1) !== 124 && !curly && !square && !paren) {
      if (expression === void 0) {
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 34:
          inDouble = true;
          break;
        case 39:
          inSingle = true;
          break;
        case 96:
          inTemplateString = true;
          break;
        case 40:
          paren++;
          break;
        case 41:
          paren--;
          break;
        case 91:
          square++;
          break;
        case 93:
          square--;
          break;
        case 123:
          curly++;
          break;
        case 125:
          curly--;
          break;
      }
      if (c === 47) {
        let j = i - 1;
        let p;
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== \\" \\")
            break;
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }
  if (expression === void 0) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }
  function pushFilter() {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }
  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }
  return expression;
}
function wrapFilter(exp, filter) {
  const i = filter.indexOf(\\"(\\");
  if (i < 0) {
    return \`_f(\\"\${filter}\\")(\${exp})\`;
  } else {
    const name = filter.slice(0, i);
    const args = filter.slice(i + 1);
    return \`_f(\\"\${name}\\")(\${exp}\${args !== \\")\\" ? \\",\\" + args : args}\`;
  }
}
function baseWarn(msg, range2) {
  console.error(\`[Vue compiler]: \${msg}\`);
}
function pluckModuleFunction(modules2, key) {
  return modules2 ? modules2.map((m) => m[key]).filter((_) => _) : [];
}
function addProp(el, name, value, range2, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({name, value, dynamic}, range2));
  el.plain = false;
}
function addAttr(el, name, value, range2, dynamic) {
  const attrs2 = dynamic ? el.dynamicAttrs || (el.dynamicAttrs = []) : el.attrs || (el.attrs = []);
  attrs2.push(rangeSetItem({name, value, dynamic}, range2));
  el.plain = false;
}
function addRawAttr(el, name, value, range2) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({name, value}, range2));
}
function addDirective(el, name, rawName, value, arg, isDynamicArg, modifiers, range2) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name,
    rawName,
    value,
    arg,
    isDynamicArg,
    modifiers
  }, range2));
  el.plain = false;
}
function prependModifierMarker(symbol, name, dynamic) {
  return dynamic ? \`_p(\${name},\\"\${symbol}\\")\` : symbol + name;
}
function addHandler(el, name, value, modifiers, important, warn2, range2, dynamic) {
  modifiers = modifiers || emptyObject;
  if (warn2 && modifiers.prevent && modifiers.passive) {
    warn2(\\"passive and prevent can't be used together. Passive handler can't prevent default event.\\", range2);
  }
  if (modifiers.right) {
    if (dynamic) {
      name = \`(\${name})==='click'?'contextmenu':(\${name})\`;
    } else if (name === \\"click\\") {
      name = \\"contextmenu\\";
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = \`(\${name})==='click'?'mouseup':(\${name})\`;
    } else if (name === \\"click\\") {
      name = \\"mouseup\\";
    }
  }
  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker(\\"!\\", name, dynamic);
  }
  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker(\\"~\\", name, dynamic);
  }
  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker(\\"&\\", name, dynamic);
  }
  let events2;
  if (modifiers.native) {
    delete modifiers.native;
    events2 = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events2 = el.events || (el.events = {});
  }
  const newHandler = rangeSetItem({value: value.trim(), dynamic}, range2);
  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }
  const handlers = events2[name];
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events2[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events2[name] = newHandler;
  }
  el.plain = false;
}
function getRawBindingAttr(el, name) {
  return el.rawAttrsMap[\\":\\" + name] || el.rawAttrsMap[\\"v-bind:\\" + name] || el.rawAttrsMap[name];
}
function getBindingAttr(el, name, getStatic) {
  const dynamicValue = getAndRemoveAttr(el, \\":\\" + name) || getAndRemoveAttr(el, \\"v-bind:\\" + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue);
  } else if (getStatic !== false) {
    const staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue);
    }
  }
}
function getAndRemoveAttr(el, name, removeFromMap) {
  let val;
  if ((val = el.attrsMap[name]) != null) {
    const list = el.attrsList;
    for (let i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break;
      }
    }
  }
  if (removeFromMap) {
    delete el.attrsMap[name];
  }
  return val;
}
function getAndRemoveAttrByRegex(el, name) {
  const list = el.attrsList;
  for (let i = 0, l = list.length; i < l; i++) {
    const attr = list[i];
    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr;
    }
  }
}
function rangeSetItem(item, range2) {
  if (range2) {
    if (range2.start != null) {
      item.start = range2.start;
    }
    if (range2.end != null) {
      item.end = range2.end;
    }
  }
  return item;
}
function genComponentModel(el, value, modifiers) {
  const {number, trim} = modifiers || {};
  const baseValueExpression = \\"$$v\\";
  let valueExpression = baseValueExpression;
  if (trim) {
    valueExpression = \`(typeof \${baseValueExpression} === 'string'? \${baseValueExpression}.trim(): \${baseValueExpression})\`;
  }
  if (number) {
    valueExpression = \`_n(\${valueExpression})\`;
  }
  const assignment = genAssignmentCode(value, valueExpression);
  el.model = {
    value: \`(\${value})\`,
    expression: JSON.stringify(value),
    callback: \`function (\${baseValueExpression}) {\${assignment}}\`
  };
}
function genAssignmentCode(value, assignment) {
  const res = parseModel(value);
  if (res.key === null) {
    return \`\${value}=\${assignment}\`;
  } else {
    return \`$set(\${res.exp}, \${res.key}, \${assignment})\`;
  }
}
let len;
let str;
let chr;
let index$1;
let expressionPos;
let expressionEndPos;
function parseModel(val) {
  val = val.trim();
  len = val.length;
  if (val.indexOf(\\"[\\") < 0 || val.lastIndexOf(\\"]\\") < len - 1) {
    index$1 = val.lastIndexOf(\\".\\");
    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '\\"' + val.slice(index$1 + 1) + '\\"'
      };
    } else {
      return {
        exp: val,
        key: null
      };
    }
  }
  str = val;
  index$1 = expressionPos = expressionEndPos = 0;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 91) {
      parseBracket(chr);
    }
  }
  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  };
}
function next() {
  return str.charCodeAt(++index$1);
}
function eof() {
  return index$1 >= len;
}
function isStringStart(chr2) {
  return chr2 === 34 || chr2 === 39;
}
function parseBracket(chr2) {
  let inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr2 = next();
    if (isStringStart(chr2)) {
      parseString(chr2);
      continue;
    }
    if (chr2 === 91)
      inBracket++;
    if (chr2 === 93)
      inBracket--;
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break;
    }
  }
}
function parseString(chr2) {
  const stringQuote = chr2;
  while (!eof()) {
    chr2 = next();
    if (chr2 === stringQuote) {
      break;
    }
  }
}
let warn$1;
const RANGE_TOKEN = \\"__r\\";
const CHECKBOX_RADIO_TOKEN = \\"__c\\";
function model(el, dir, _warn) {
  warn$1 = _warn;
  const value = dir.value;
  const modifiers = dir.modifiers;
  const tag = el.tag;
  const type = el.attrsMap.type;
  {
    if (tag === \\"input\\" && type === \\"file\\") {
      warn$1(\`<\${el.tag} v-model=\\"\${value}\\" type=\\"file\\">:
File inputs are read only. Use a v-on:change listener instead.\`, el.rawAttrsMap[\\"v-model\\"]);
    }
  }
  if (el.component) {
    genComponentModel(el, value, modifiers);
    return false;
  } else if (tag === \\"select\\") {
    genSelect(el, value, modifiers);
  } else if (tag === \\"input\\" && type === \\"checkbox\\") {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === \\"input\\" && type === \\"radio\\") {
    genRadioModel(el, value, modifiers);
  } else if (tag === \\"input\\" || tag === \\"textarea\\") {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    return false;
  } else {
    warn$1(\`<\${el.tag} v-model=\\"\${value}\\">: v-model is not supported on this element type. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.\`, el.rawAttrsMap[\\"v-model\\"]);
  }
  return true;
}
function genCheckboxModel(el, value, modifiers) {
  const number = modifiers && modifiers.number;
  const valueBinding = getBindingAttr(el, \\"value\\") || \\"null\\";
  const trueValueBinding = getBindingAttr(el, \\"true-value\\") || \\"true\\";
  const falseValueBinding = getBindingAttr(el, \\"false-value\\") || \\"false\\";
  addProp(el, \\"checked\\", \`Array.isArray(\${value})?_i(\${value},\${valueBinding})>-1\` + (trueValueBinding === \\"true\\" ? \`:(\${value})\` : \`:_q(\${value},\${trueValueBinding})\`));
  addHandler(el, \\"change\\", \`var $$a=\${value},$$el=$event.target,$$c=$$el.checked?(\${trueValueBinding}):(\${falseValueBinding});if(Array.isArray($$a)){var $$v=\${number ? \\"_n(\\" + valueBinding + \\")\\" : valueBinding},$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(\${genAssignmentCode(value, \\"$$a.concat([$$v])\\")})}else{$$i>-1&&(\${genAssignmentCode(value, \\"$$a.slice(0,$$i).concat($$a.slice($$i+1))\\")})}}else{\${genAssignmentCode(value, \\"$$c\\")}}\`, null, true);
}
function genRadioModel(el, value, modifiers) {
  const number = modifiers && modifiers.number;
  let valueBinding = getBindingAttr(el, \\"value\\") || \\"null\\";
  valueBinding = number ? \`_n(\${valueBinding})\` : valueBinding;
  addProp(el, \\"checked\\", \`_q(\${value},\${valueBinding})\`);
  addHandler(el, \\"change\\", genAssignmentCode(value, valueBinding), null, true);
}
function genSelect(el, value, modifiers) {
  const number = modifiers && modifiers.number;
  const selectedVal = \`Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = \\"_value\\" in o ? o._value : o.value;return \${number ? \\"_n(val)\\" : \\"val\\"}})\`;
  const assignment = \\"$event.target.multiple ? $$selectedVal : $$selectedVal[0]\\";
  let code = \`var $$selectedVal = \${selectedVal};\`;
  code = \`\${code} \${genAssignmentCode(value, assignment)}\`;
  addHandler(el, \\"change\\", code, null, true);
}
function genDefaultModel(el, value, modifiers) {
  const type = el.attrsMap.type;
  {
    const value2 = el.attrsMap[\\"v-bind:value\\"] || el.attrsMap[\\":value\\"];
    const typeBinding = el.attrsMap[\\"v-bind:type\\"] || el.attrsMap[\\":type\\"];
    if (value2 && !typeBinding) {
      const binding = el.attrsMap[\\"v-bind:value\\"] ? \\"v-bind:value\\" : \\":value\\";
      warn$1(\`\${binding}=\\"\${value2}\\" conflicts with v-model on the same element because the latter already expands to a value binding internally\`, el.rawAttrsMap[binding]);
    }
  }
  const {lazy, number, trim} = modifiers || {};
  const needCompositionGuard = !lazy && type !== \\"range\\";
  const event = lazy ? \\"change\\" : type === \\"range\\" ? RANGE_TOKEN : \\"input\\";
  let valueExpression = \\"$event.target.value\\";
  if (trim) {
    valueExpression = \`$event.target.value.trim()\`;
  }
  if (number) {
    valueExpression = \`_n(\${valueExpression})\`;
  }
  let code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = \`if($event.target.composing)return;\${code}\`;
  }
  addProp(el, \\"value\\", \`(\${value})\`);
  addHandler(el, event, code, null, true);
  if (trim || number) {
    addHandler(el, \\"blur\\", \\"$forceUpdate()\\");
  }
}
function normalizeEvents(on2) {
  if (isDef(on2[RANGE_TOKEN])) {
    const event = isIE ? \\"change\\" : \\"input\\";
    on2[event] = [].concat(on2[RANGE_TOKEN], on2[event] || []);
    delete on2[RANGE_TOKEN];
  }
  if (isDef(on2[CHECKBOX_RADIO_TOKEN])) {
    on2.change = [].concat(on2[CHECKBOX_RADIO_TOKEN], on2.change || []);
    delete on2[CHECKBOX_RADIO_TOKEN];
  }
}
let target$1;
function createOnceHandler$1(event, handler, capture) {
  const _target = target$1;
  return function onceHandler() {
    const res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  };
}
const useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);
function add$1(name, handler, capture, passive) {
  if (useMicrotaskFix) {
    const attachedTimestamp = currentFlushTimestamp;
    const original = handler;
    handler = original._wrapper = function(e) {
      if (e.target === e.currentTarget || e.timeStamp >= attachedTimestamp || e.timeStamp <= 0 || e.target.ownerDocument !== document) {
        return original.apply(this, arguments);
      }
    };
  }
  target$1.addEventListener(name, handler, supportsPassive ? {capture, passive} : capture);
}
function remove$2(name, handler, capture, _target) {
  (_target || target$1).removeEventListener(name, handler._wrapper || handler, capture);
}
function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }
  const on2 = vnode.data.on || {};
  const oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on2);
  updateListeners(on2, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = void 0;
}
var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
let svgContainer;
function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }
  let key, cur;
  const elm = vnode.elm;
  const oldProps = oldVnode.data.domProps || {};
  let props2 = vnode.data.domProps || {};
  if (isDef(props2.__ob__)) {
    props2 = vnode.data.domProps = extend({}, props2);
  }
  for (key in oldProps) {
    if (!(key in props2)) {
      elm[key] = \\"\\";
    }
  }
  for (key in props2) {
    cur = props2[key];
    if (key === \\"textContent\\" || key === \\"innerHTML\\") {
      if (vnode.children)
        vnode.children.length = 0;
      if (cur === oldProps[key])
        continue;
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }
    if (key === \\"value\\" && elm.tagName !== \\"PROGRESS\\") {
      elm._value = cur;
      const strCur = isUndef(cur) ? \\"\\" : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === \\"innerHTML\\" && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      svgContainer = svgContainer || document.createElement(\\"div\\");
      svgContainer.innerHTML = \`<svg>\${cur}</svg>\`;
      const svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (cur !== oldProps[key]) {
      try {
        elm[key] = cur;
      } catch (e) {
      }
    }
  }
}
function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === \\"OPTION\\" || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}
function isNotInFocusAndDirty(elm, checkVal) {
  let notInFocus = true;
  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {
  }
  return notInFocus && elm.value !== checkVal;
}
function isDirtyWithModifiers(elm, newVal) {
  const value = elm.value;
  const modifiers = elm._vModifiers;
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }
  return value !== newVal;
}
var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};
const parseStyleText = cached(function(cssText) {
  const res = {};
  const listDelimiter = /;(?![^(]*\\\\))/g;
  const propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function(item) {
    if (item) {
      const tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
});
function normalizeStyleData(data) {
  const style2 = normalizeStyleBinding(data.style);
  return data.staticStyle ? extend(data.staticStyle, style2) : style2;
}
function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }
  if (typeof bindingStyle === \\"string\\") {
    return parseStyleText(bindingStyle);
  }
  return bindingStyle;
}
function getStyle(vnode, checkChild) {
  const res = {};
  let styleData;
  if (checkChild) {
    let childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }
  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }
  let parentNode2 = vnode;
  while (parentNode2 = parentNode2.parent) {
    if (parentNode2.data && (styleData = normalizeStyleData(parentNode2.data))) {
      extend(res, styleData);
    }
  }
  return res;
}
const cssVarRE = /^--/;
const importantRE = /\\\\s*!important$/;
const setProp = (el, name, val) => {
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, \\"\\"), \\"important\\");
  } else {
    const normalizedName = normalize(name);
    if (Array.isArray(val)) {
      for (let i = 0, len2 = val.length; i < len2; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};
const vendorNames = [\\"Webkit\\", \\"Moz\\", \\"ms\\"];
let emptyStyle;
const normalize = cached(function(prop) {
  emptyStyle = emptyStyle || document.createElement(\\"div\\").style;
  prop = camelize(prop);
  if (prop !== \\"filter\\" && prop in emptyStyle) {
    return prop;
  }
  const capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (let i = 0; i < vendorNames.length; i++) {
    const name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name;
    }
  }
});
function updateStyle(oldVnode, vnode) {
  const data = vnode.data;
  const oldData = oldVnode.data;
  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }
  let cur, name;
  const el = vnode.elm;
  const oldStaticStyle = oldData.staticStyle;
  const oldStyleBinding = oldData.normalizedStyle || oldData.style || {};
  const oldStyle = oldStaticStyle || oldStyleBinding;
  const style2 = normalizeStyleBinding(vnode.data.style) || {};
  vnode.data.normalizedStyle = isDef(style2.__ob__) ? extend({}, style2) : style2;
  const newStyle = getStyle(vnode, true);
  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, \\"\\");
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      setProp(el, name, cur == null ? \\"\\" : cur);
    }
  }
}
var style = {
  create: updateStyle,
  update: updateStyle
};
const whitespaceRE = /\\\\s+/;
function addClass(el, cls) {
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  if (el.classList) {
    if (cls.indexOf(\\" \\") > -1) {
      cls.split(whitespaceRE).forEach((c) => el.classList.add(c));
    } else {
      el.classList.add(cls);
    }
  } else {
    const cur = \` \${el.getAttribute(\\"class\\") || \\"\\"} \`;
    if (cur.indexOf(\\" \\" + cls + \\" \\") < 0) {
      el.setAttribute(\\"class\\", (cur + cls).trim());
    }
  }
}
function removeClass(el, cls) {
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  if (el.classList) {
    if (cls.indexOf(\\" \\") > -1) {
      cls.split(whitespaceRE).forEach((c) => el.classList.remove(c));
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute(\\"class\\");
    }
  } else {
    let cur = \` \${el.getAttribute(\\"class\\") || \\"\\"} \`;
    const tar = \\" \\" + cls + \\" \\";
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, \\" \\");
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute(\\"class\\", cur);
    } else {
      el.removeAttribute(\\"class\\");
    }
  }
}
function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  if (typeof def$$1 === \\"object\\") {
    const res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || \\"v\\"));
    }
    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === \\"string\\") {
    return autoCssTransition(def$$1);
  }
}
const autoCssTransition = cached((name) => {
  return {
    enterClass: \`\${name}-enter\`,
    enterToClass: \`\${name}-enter-to\`,
    enterActiveClass: \`\${name}-enter-active\`,
    leaveClass: \`\${name}-leave\`,
    leaveToClass: \`\${name}-leave-to\`,
    leaveActiveClass: \`\${name}-leave-active\`
  };
});
const hasTransition = inBrowser && !isIE9;
const TRANSITION = \\"transition\\";
const ANIMATION = \\"animation\\";
let transitionProp = \\"transition\\";
let transitionEndEvent = \\"transitionend\\";
let animationProp = \\"animation\\";
let animationEndEvent = \\"animationend\\";
if (hasTransition) {
  if (window.ontransitionend === void 0 && window.onwebkittransitionend !== void 0) {
    transitionProp = \\"WebkitTransition\\";
    transitionEndEvent = \\"webkitTransitionEnd\\";
  }
  if (window.onanimationend === void 0 && window.onwebkitanimationend !== void 0) {
    animationProp = \\"WebkitAnimation\\";
    animationEndEvent = \\"webkitAnimationEnd\\";
  }
}
const raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout : (fn) => fn();
function nextFrame(fn) {
  raf(() => {
    raf(fn);
  });
}
function addTransitionClass(el, cls) {
  const transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}
function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}
function whenTransitionEnds(el, expectedType, cb) {
  const {type, timeout, propCount} = getTransitionInfo(el, expectedType);
  if (!type)
    return cb();
  const event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  let ended = 0;
  const end = () => {
    el.removeEventListener(event, onEnd);
    cb();
  };
  const onEnd = (e) => {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}
const transformRE = /\\\\b(transform|all)(,|$)/;
function getTransitionInfo(el, expectedType) {
  const styles = window.getComputedStyle(el);
  const transitionDelays = (styles[transitionProp + \\"Delay\\"] || \\"\\").split(\\", \\");
  const transitionDurations = (styles[transitionProp + \\"Duration\\"] || \\"\\").split(\\", \\");
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = (styles[animationProp + \\"Delay\\"] || \\"\\").split(\\", \\");
  const animationDurations = (styles[animationProp + \\"Duration\\"] || \\"\\").split(\\", \\");
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + \\"Property\\"]);
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max.apply(null, durations.map((d, i) => {
    return toMs(d) + toMs(delays[i]);
  }));
}
function toMs(s) {
  return Number(s.slice(0, -1).replace(\\",\\", \\".\\")) * 1e3;
}
function enter(vnode, toggleDisplay) {
  const el = vnode.elm;
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }
  const data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return;
  }
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }
  const {
    css,
    type,
    enterClass,
    enterToClass,
    enterActiveClass,
    appearClass,
    appearToClass,
    appearActiveClass,
    beforeEnter,
    enter: enter2,
    afterEnter,
    enterCancelled,
    beforeAppear,
    appear,
    afterAppear,
    appearCancelled,
    duration
  } = data;
  let context = activeInstance;
  let transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }
  const isAppear = !context._isMounted || !vnode.isRootInsert;
  if (isAppear && !appear && appear !== \\"\\") {
    return;
  }
  const startClass = isAppear && appearClass ? appearClass : enterClass;
  const activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  const toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  const beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  const enterHook = isAppear ? typeof appear === \\"function\\" ? appear : enter2 : enter2;
  const afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  const enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  const explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);
  if (explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, \\"enter\\", vnode);
  }
  const expectsCSS = css !== false && !isIE9;
  const userWantsControl = getHookArgumentsLength(enterHook);
  const cb = el._enterCb = once(() => {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });
  if (!vnode.data.show) {
    mergeVNodeHook(vnode, \\"insert\\", () => {
      const parent = el.parentNode;
      const pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(() => {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }
  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }
  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}
function leave(vnode, rm) {
  const el = vnode.elm;
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }
  const data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  if (isDef(el._leaveCb)) {
    return;
  }
  const {
    css,
    type,
    leaveClass,
    leaveToClass,
    leaveActiveClass,
    beforeLeave,
    leave: leave2,
    afterLeave,
    leaveCancelled,
    delayLeave,
    duration
  } = data;
  const expectsCSS = css !== false && !isIE9;
  const userWantsControl = getHookArgumentsLength(leave2);
  const explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);
  if (isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, \\"leave\\", vnode);
  }
  const cb = el._leaveCb = once(() => {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });
  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }
  function performLeave() {
    if (cb.cancelled) {
      return;
    }
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(() => {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave2 && leave2(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}
function checkDuration(val, name, vnode) {
  if (typeof val !== \\"number\\") {
    warn(\`<transition> explicit \${name} duration is not a valid number - got \${JSON.stringify(val)}.\`, vnode.context);
  } else if (isNaN(val)) {
    warn(\`<transition> explicit \${name} duration is NaN - the duration expression might be incorrect.\`, vnode.context);
  }
}
function isValidDuration(val) {
  return typeof val === \\"number\\" && !isNaN(val);
}
function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }
  const invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}
function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}
var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove(vnode, rm) {
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};
var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];
const modules = platformModules.concat(baseModules);
const patch = createPatchFunction({nodeOps, modules});
if (isIE9) {
  document.addEventListener(\\"selectionchange\\", () => {
    const el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, \\"input\\");
    }
  });
}
const directive = {
  inserted(el, binding, vnode, oldVnode) {
    if (vnode.tag === \\"select\\") {
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, \\"postpatch\\", () => {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === \\"textarea\\" || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener(\\"compositionstart\\", onCompositionStart);
        el.addEventListener(\\"compositionend\\", onCompositionEnd);
        el.addEventListener(\\"change\\", onCompositionEnd);
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated(el, binding, vnode) {
    if (vnode.tag === \\"select\\") {
      setSelected(el, binding, vnode.context);
      const prevOptions = el._vOptions;
      const curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some((o, i) => !looseEqual(o, prevOptions[i]))) {
        const needReset = el.multiple ? binding.value.some((v) => hasNoMatchingOption(v, curOptions)) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, \\"change\\");
        }
      }
    }
  }
};
function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  if (isIE || isEdge) {
    setTimeout(() => {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}
function actuallySetSelected(el, binding, vm) {
  const value = binding.value;
  const isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    warn(\`<select multiple v-model=\\"\${binding.expression}\\"> expects an Array value for its binding, but got \${Object.prototype.toString.call(value).slice(8, -1)}\`, vm);
    return;
  }
  let selected, option;
  for (let i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return;
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}
function hasNoMatchingOption(value, options) {
  return options.every((o) => !looseEqual(o, value));
}
function getValue(option) {
  return \\"_value\\" in option ? option._value : option.value;
}
function onCompositionStart(e) {
  e.target.composing = true;
}
function onCompositionEnd(e) {
  if (!e.target.composing)
    return;
  e.target.composing = false;
  trigger(e.target, \\"input\\");
}
function trigger(el, type) {
  const e = document.createEvent(\\"HTMLEvents\\");
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}
var show = {
  bind(el, {value}, vnode) {
    vnode = locateNode(vnode);
    const transition$$1 = vnode.data && vnode.data.transition;
    const originalDisplay = el.__vOriginalDisplay = el.style.display === \\"none\\" ? \\"\\" : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, () => {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : \\"none\\";
    }
  },
  update(el, {value, oldValue}, vnode) {
    if (!value === !oldValue)
      return;
    vnode = locateNode(vnode);
    const transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, () => {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, () => {
          el.style.display = \\"none\\";
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : \\"none\\";
    }
  },
  unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};
var platformDirectives = {
  model: directive,
  show
};
const transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};
function getRealChild(vnode) {
  const compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}
function extractTransitionData(comp) {
  const data = {};
  const options = comp.$options;
  for (const key in options.propsData) {
    data[key] = comp[key];
  }
  const listeners = options._parentListeners;
  for (const key in listeners) {
    data[camelize(key)] = listeners[key];
  }
  return data;
}
function placeholder(h, rawChild) {
  if (/\\\\d-keep-alive$/.test(rawChild.tag)) {
    return h(\\"keep-alive\\", {
      props: rawChild.componentOptions.propsData
    });
  }
}
function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}
function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}
const isNotTextNode = (c) => c.tag || isAsyncPlaceholder(c);
const isVShowDirective = (d) => d.name === \\"show\\";
var Transition = {
  name: \\"transition\\",
  props: transitionProps,
  abstract: true,
  render(h) {
    let children = this.$slots.default;
    if (!children) {
      return;
    }
    children = children.filter(isNotTextNode);
    if (!children.length) {
      return;
    }
    if (children.length > 1) {
      warn(\\"<transition> can only be used on a single element. Use <transition-group> for lists.\\", this.$parent);
    }
    const mode = this.mode;
    if (mode && mode !== \\"in-out\\" && mode !== \\"out-in\\") {
      warn(\\"invalid <transition> mode: \\" + mode, this.$parent);
    }
    const rawChild = children[0];
    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    }
    const child = getRealChild(rawChild);
    if (!child) {
      return rawChild;
    }
    if (this._leaving) {
      return placeholder(h, rawChild);
    }
    const id = \`__transition-\${this._uid}-\`;
    child.key = child.key == null ? child.isComment ? id + \\"comment\\" : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    const data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    const oldRawChild = this._vnode;
    const oldChild = getRealChild(oldRawChild);
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }
    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      const oldData = oldChild.data.transition = extend({}, data);
      if (mode === \\"out-in\\") {
        this._leaving = true;
        mergeVNodeHook(oldData, \\"afterLeave\\", () => {
          this._leaving = false;
          this.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === \\"in-out\\") {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }
        let delayedLeave;
        const performLeave = () => {
          delayedLeave();
        };
        mergeVNodeHook(data, \\"afterEnter\\", performLeave);
        mergeVNodeHook(data, \\"enterCancelled\\", performLeave);
        mergeVNodeHook(oldData, \\"delayLeave\\", (leave2) => {
          delayedLeave = leave2;
        });
      }
    }
    return rawChild;
  }
};
const props = extend({
  tag: String,
  moveClass: String
}, transitionProps);
delete props.mode;
var TransitionGroup = {
  props,
  beforeMount() {
    const update = this._update;
    this._update = (vnode, hydrating) => {
      const restoreActiveInstance = setActiveInstance(this);
      this.__patch__(this._vnode, this.kept, false, true);
      this._vnode = this.kept;
      restoreActiveInstance();
      update.call(this, vnode, hydrating);
    };
  },
  render(h) {
    const tag = this.tag || this.$vnode.data.tag || \\"span\\";
    const map = Object.create(null);
    const prevChildren = this.prevChildren = this.children;
    const rawChildren = this.$slots.default || [];
    const children = this.children = [];
    const transitionData = extractTransitionData(this);
    for (let i = 0; i < rawChildren.length; i++) {
      const c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf(\\"__vlist\\") !== 0) {
          children.push(c);
          map[c.key] = c;
          (c.data || (c.data = {})).transition = transitionData;
        } else {
          const opts = c.componentOptions;
          const name = opts ? opts.Ctor.options.name || opts.tag || \\"\\" : c.tag;
          warn(\`<transition-group> children must be keyed: <\${name}>\`);
        }
      }
    }
    if (prevChildren) {
      const kept = [];
      const removed = [];
      for (let i = 0; i < prevChildren.length; i++) {
        const c = prevChildren[i];
        c.data.transition = transitionData;
        c.data.pos = c.elm.getBoundingClientRect();
        if (map[c.key]) {
          kept.push(c);
        } else {
          removed.push(c);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }
    return h(tag, null, children);
  },
  updated() {
    const children = this.prevChildren;
    const moveClass = this.moveClass || (this.name || \\"v\\") + \\"-move\\";
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    }
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);
    this._reflow = document.body.offsetHeight;
    children.forEach((c) => {
      if (c.data.moved) {
        const el = c.elm;
        const s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = \\"\\";
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (e && e.target !== el) {
            return;
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },
  methods: {
    hasMove(el, moveClass) {
      if (!hasTransition) {
        return false;
      }
      if (this._hasMove) {
        return this._hasMove;
      }
      const clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach((cls) => {
          removeClass(clone, cls);
        });
      }
      addClass(clone, moveClass);
      clone.style.display = \\"none\\";
      this.$el.appendChild(clone);
      const info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};
function callPendingCbs(c) {
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}
function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}
function applyTranslation(c) {
  const oldPos = c.data.pos;
  const newPos = c.data.newPos;
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    const s = c.elm.style;
    s.transform = s.WebkitTransform = \`translate(\${dx}px,\${dy}px)\`;
    s.transitionDuration = \\"0s\\";
  }
}
var platformComponents = {
  Transition,
  TransitionGroup
};
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);
Vue.prototype.__patch__ = inBrowser ? patch : noop;
Vue.prototype.$mount = function(el, hydrating) {
  el = el && inBrowser ? query(el) : void 0;
  return mountComponent(this, el, hydrating);
};
if (inBrowser) {
  setTimeout(() => {
    if (config.devtools) {
      if (devtools) {
        devtools.emit(\\"init\\", Vue);
      } else {
        console[console.info ? \\"info\\" : \\"log\\"](\\"Download the Vue Devtools extension for a better development experience:https://github.com/vuejs/vue-devtools\\");
      }
    }
    if (config.productionTip !== false && typeof console !== \\"undefined\\") {
      console[console.info ? \\"info\\" : \\"log\\"](\`You are running Vue in development mode.
Make sure to turn on production mode when deploying for production.
See more tips at https://vuejs.org/guide/deployment.html\`);
    }
  }, 0);
}
const defaultTagRE = /\\\\{\\\\{((?:.|\\\\r?)+?)\\\\}\\\\}/g;
const regexEscapeRE = /[-.*+?^\${}()|[\\\\]\\\\/\\\\\\\\]/g;
const buildRegex = cached((delimiters2) => {
  const open = delimiters2[0].replace(regexEscapeRE, \\"\\\\\\\\$&\\");
  const close = delimiters2[1].replace(regexEscapeRE, \\"\\\\\\\\$&\\");
  return new RegExp(open + \\"((?:.|\\\\)+?)\\" + close, \\"g\\");
});
function parseText(text2, delimiters2) {
  const tagRE = delimiters2 ? buildRegex(delimiters2) : defaultTagRE;
  if (!tagRE.test(text2)) {
    return;
  }
  const tokens = [];
  const rawTokens = [];
  let lastIndex = tagRE.lastIndex = 0;
  let match, index2, tokenValue;
  while (match = tagRE.exec(text2)) {
    index2 = match.index;
    if (index2 > lastIndex) {
      rawTokens.push(tokenValue = text2.slice(lastIndex, index2));
      tokens.push(JSON.stringify(tokenValue));
    }
    const exp = parseFilters(match[1].trim());
    tokens.push(\`_s(\${exp})\`);
    rawTokens.push({\\"@binding\\": exp});
    lastIndex = index2 + match[0].length;
  }
  if (lastIndex < text2.length) {
    rawTokens.push(tokenValue = text2.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }
  return {
    expression: tokens.join(\\"+\\"),
    tokens: rawTokens
  };
}
function transformNode(el, options) {
  const warn2 = options.warn || baseWarn;
  const staticClass = getAndRemoveAttr(el, \\"class\\");
  if (staticClass) {
    const res = parseText(staticClass, options.delimiters);
    if (res) {
      warn2(\`class=\\"\${staticClass}\\": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div class=\\"{{ val }}\\">, use <div :class=\\"val\\">.\`, el.rawAttrsMap[\\"class\\"]);
    }
  }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  const classBinding = getBindingAttr(el, \\"class\\", false);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}
function genData(el) {
  let data = \\"\\";
  if (el.staticClass) {
    data += \`staticClass:\${el.staticClass},\`;
  }
  if (el.classBinding) {
    data += \`class:\${el.classBinding},\`;
  }
  return data;
}
var klass$1 = {
  staticKeys: [\\"staticClass\\"],
  transformNode,
  genData
};
function transformNode$1(el, options) {
  const warn2 = options.warn || baseWarn;
  const staticStyle = getAndRemoveAttr(el, \\"style\\");
  if (staticStyle) {
    {
      const res = parseText(staticStyle, options.delimiters);
      if (res) {
        warn2(\`style=\\"\${staticStyle}\\": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div style=\\"{{ val }}\\">, use <div :style=\\"val\\">.\`, el.rawAttrsMap[\\"style\\"]);
      }
    }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }
  const styleBinding = getBindingAttr(el, \\"style\\", false);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}
function genData$1(el) {
  let data = \\"\\";
  if (el.staticStyle) {
    data += \`staticStyle:\${el.staticStyle},\`;
  }
  if (el.styleBinding) {
    data += \`style:(\${el.styleBinding}),\`;
  }
  return data;
}
var style$1 = {
  staticKeys: [\\"staticStyle\\"],
  transformNode: transformNode$1,
  genData: genData$1
};
let decoder;
var he = {
  decode(html2) {
    decoder = decoder || document.createElement(\\"div\\");
    decoder.innerHTML = html2;
    return decoder.textContent;
  }
};
const isUnaryTag = makeMap(\\"area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr\\");
const canBeLeftOpenTag = makeMap(\\"colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source\\");
const isNonPhrasingTag = makeMap(\\"address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track\\");
const attribute = /^\\\\s*([^\\\\s\\"'<>\\\\/=]+)(?:\\\\s*(=)\\\\s*(?:\\"([^\\"]*)\\"+|'([^']*)'+|([^\\\\s\\"'=<>\`]+)))?/;
const dynamicArgAttribute = /^\\\\s*((?:v-[\\\\w-]+:|@|:|#)\\\\[[^=]+\\\\][^\\\\s\\"'<>\\\\/=]*)(?:\\\\s*(=)\\\\s*(?:\\"([^\\"]*)\\"+|'([^']*)'+|([^\\\\s\\"'=<>\`]+)))?/;
const ncname = \`[a-zA-Z_][\\\\\\\\-\\\\\\\\.0-9_a-zA-Z\${unicodeRegExp.source}]*\`;
const qnameCapture = \`((?:\${ncname}\\\\\\\\:)?\${ncname})\`;
const startTagOpen = new RegExp(\`^<\${qnameCapture}\`);
const startTagClose = /^\\\\s*(\\\\/?)>/;
const endTag = new RegExp(\`^<\\\\\\\\/\${qnameCapture}[^>]*>\`);
const doctype = /^<!DOCTYPE [^>]+>/i;
const comment = /^<!\\\\--/;
const conditionalComment = /^<!\\\\[/;
const isPlainTextElement = makeMap(\\"script,style,textarea\\", true);
const reCache = {};
const decodingMap = {
  \\"&lt;\\": \\"<\\",
  \\"&gt;\\": \\">\\",
  \\"&quot;\\": '\\"',
  \\"&amp;\\": \\"&\\",
  \\"&#10;\\": \\"\\",
  \\"&#9;\\": \\"	\\",
  \\"&#39;\\": \\"'\\"
};
const encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
const encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;
const isIgnoreNewlineTag = makeMap(\\"pre,textarea\\", true);
const shouldIgnoreFirstNewline = (tag, html2) => tag && isIgnoreNewlineTag(tag) && html2[0] === \\"\\";
function decodeAttr(value, shouldDecodeNewlines2) {
  const re = shouldDecodeNewlines2 ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, (match) => decodingMap[match]);
}
function parseHTML(html2, options) {
  const stack = [];
  const expectHTML = options.expectHTML;
  const isUnaryTag$$1 = options.isUnaryTag || no;
  const canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  let index2 = 0;
  let last, lastTag;
  while (html2) {
    last = html2;
    if (!lastTag || !isPlainTextElement(lastTag)) {
      let textEnd = html2.indexOf(\\"<\\");
      if (textEnd === 0) {
        if (comment.test(html2)) {
          const commentEnd = html2.indexOf(\\"-->\\");
          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html2.substring(4, commentEnd), index2, index2 + commentEnd + 3);
            }
            advance(commentEnd + 3);
            continue;
          }
        }
        if (conditionalComment.test(html2)) {
          const conditionalEnd = html2.indexOf(\\"]>\\");
          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue;
          }
        }
        const doctypeMatch = html2.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue;
        }
        const endTagMatch = html2.match(endTag);
        if (endTagMatch) {
          const curIndex = index2;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index2);
          continue;
        }
        const startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html2)) {
            advance(1);
          }
          continue;
        }
      }
      let text2, rest, next2;
      if (textEnd >= 0) {
        rest = html2.slice(textEnd);
        while (!endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest)) {
          next2 = rest.indexOf(\\"<\\", 1);
          if (next2 < 0)
            break;
          textEnd += next2;
          rest = html2.slice(textEnd);
        }
        text2 = html2.substring(0, textEnd);
      }
      if (textEnd < 0) {
        text2 = html2;
      }
      if (text2) {
        advance(text2.length);
      }
      if (options.chars && text2) {
        options.chars(text2, index2 - text2.length, index2);
      }
    } else {
      let endTagLength = 0;
      const stackedTag = lastTag.toLowerCase();
      const reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp(\\"([\\\\\\\\s\\\\\\\\S]*?)(</\\" + stackedTag + \\"[^>]*>)\\", \\"i\\"));
      const rest = html2.replace(reStackedTag, function(all, text2, endTag2) {
        endTagLength = endTag2.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== \\"noscript\\") {
          text2 = text2.replace(/<!\\\\--([\\\\s\\\\S]*?)-->/g, \\"$1\\").replace(/<!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)]]>/g, \\"$1\\");
        }
        if (shouldIgnoreFirstNewline(stackedTag, text2)) {
          text2 = text2.slice(1);
        }
        if (options.chars) {
          options.chars(text2);
        }
        return \\"\\";
      });
      index2 += html2.length - rest.length;
      html2 = rest;
      parseEndTag(stackedTag, index2 - endTagLength, index2);
    }
    if (html2 === last) {
      options.chars && options.chars(html2);
      if (!stack.length && options.warn) {
        options.warn(\`Mal-formatted tag at end of template: \\"\${html2}\\"\`, {start: index2 + html2.length});
      }
      break;
    }
  }
  parseEndTag();
  function advance(n) {
    index2 += n;
    html2 = html2.substring(n);
  }
  function parseStartTag() {
    const start = html2.match(startTagOpen);
    if (start) {
      const match = {
        tagName: start[1],
        attrs: [],
        start: index2
      };
      advance(start[0].length);
      let end, attr;
      while (!(end = html2.match(startTagClose)) && (attr = html2.match(dynamicArgAttribute) || html2.match(attribute))) {
        attr.start = index2;
        advance(attr[0].length);
        attr.end = index2;
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index2;
        return match;
      }
    }
  }
  function handleStartTag(match) {
    const tagName2 = match.tagName;
    const unarySlash = match.unarySlash;
    if (expectHTML) {
      if (lastTag === \\"p\\" && isNonPhrasingTag(tagName2)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName2) && lastTag === tagName2) {
        parseEndTag(tagName2);
      }
    }
    const unary = isUnaryTag$$1(tagName2) || !!unarySlash;
    const l = match.attrs.length;
    const attrs2 = new Array(l);
    for (let i = 0; i < l; i++) {
      const args = match.attrs[i];
      const value = args[3] || args[4] || args[5] || \\"\\";
      const shouldDecodeNewlines2 = tagName2 === \\"a\\" && args[1] === \\"href\\" ? options.shouldDecodeNewlinesForHref : options.shouldDecodeNewlines;
      attrs2[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines2)
      };
      if (options.outputSourceRange) {
        attrs2[i].start = args.start + args[0].match(/^\\\\s*/).length;
        attrs2[i].end = args.end;
      }
    }
    if (!unary) {
      stack.push({tag: tagName2, lowerCasedTag: tagName2.toLowerCase(), attrs: attrs2, start: match.start, end: match.end});
      lastTag = tagName2;
    }
    if (options.start) {
      options.start(tagName2, attrs2, unary, match.start, match.end);
    }
  }
  function parseEndTag(tagName2, start, end) {
    let pos, lowerCasedTagName;
    if (start == null)
      start = index2;
    if (end == null)
      end = index2;
    if (tagName2) {
      lowerCasedTagName = tagName2.toLowerCase();
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break;
        }
      }
    } else {
      pos = 0;
    }
    if (pos >= 0) {
      for (let i = stack.length - 1; i >= pos; i--) {
        if (i > pos || !tagName2 && options.warn) {
          options.warn(\`tag <\${stack[i].tag}> has no matching end tag.\`, {start: stack[i].start, end: stack[i].end});
        }
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === \\"br\\") {
      if (options.start) {
        options.start(tagName2, [], true, start, end);
      }
    } else if (lowerCasedTagName === \\"p\\") {
      if (options.start) {
        options.start(tagName2, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName2, start, end);
      }
    }
  }
}
const onRE = /^@|^v-on:/;
const dirRE = /^v-|^@|^:|^#/;
const forAliasRE = /([\\\\s\\\\S]*?)\\\\s+(?:in|of)\\\\s+([\\\\s\\\\S]*)/;
const forIteratorRE = /,([^,\\\\}\\\\]]*)(?:,([^,\\\\}\\\\]]*))?$/;
const stripParensRE = /^\\\\(|\\\\)$/g;
const dynamicArgRE = /^\\\\[.*\\\\]$/;
const argRE = /:(.*)$/;
const bindRE = /^:|^\\\\.|^v-bind:/;
const modifierRE = /\\\\.[^.\\\\]]+(?=[^\\\\]]*$)/g;
const slotRE = /^v-slot(:|$)|^#/;
const lineBreakRE = /[]/;
const whitespaceRE$1 = /\\\\s+/g;
const invalidAttributeRE = /[\\\\s\\"'<>\\\\/=]/;
const decodeHTMLCached = cached(he.decode);
const emptySlotScopeToken = \`_empty_\`;
let warn$2;
let delimiters;
let transforms;
let preTransforms;
let postTransforms;
let platformIsPreTag;
let platformMustUseProp;
let platformGetTagNamespace;
let maybeComponent;
function createASTElement(tag, attrs2, parent) {
  return {
    type: 1,
    tag,
    attrsList: attrs2,
    attrsMap: makeAttrsMap(attrs2),
    rawAttrsMap: {},
    parent,
    children: []
  };
}
function parse(template, options) {
  warn$2 = options.warn || baseWarn;
  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  const isReservedTag2 = options.isReservedTag || no;
  maybeComponent = (el) => !!el.component || !isReservedTag2(el.tag);
  transforms = pluckModuleFunction(options.modules, \\"transformNode\\");
  preTransforms = pluckModuleFunction(options.modules, \\"preTransformNode\\");
  postTransforms = pluckModuleFunction(options.modules, \\"postTransformNode\\");
  delimiters = options.delimiters;
  const stack = [];
  const preserveWhitespace = options.preserveWhitespace !== false;
  const whitespaceOption = options.whitespace;
  let root;
  let currentParent;
  let inVPre = false;
  let inPre = false;
  let warned = false;
  function warnOnce(msg, range2) {
    if (!warned) {
      warned = true;
      warn$2(msg, range2);
    }
  }
  function closeElement(element) {
    trimEndingWhitespace(element);
    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    }
    if (!stack.length && element !== root) {
      if (root.if && (element.elseif || element.else)) {
        {
          checkRootConstraints(element);
        }
        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else {
        warnOnce(\`Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.\`, {start: element.start});
      }
    }
    if (currentParent && !element.forbidden) {
      if (element.elseif || element.else) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          const name = element.slotTarget || '\\"default\\"';
          (currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }
        currentParent.children.push(element);
        element.parent = currentParent;
      }
    }
    element.children = element.children.filter((c) => !c.slotScope);
    trimEndingWhitespace(element);
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
    for (let i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }
  function trimEndingWhitespace(el) {
    if (!inPre) {
      let lastNode;
      while ((lastNode = el.children[el.children.length - 1]) && lastNode.type === 3 && lastNode.text === \\" \\") {
        el.children.pop();
      }
    }
  }
  function checkRootConstraints(el) {
    if (el.tag === \\"slot\\" || el.tag === \\"template\\") {
      warnOnce(\`Cannot use <\${el.tag}> as component root element because it may contain multiple nodes.\`, {start: el.start});
    }
    if (el.attrsMap.hasOwnProperty(\\"v-for\\")) {
      warnOnce(\\"Cannot use v-for on stateful component root element because it renders multiple elements.\\", el.rawAttrsMap[\\"v-for\\"]);
    }
  }
  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start(tag, attrs2, unary, start, end) {
      const ns = currentParent && currentParent.ns || platformGetTagNamespace(tag);
      if (isIE && ns === \\"svg\\") {
        attrs2 = guardIESVGBug(attrs2);
      }
      let element = createASTElement(tag, attrs2, currentParent);
      if (ns) {
        element.ns = ns;
      }
      {
        if (options.outputSourceRange) {
          element.start = start;
          element.end = end;
          element.rawAttrsMap = element.attrsList.reduce((cumulated, attr) => {
            cumulated[attr.name] = attr;
            return cumulated;
          }, {});
        }
        attrs2.forEach((attr) => {
          if (invalidAttributeRE.test(attr.name)) {
            warn$2(\`Invalid dynamic argument expression: attribute names cannot contain spaces, quotes, <, >, / or =.\`, {
              start: attr.start + attr.name.indexOf(\`[\`),
              end: attr.start + attr.name.length
            });
          }
        });
      }
      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        warn$2(\`Templates should only be responsible for mapping the state to the UI. Avoid placing tags with side-effects in your templates, such as <\${tag}>, as they will not be parsed.\`, {start: element.start});
      }
      for (let i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }
      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        processFor(element);
        processIf(element);
        processOnce(element);
      }
      if (!root) {
        root = element;
        {
          checkRootConstraints(root);
        }
      }
      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },
    end(tag, start, end) {
      const element = stack[stack.length - 1];
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      if (options.outputSourceRange) {
        element.end = end;
      }
      closeElement(element);
    },
    chars(text2, start, end) {
      if (!currentParent) {
        {
          if (text2 === template) {
            warnOnce(\\"Component template requires a root element, rather than just text.\\", {start});
          } else if (text2 = text2.trim()) {
            warnOnce(\`text \\"\${text2}\\" outside root element will be ignored.\`, {start});
          }
        }
        return;
      }
      if (isIE && currentParent.tag === \\"textarea\\" && currentParent.attrsMap.placeholder === text2) {
        return;
      }
      const children = currentParent.children;
      if (inPre || text2.trim()) {
        text2 = isTextTag(currentParent) ? text2 : decodeHTMLCached(text2);
      } else if (!children.length) {
        text2 = \\"\\";
      } else if (whitespaceOption) {
        if (whitespaceOption === \\"condense\\") {
          text2 = lineBreakRE.test(text2) ? \\"\\" : \\" \\";
        } else {
          text2 = \\" \\";
        }
      } else {
        text2 = preserveWhitespace ? \\" \\" : \\"\\";
      }
      if (text2) {
        if (!inPre && whitespaceOption === \\"condense\\") {
          text2 = text2.replace(whitespaceRE$1, \\" \\");
        }
        let res;
        let child;
        if (!inVPre && text2 !== \\" \\" && (res = parseText(text2, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text2
          };
        } else if (text2 !== \\" \\" || !children.length || children[children.length - 1].text !== \\" \\") {
          child = {
            type: 3,
            text: text2
          };
        }
        if (child) {
          if (options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }
          children.push(child);
        }
      }
    },
    comment(text2, start, end) {
      if (currentParent) {
        const child = {
          type: 3,
          text: text2,
          isComment: true
        };
        if (options.outputSourceRange) {
          child.start = start;
          child.end = end;
        }
        currentParent.children.push(child);
      }
    }
  });
  return root;
}
function processPre(el) {
  if (getAndRemoveAttr(el, \\"v-pre\\") != null) {
    el.pre = true;
  }
}
function processRawAttrs(el) {
  const list = el.attrsList;
  const len2 = list.length;
  if (len2) {
    const attrs2 = el.attrs = new Array(len2);
    for (let i = 0; i < len2; i++) {
      attrs2[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };
      if (list[i].start != null) {
        attrs2[i].start = list[i].start;
        attrs2[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    el.plain = true;
  }
}
function processElement(element, options) {
  processKey(element);
  element.plain = !element.key && !element.scopedSlots && !element.attrsList.length;
  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);
  for (let i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }
  processAttrs(element);
  return element;
}
function processKey(el) {
  const exp = getBindingAttr(el, \\"key\\");
  if (exp) {
    {
      if (el.tag === \\"template\\") {
        warn$2(\`<template> cannot be keyed. Place the key on real elements instead.\`, getRawBindingAttr(el, \\"key\\"));
      }
      if (el.for) {
        const iterator = el.iterator2 || el.iterator1;
        const parent = el.parent;
        if (iterator && iterator === exp && parent && parent.tag === \\"transition-group\\") {
          warn$2(\`Do not use v-for index as key on <transition-group> children, this is the same as not using keys.\`, getRawBindingAttr(el, \\"key\\"), true);
        }
      }
    }
    el.key = exp;
  }
}
function processRef(el) {
  const ref2 = getBindingAttr(el, \\"ref\\");
  if (ref2) {
    el.ref = ref2;
    el.refInFor = checkInFor(el);
  }
}
function processFor(el) {
  let exp;
  if (exp = getAndRemoveAttr(el, \\"v-for\\")) {
    const res = parseFor(exp);
    if (res) {
      extend(el, res);
    } else {
      warn$2(\`Invalid v-for expression: \${exp}\`, el.rawAttrsMap[\\"v-for\\"]);
    }
  }
}
function parseFor(exp) {
  const inMatch = exp.match(forAliasRE);
  if (!inMatch)
    return;
  const res = {};
  res.for = inMatch[2].trim();
  const alias = inMatch[1].trim().replace(stripParensRE, \\"\\");
  const iteratorMatch = alias.match(forIteratorRE);
  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, \\"\\").trim();
    res.iterator1 = iteratorMatch[1].trim();
    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }
  return res;
}
function processIf(el) {
  const exp = getAndRemoveAttr(el, \\"v-if\\");
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, \\"v-else\\") != null) {
      el.else = true;
    }
    const elseif = getAndRemoveAttr(el, \\"v-else-if\\");
    if (elseif) {
      el.elseif = elseif;
    }
  }
}
function processIfConditions(el, parent) {
  const prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else {
    warn$2(\`v-\${el.elseif ? 'else-if=\\"' + el.elseif + '\\"' : \\"else\\"} used on element <\${el.tag}> without corresponding v-if.\`, el.rawAttrsMap[el.elseif ? \\"v-else-if\\" : \\"v-else\\"]);
  }
}
function findPrevElement(children) {
  let i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i];
    } else {
      if (children[i].text !== \\" \\") {
        warn$2(\`text \\"\${children[i].text.trim()}\\" between v-if and v-else(-if) will be ignored.\`, children[i]);
      }
      children.pop();
    }
  }
}
function addIfCondition(el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}
function processOnce(el) {
  const once$$1 = getAndRemoveAttr(el, \\"v-once\\");
  if (once$$1 != null) {
    el.once = true;
  }
}
function processSlotContent(el) {
  let slotScope;
  if (el.tag === \\"template\\") {
    slotScope = getAndRemoveAttr(el, \\"scope\\");
    if (slotScope) {
      warn$2(\`the \\"scope\\" attribute for scoped slots have been deprecated and replaced by \\"slot-scope\\" since 2.5. The new \\"slot-scope\\" attribute can also be used on plain elements in addition to <template> to denote scoped slots.\`, el.rawAttrsMap[\\"scope\\"], true);
    }
    el.slotScope = slotScope || getAndRemoveAttr(el, \\"slot-scope\\");
  } else if (slotScope = getAndRemoveAttr(el, \\"slot-scope\\")) {
    if (el.attrsMap[\\"v-for\\"]) {
      warn$2(\`Ambiguous combined usage of slot-scope and v-for on <\${el.tag}> (v-for takes higher priority). Use a wrapper <template> for the scoped slot to make it clearer.\`, el.rawAttrsMap[\\"slot-scope\\"], true);
    }
    el.slotScope = slotScope;
  }
  const slotTarget = getBindingAttr(el, \\"slot\\");
  if (slotTarget) {
    el.slotTarget = slotTarget === '\\"\\"' ? '\\"default\\"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[\\":slot\\"] || el.attrsMap[\\"v-bind:slot\\"]);
    if (el.tag !== \\"template\\" && !el.slotScope) {
      addAttr(el, \\"slot\\", slotTarget, getRawBindingAttr(el, \\"slot\\"));
    }
  }
  {
    if (el.tag === \\"template\\") {
      const slotBinding = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding) {
        {
          if (el.slotTarget || el.slotScope) {
            warn$2(\`Unexpected mixed usage of different slot syntaxes.\`, el);
          }
          if (el.parent && !maybeComponent(el.parent)) {
            warn$2(\`<template v-slot> can only appear at the root level inside the receiving component\`, el);
          }
        }
        const {name, dynamic} = getSlotName(slotBinding);
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken;
      }
    } else {
      const slotBinding = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding) {
        {
          if (!maybeComponent(el)) {
            warn$2(\`v-slot can only be used on components or <template>.\`, slotBinding);
          }
          if (el.slotScope || el.slotTarget) {
            warn$2(\`Unexpected mixed usage of different slot syntaxes.\`, el);
          }
          if (el.scopedSlots) {
            warn$2(\`To avoid scope ambiguity, the default slot should also use <template> syntax when there are other named slots.\`, slotBinding);
          }
        }
        const slots = el.scopedSlots || (el.scopedSlots = {});
        const {name, dynamic} = getSlotName(slotBinding);
        const slotContainer = slots[name] = createASTElement(\\"template\\", [], el);
        slotContainer.slotTarget = name;
        slotContainer.slotTargetDynamic = dynamic;
        slotContainer.children = el.children.filter((c) => {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true;
          }
        });
        slotContainer.slotScope = slotBinding.value || emptySlotScopeToken;
        el.children = [];
        el.plain = false;
      }
    }
  }
}
function getSlotName(binding) {
  let name = binding.name.replace(slotRE, \\"\\");
  if (!name) {
    if (binding.name[0] !== \\"#\\") {
      name = \\"default\\";
    } else {
      warn$2(\`v-slot shorthand syntax requires a slot name.\`, binding);
    }
  }
  return dynamicArgRE.test(name) ? {name: name.slice(1, -1), dynamic: true} : {name: \`\\"\${name}\\"\`, dynamic: false};
}
function processSlotOutlet(el) {
  if (el.tag === \\"slot\\") {
    el.slotName = getBindingAttr(el, \\"name\\");
    if (el.key) {
      warn$2(\`\\\\\`key\\\\\` does not work on <slot> because slots are abstract outlets and can possibly expand into multiple elements. Use the key on a wrapping element instead.\`, getRawBindingAttr(el, \\"key\\"));
    }
  }
}
function processComponent(el) {
  let binding;
  if (binding = getBindingAttr(el, \\"is\\")) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, \\"inline-template\\") != null) {
    el.inlineTemplate = true;
  }
}
function processAttrs(el) {
  const list = el.attrsList;
  let i, l, name, rawName, value, modifiers, syncGen, isDynamic;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      el.hasBindings = true;
      modifiers = parseModifiers(name.replace(dirRE, \\"\\"));
      if (modifiers) {
        name = name.replace(modifierRE, \\"\\");
      }
      if (bindRE.test(name)) {
        name = name.replace(bindRE, \\"\\");
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        if (value.trim().length === 0) {
          warn$2(\`The value for a v-bind expression cannot be empty. Found in \\"v-bind:\${name}\\"\`);
        }
        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);
            if (name === \\"innerHtml\\")
              name = \\"innerHTML\\";
          }
          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, \`$event\`);
            if (!isDynamic) {
              addHandler(el, \`update:\${camelize(name)}\`, syncGen, null, false, warn$2, list[i]);
              if (hyphenate(name) !== camelize(name)) {
                addHandler(el, \`update:\${hyphenate(name)}\`, syncGen, null, false, warn$2, list[i]);
              }
            } else {
              addHandler(el, \`\\"update:\\"+(\${name})\`, syncGen, null, false, warn$2, list[i], true);
            }
          }
        }
        if (modifiers && modifiers.prop || !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) {
        name = name.replace(onRE, \\"\\");
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
      } else {
        name = name.replace(dirRE, \\"\\");
        const argMatch = name.match(argRE);
        let arg = argMatch && argMatch[1];
        isDynamic = false;
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }
        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
        if (name === \\"model\\") {
          checkForAliasModel(el, value);
        }
      }
    } else {
      {
        const res = parseText(value, delimiters);
        if (res) {
          warn$2(\`\${name}=\\"\${value}\\": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div id=\\"{{ val }}\\">, use <div :id=\\"val\\">.\`, list[i]);
        }
      }
      addAttr(el, name, JSON.stringify(value), list[i]);
      if (!el.component && name === \\"muted\\" && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, \\"true\\", list[i]);
      }
    }
  }
}
function checkInFor(el) {
  let parent = el;
  while (parent) {
    if (parent.for !== void 0) {
      return true;
    }
    parent = parent.parent;
  }
  return false;
}
function parseModifiers(name) {
  const match = name.match(modifierRE);
  if (match) {
    const ret = {};
    match.forEach((m) => {
      ret[m.slice(1)] = true;
    });
    return ret;
  }
}
function makeAttrsMap(attrs2) {
  const map = {};
  for (let i = 0, l = attrs2.length; i < l; i++) {
    if (map[attrs2[i].name] && !isIE && !isEdge) {
      warn$2(\\"duplicate attribute: \\" + attrs2[i].name, attrs2[i]);
    }
    map[attrs2[i].name] = attrs2[i].value;
  }
  return map;
}
function isTextTag(el) {
  return el.tag === \\"script\\" || el.tag === \\"style\\";
}
function isForbiddenTag(el) {
  return el.tag === \\"style\\" || el.tag === \\"script\\" && (!el.attrsMap.type || el.attrsMap.type === \\"text/javascript\\");
}
const ieNSBug = /^xmlns:NS\\\\d+/;
const ieNSPrefix = /^NS\\\\d+:/;
function guardIESVGBug(attrs2) {
  const res = [];
  for (let i = 0; i < attrs2.length; i++) {
    const attr = attrs2[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, \\"\\");
      res.push(attr);
    }
  }
  return res;
}
function checkForAliasModel(el, value) {
  let _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2(\`<\${el.tag} v-model=\\"\${value}\\">: You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.\`, el.rawAttrsMap[\\"v-model\\"]);
    }
    _el = _el.parent;
  }
}
function preTransformNode(el, options) {
  if (el.tag === \\"input\\") {
    const map = el.attrsMap;
    if (!map[\\"v-model\\"]) {
      return;
    }
    let typeBinding;
    if (map[\\":type\\"] || map[\\"v-bind:type\\"]) {
      typeBinding = getBindingAttr(el, \\"type\\");
    }
    if (!map.type && !typeBinding && map[\\"v-bind\\"]) {
      typeBinding = \`(\${map[\\"v-bind\\"]}).type\`;
    }
    if (typeBinding) {
      const ifCondition = getAndRemoveAttr(el, \\"v-if\\", true);
      const ifConditionExtra = ifCondition ? \`&&(\${ifCondition})\` : \`\`;
      const hasElse = getAndRemoveAttr(el, \\"v-else\\", true) != null;
      const elseIfCondition = getAndRemoveAttr(el, \\"v-else-if\\", true);
      const branch0 = cloneASTElement(el);
      processFor(branch0);
      addRawAttr(branch0, \\"type\\", \\"checkbox\\");
      processElement(branch0, options);
      branch0.processed = true;
      branch0.if = \`(\${typeBinding})==='checkbox'\` + ifConditionExtra;
      addIfCondition(branch0, {
        exp: branch0.if,
        block: branch0
      });
      const branch1 = cloneASTElement(el);
      getAndRemoveAttr(branch1, \\"v-for\\", true);
      addRawAttr(branch1, \\"type\\", \\"radio\\");
      processElement(branch1, options);
      addIfCondition(branch0, {
        exp: \`(\${typeBinding})==='radio'\` + ifConditionExtra,
        block: branch1
      });
      const branch2 = cloneASTElement(el);
      getAndRemoveAttr(branch2, \\"v-for\\", true);
      addRawAttr(branch2, \\":type\\", typeBinding);
      processElement(branch2, options);
      addIfCondition(branch0, {
        exp: ifCondition,
        block: branch2
      });
      if (hasElse) {
        branch0.else = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }
      return branch0;
    }
  }
}
function cloneASTElement(el) {
  return createASTElement(el.tag, el.attrsList.slice(), el.parent);
}
var model$1 = {
  preTransformNode
};
var modules$1 = [
  klass$1,
  style$1,
  model$1
];
function text(el, dir) {
  if (dir.value) {
    addProp(el, \\"textContent\\", \`_s(\${dir.value})\`, dir);
  }
}
function html(el, dir) {
  if (dir.value) {
    addProp(el, \\"innerHTML\\", \`_s(\${dir.value})\`, dir);
  }
}
var directives$1 = {
  model,
  text,
  html
};
const baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag,
  isUnaryTag,
  mustUseProp,
  canBeLeftOpenTag,
  isReservedTag,
  getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};
let isStaticKey;
let isPlatformReservedTag;
const genStaticKeysCached = cached(genStaticKeys$1);
function optimize(root, options) {
  if (!root)
    return;
  isStaticKey = genStaticKeysCached(options.staticKeys || \\"\\");
  isPlatformReservedTag = options.isReservedTag || no;
  markStatic$1(root);
  markStaticRoots(root, false);
}
function genStaticKeys$1(keys) {
  return makeMap(\\"type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap\\" + (keys ? \\",\\" + keys : \\"\\"));
}
function markStatic$1(node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    if (!isPlatformReservedTag(node.tag) && node.tag !== \\"slot\\" && node.attrsMap[\\"inline-template\\"] == null) {
      return;
    }
    for (let i = 0, l = node.children.length; i < l; i++) {
      const child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
    if (node.ifConditions) {
      for (let i = 1, l = node.ifConditions.length; i < l; i++) {
        const block = node.ifConditions[i].block;
        markStatic$1(block);
        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}
function markStaticRoots(node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {
      node.staticRoot = true;
      return;
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (let i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      for (let i = 1, l = node.ifConditions.length; i < l; i++) {
        markStaticRoots(node.ifConditions[i].block, isInFor);
      }
    }
  }
}
function isStatic(node) {
  if (node.type === 2) {
    return false;
  }
  if (node.type === 3) {
    return true;
  }
  return !!(node.pre || !node.hasBindings && !node.if && !node.for && !isBuiltInTag(node.tag) && isPlatformReservedTag(node.tag) && !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));
}
function isDirectChildOfTemplateFor(node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== \\"template\\") {
      return false;
    }
    if (node.for) {
      return true;
    }
  }
  return false;
}
const fnExpRE = /^([\\\\w$_]+|\\\\([^)]*?\\\\))\\\\s*=>|^function(?:\\\\s+[\\\\w$]+)?\\\\s*\\\\(/;
const fnInvokeRE = /\\\\([^)]*?\\\\);*$/;
const simplePathRE = /^[A-Za-z_$][\\\\w$]*(?:\\\\.[A-Za-z_$][\\\\w$]*|\\\\['[^']*?']|\\\\[\\"[^\\"]*?\\"]|\\\\[\\\\d+]|\\\\[[A-Za-z_$][\\\\w$]*])*$/;
const keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  delete: [8, 46]
};
const keyNames = {
  esc: [\\"Esc\\", \\"Escape\\"],
  tab: \\"Tab\\",
  enter: \\"Enter\\",
  space: [\\" \\", \\"Spacebar\\"],
  up: [\\"Up\\", \\"ArrowUp\\"],
  left: [\\"Left\\", \\"ArrowLeft\\"],
  right: [\\"Right\\", \\"ArrowRight\\"],
  down: [\\"Down\\", \\"ArrowDown\\"],
  delete: [\\"Backspace\\", \\"Delete\\", \\"Del\\"]
};
const genGuard = (condition) => \`if(\${condition})return null;\`;
const modifierCode = {
  stop: \\"$event.stopPropagation();\\",
  prevent: \\"$event.preventDefault();\\",
  self: genGuard(\`$event.target !== $event.currentTarget\`),
  ctrl: genGuard(\`!$event.ctrlKey\`),
  shift: genGuard(\`!$event.shiftKey\`),
  alt: genGuard(\`!$event.altKey\`),
  meta: genGuard(\`!$event.metaKey\`),
  left: genGuard(\`'button' in $event && $event.button !== 0\`),
  middle: genGuard(\`'button' in $event && $event.button !== 1\`),
  right: genGuard(\`'button' in $event && $event.button !== 2\`)
};
function genHandlers(events2, isNative2) {
  const prefix = isNative2 ? \\"nativeOn:\\" : \\"on:\\";
  let staticHandlers = \`\`;
  let dynamicHandlers = \`\`;
  for (const name in events2) {
    const handlerCode = genHandler(events2[name]);
    if (events2[name] && events2[name].dynamic) {
      dynamicHandlers += \`\${name},\${handlerCode},\`;
    } else {
      staticHandlers += \`\\"\${name}\\":\${handlerCode},\`;
    }
  }
  staticHandlers = \`{\${staticHandlers.slice(0, -1)}}\`;
  if (dynamicHandlers) {
    return prefix + \`_d(\${staticHandlers},[\${dynamicHandlers.slice(0, -1)}])\`;
  } else {
    return prefix + staticHandlers;
  }
}
function genHandler(handler) {
  if (!handler) {
    return \\"function(){}\\";
  }
  if (Array.isArray(handler)) {
    return \`[\${handler.map((handler2) => genHandler(handler2)).join(\\",\\")}]\`;
  }
  const isMethodPath = simplePathRE.test(handler.value);
  const isFunctionExpression = fnExpRE.test(handler.value);
  const isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, \\"\\"));
  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value;
    }
    return \`function($event){\${isFunctionInvocation ? \`return \${handler.value}\` : handler.value}}\`;
  } else {
    let code = \\"\\";
    let genModifierCode = \\"\\";
    const keys = [];
    for (const key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === \\"exact\\") {
        const modifiers = handler.modifiers;
        genModifierCode += genGuard([\\"ctrl\\", \\"shift\\", \\"alt\\", \\"meta\\"].filter((keyModifier) => !modifiers[keyModifier]).map((keyModifier) => \`$event.\${keyModifier}Key\`).join(\\"||\\"));
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    if (genModifierCode) {
      code += genModifierCode;
    }
    const handlerCode = isMethodPath ? \`return \${handler.value}($event)\` : isFunctionExpression ? \`return (\${handler.value})($event)\` : isFunctionInvocation ? \`return \${handler.value}\` : handler.value;
    return \`function($event){\${code}\${handlerCode}}\`;
  }
}
function genKeyFilter(keys) {
  return \`if(!$event.type.indexOf('key')&&\${keys.map(genFilterCode).join(\\"&&\\")})return null;\`;
}
function genFilterCode(key) {
  const keyVal = parseInt(key, 10);
  if (keyVal) {
    return \`$event.keyCode!==\${keyVal}\`;
  }
  const keyCode = keyCodes[key];
  const keyName = keyNames[key];
  return \`_k($event.keyCode,\${JSON.stringify(key)},\${JSON.stringify(keyCode)},$event.key,\${JSON.stringify(keyName)})\`;
}
function on(el, dir) {
  if (dir.modifiers) {
    warn(\`v-on without argument does not support modifiers.\`);
  }
  el.wrapListeners = (code) => \`_g(\${code},\${dir.value})\`;
}
function bind$1(el, dir) {
  el.wrapData = (code) => {
    return \`_b(\${code},'\${el.tag}',\${dir.value},\${dir.modifiers && dir.modifiers.prop ? \\"true\\" : \\"false\\"}\${dir.modifiers && dir.modifiers.sync ? \\",true\\" : \\"\\"})\`;
  };
}
var baseDirectives = {
  on,
  bind: bind$1,
  cloak: noop
};
class CodegenState {
  constructor(options) {
    this.options = options;
    this.warn = options.warn || baseWarn;
    this.transforms = pluckModuleFunction(options.modules, \\"transformCode\\");
    this.dataGenFns = pluckModuleFunction(options.modules, \\"genData\\");
    this.directives = extend(extend({}, baseDirectives), options.directives);
    const isReservedTag2 = options.isReservedTag || no;
    this.maybeComponent = (el) => !!el.component || !isReservedTag2(el.tag);
    this.onceId = 0;
    this.staticRenderFns = [];
    this.pre = false;
  }
}
function generate(ast, options) {
  const state = new CodegenState(options);
  const code = ast ? genElement(ast, state) : '_c(\\"div\\")';
  return {
    render: \`with(this){return \${code}}\`,
    staticRenderFns: state.staticRenderFns
  };
}
function genElement(el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }
  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state);
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state);
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state);
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.tag === \\"template\\" && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || \\"void 0\\";
  } else if (el.tag === \\"slot\\") {
    return genSlot(el, state);
  } else {
    let code;
    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      let data;
      if (!el.plain || el.pre && state.maybeComponent(el)) {
        data = genData$2(el, state);
      }
      const children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = \`_c('\${el.tag}'\${data ? \`,\${data}\` : \\"\\"}\${children ? \`,\${children}\` : \\"\\"})\`;
    }
    for (let i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }
    return code;
  }
}
function genStatic(el, state) {
  el.staticProcessed = true;
  const originalPreState = state.pre;
  if (el.pre) {
    state.pre = el.pre;
  }
  state.staticRenderFns.push(\`with(this){return \${genElement(el, state)}}\`);
  state.pre = originalPreState;
  return \`_m(\${state.staticRenderFns.length - 1}\${el.staticInFor ? \\",true\\" : \\"\\"})\`;
}
function genOnce(el, state) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.staticInFor) {
    let key = \\"\\";
    let parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break;
      }
      parent = parent.parent;
    }
    if (!key) {
      state.warn(\`v-once can only be used inside v-for that is keyed. \`, el.rawAttrsMap[\\"v-once\\"]);
      return genElement(el, state);
    }
    return \`_o(\${genElement(el, state)},\${state.onceId++},\${key})\`;
  } else {
    return genStatic(el, state);
  }
}
function genIf(el, state, altGen, altEmpty) {
  el.ifProcessed = true;
  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);
}
function genIfConditions(conditions, state, altGen, altEmpty) {
  if (!conditions.length) {
    return altEmpty || \\"_e()\\";
  }
  const condition = conditions.shift();
  if (condition.exp) {
    return \`(\${condition.exp})?\${genTernaryExp(condition.block)}:\${genIfConditions(conditions, state, altGen, altEmpty)}\`;
  } else {
    return \`\${genTernaryExp(condition.block)}\`;
  }
  function genTernaryExp(el) {
    return altGen ? altGen(el, state) : el.once ? genOnce(el, state) : genElement(el, state);
  }
}
function genFor(el, state, altGen, altHelper) {
  const exp = el.for;
  const alias = el.alias;
  const iterator1 = el.iterator1 ? \`,\${el.iterator1}\` : \\"\\";
  const iterator2 = el.iterator2 ? \`,\${el.iterator2}\` : \\"\\";
  if (state.maybeComponent(el) && el.tag !== \\"slot\\" && el.tag !== \\"template\\" && !el.key) {
    state.warn(\`<\${el.tag} v-for=\\"\${alias} in \${exp}\\">: component lists rendered with v-for should have explicit keys. See https://vuejs.org/guide/list.html#key for more info.\`, el.rawAttrsMap[\\"v-for\\"], true);
  }
  el.forProcessed = true;
  return \`\${altHelper || \\"_l\\"}((\${exp}),function(\${alias}\${iterator1}\${iterator2}){return \${(altGen || genElement)(el, state)}})\`;
}
function genData$2(el, state) {
  let data = \\"{\\";
  const dirs = genDirectives(el, state);
  if (dirs)
    data += dirs + \\",\\";
  if (el.key) {
    data += \`key:\${el.key},\`;
  }
  if (el.ref) {
    data += \`ref:\${el.ref},\`;
  }
  if (el.refInFor) {
    data += \`refInFor:true,\`;
  }
  if (el.pre) {
    data += \`pre:true,\`;
  }
  if (el.component) {
    data += \`tag:\\"\${el.tag}\\",\`;
  }
  for (let i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  }
  if (el.attrs) {
    data += \`attrs:\${genProps(el.attrs)},\`;
  }
  if (el.props) {
    data += \`domProps:\${genProps(el.props)},\`;
  }
  if (el.events) {
    data += \`\${genHandlers(el.events, false)},\`;
  }
  if (el.nativeEvents) {
    data += \`\${genHandlers(el.nativeEvents, true)},\`;
  }
  if (el.slotTarget && !el.slotScope) {
    data += \`slot:\${el.slotTarget},\`;
  }
  if (el.scopedSlots) {
    data += \`\${genScopedSlots(el, el.scopedSlots, state)},\`;
  }
  if (el.model) {
    data += \`model:{value:\${el.model.value},callback:\${el.model.callback},expression:\${el.model.expression}},\`;
  }
  if (el.inlineTemplate) {
    const inlineTemplate = genInlineTemplate(el, state);
    if (inlineTemplate) {
      data += \`\${inlineTemplate},\`;
    }
  }
  data = data.replace(/,$/, \\"\\") + \\"}\\";
  if (el.dynamicAttrs) {
    data = \`_b(\${data},\\"\${el.tag}\\",\${genProps(el.dynamicAttrs)})\`;
  }
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }
  return data;
}
function genDirectives(el, state) {
  const dirs = el.directives;
  if (!dirs)
    return;
  let res = \\"directives:[\\";
  let hasRuntime = false;
  let i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    const gen = state.directives[dir.name];
    if (gen) {
      needRuntime = !!gen(el, dir, state.warn);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += \`{name:\\"\${dir.name}\\",rawName:\\"\${dir.rawName}\\"\${dir.value ? \`,value:(\${dir.value}),expression:\${JSON.stringify(dir.value)}\` : \\"\\"}\${dir.arg ? \`,arg:\${dir.isDynamicArg ? dir.arg : \`\\"\${dir.arg}\\"\`}\` : \\"\\"}\${dir.modifiers ? \`,modifiers:\${JSON.stringify(dir.modifiers)}\` : \\"\\"}},\`;
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + \\"]\\";
  }
}
function genInlineTemplate(el, state) {
  const ast = el.children[0];
  if (el.children.length !== 1 || ast.type !== 1) {
    state.warn(\\"Inline-template components must have exactly one child element.\\", {start: el.start});
  }
  if (ast && ast.type === 1) {
    const inlineRenderFns = generate(ast, state.options);
    return \`inlineTemplate:{render:function(){\${inlineRenderFns.render}},staticRenderFns:[\${inlineRenderFns.staticRenderFns.map((code) => \`function(){\${code}}\`).join(\\",\\")}]}\`;
  }
}
function genScopedSlots(el, slots, state) {
  let needsForceUpdate = el.for || Object.keys(slots).some((key) => {
    const slot = slots[key];
    return slot.slotTargetDynamic || slot.if || slot.for || containsSlotChild(slot);
  });
  let needsKey = !!el.if;
  if (!needsForceUpdate) {
    let parent = el.parent;
    while (parent) {
      if (parent.slotScope && parent.slotScope !== emptySlotScopeToken || parent.for) {
        needsForceUpdate = true;
        break;
      }
      if (parent.if) {
        needsKey = true;
      }
      parent = parent.parent;
    }
  }
  const generatedSlots = Object.keys(slots).map((key) => genScopedSlot(slots[key], state)).join(\\",\\");
  return \`scopedSlots:_u([\${generatedSlots}]\${needsForceUpdate ? \`,null,true\` : \`\`}\${!needsForceUpdate && needsKey ? \`,null,false,\${hash(generatedSlots)}\` : \`\`})\`;
}
function hash(str2) {
  let hash2 = 5381;
  let i = str2.length;
  while (i) {
    hash2 = hash2 * 33 ^ str2.charCodeAt(--i);
  }
  return hash2 >>> 0;
}
function containsSlotChild(el) {
  if (el.type === 1) {
    if (el.tag === \\"slot\\") {
      return true;
    }
    return el.children.some(containsSlotChild);
  }
  return false;
}
function genScopedSlot(el, state) {
  const isLegacySyntax = el.attrsMap[\\"slot-scope\\"];
  if (el.if && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, \`null\`);
  }
  if (el.for && !el.forProcessed) {
    return genFor(el, state, genScopedSlot);
  }
  const slotScope = el.slotScope === emptySlotScopeToken ? \`\` : String(el.slotScope);
  const fn = \`function(\${slotScope}){return \${el.tag === \\"template\\" ? el.if && isLegacySyntax ? \`(\${el.if})?\${genChildren(el, state) || \\"undefined\\"}:undefined\` : genChildren(el, state) || \\"undefined\\" : genElement(el, state)}}\`;
  const reverseProxy = slotScope ? \`\` : \`,proxy:true\`;
  return \`{key:\${el.slotTarget || \`\\"default\\"\`},fn:\${fn}\${reverseProxy}}\`;
}
function genChildren(el, state, checkSkip, altGenElement, altGenNode) {
  const children = el.children;
  if (children.length) {
    const el2 = children[0];
    if (children.length === 1 && el2.for && el2.tag !== \\"template\\" && el2.tag !== \\"slot\\") {
      const normalizationType2 = checkSkip ? state.maybeComponent(el2) ? \`,1\` : \`,0\` : \`\`;
      return \`\${(altGenElement || genElement)(el2, state)}\${normalizationType2}\`;
    }
    const normalizationType = checkSkip ? getNormalizationType(children, state.maybeComponent) : 0;
    const gen = altGenNode || genNode;
    return \`[\${children.map((c) => gen(c, state)).join(\\",\\")}]\${normalizationType ? \`,\${normalizationType}\` : \\"\\"}\`;
  }
}
function getNormalizationType(children, maybeComponent2) {
  let res = 0;
  for (let i = 0; i < children.length; i++) {
    const el = children[i];
    if (el.type !== 1) {
      continue;
    }
    if (needsNormalization(el) || el.ifConditions && el.ifConditions.some((c) => needsNormalization(c.block))) {
      res = 2;
      break;
    }
    if (maybeComponent2(el) || el.ifConditions && el.ifConditions.some((c) => maybeComponent2(c.block))) {
      res = 1;
    }
  }
  return res;
}
function needsNormalization(el) {
  return el.for !== void 0 || el.tag === \\"template\\" || el.tag === \\"slot\\";
}
function genNode(node, state) {
  if (node.type === 1) {
    return genElement(node, state);
  } else if (node.type === 3 && node.isComment) {
    return genComment(node);
  } else {
    return genText(node);
  }
}
function genText(text2) {
  return \`_v(\${text2.type === 2 ? text2.expression : transformSpecialNewlines(JSON.stringify(text2.text))})\`;
}
function genComment(comment2) {
  return \`_e(\${JSON.stringify(comment2.text)})\`;
}
function genSlot(el, state) {
  const slotName = el.slotName || '\\"default\\"';
  const children = genChildren(el, state);
  let res = \`_t(\${slotName}\${children ? \`,\${children}\` : \\"\\"}\`;
  const attrs2 = el.attrs || el.dynamicAttrs ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map((attr) => ({
    name: camelize(attr.name),
    value: attr.value,
    dynamic: attr.dynamic
  }))) : null;
  const bind$$1 = el.attrsMap[\\"v-bind\\"];
  if ((attrs2 || bind$$1) && !children) {
    res += \`,null\`;
  }
  if (attrs2) {
    res += \`,\${attrs2}\`;
  }
  if (bind$$1) {
    res += \`\${attrs2 ? \\"\\" : \\",null\\"},\${bind$$1}\`;
  }
  return res + \\")\\";
}
function genComponent(componentName, el, state) {
  const children = el.inlineTemplate ? null : genChildren(el, state, true);
  return \`_c(\${componentName},\${genData$2(el, state)}\${children ? \`,\${children}\` : \\"\\"})\`;
}
function genProps(props2) {
  let staticProps = \`\`;
  let dynamicProps = \`\`;
  for (let i = 0; i < props2.length; i++) {
    const prop = props2[i];
    const value = transformSpecialNewlines(prop.value);
    if (prop.dynamic) {
      dynamicProps += \`\${prop.name},\${value},\`;
    } else {
      staticProps += \`\\"\${prop.name}\\":\${value},\`;
    }
  }
  staticProps = \`{\${staticProps.slice(0, -1)}}\`;
  if (dynamicProps) {
    return \`_d(\${staticProps},[\${dynamicProps.slice(0, -1)}])\`;
  } else {
    return staticProps;
  }
}
function transformSpecialNewlines(text2) {
  return text2.replace(/\\\\u2028/g, \\"\\\\\\\\u2028\\").replace(/\\\\u2029/g, \\"\\\\\\\\u2029\\");
}
const prohibitedKeywordRE = new RegExp(\\"\\\\\\\\b\\" + \\"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments\\".split(\\",\\").join(\\"\\\\\\\\b|\\\\\\\\b\\") + \\"\\\\\\\\b\\");
const unaryOperatorsRE = new RegExp(\\"\\\\\\\\b\\" + \\"delete,typeof,void\\".split(\\",\\").join(\\"\\\\\\\\s*\\\\\\\\([^\\\\\\\\)]*\\\\\\\\)|\\\\\\\\b\\") + \\"\\\\\\\\s*\\\\\\\\([^\\\\\\\\)]*\\\\\\\\)\\");
const stripStringRE = /'(?:[^'\\\\\\\\]|\\\\\\\\.)*'|\\"(?:[^\\"\\\\\\\\]|\\\\\\\\.)*\\"|\`(?:[^\`\\\\\\\\]|\\\\\\\\.)*\\\\$\\\\{|\\\\}(?:[^\`\\\\\\\\]|\\\\\\\\.)*\`|\`(?:[^\`\\\\\\\\]|\\\\\\\\.)*\`/g;
function detectErrors(ast, warn2) {
  if (ast) {
    checkNode(ast, warn2);
  }
}
function checkNode(node, warn2) {
  if (node.type === 1) {
    for (const name in node.attrsMap) {
      if (dirRE.test(name)) {
        const value = node.attrsMap[name];
        if (value) {
          const range2 = node.rawAttrsMap[name];
          if (name === \\"v-for\\") {
            checkFor(node, \`v-for=\\"\${value}\\"\`, warn2, range2);
          } else if (name === \\"v-slot\\" || name[0] === \\"#\\") {
            checkFunctionParameterExpression(value, \`\${name}=\\"\${value}\\"\`, warn2, range2);
          } else if (onRE.test(name)) {
            checkEvent(value, \`\${name}=\\"\${value}\\"\`, warn2, range2);
          } else {
            checkExpression(value, \`\${name}=\\"\${value}\\"\`, warn2, range2);
          }
        }
      }
    }
    if (node.children) {
      for (let i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn2);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn2, node);
  }
}
function checkEvent(exp, text2, warn2, range2) {
  const stripped = exp.replace(stripStringRE, \\"\\");
  const keywordMatch = stripped.match(unaryOperatorsRE);
  if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== \\"$\\") {
    warn2(\`avoid using JavaScript unary operator as property name: \\"\${keywordMatch[0]}\\" in expression \${text2.trim()}\`, range2);
  }
  checkExpression(exp, text2, warn2, range2);
}
function checkFor(node, text2, warn2, range2) {
  checkExpression(node.for || \\"\\", text2, warn2, range2);
  checkIdentifier(node.alias, \\"v-for alias\\", text2, warn2, range2);
  checkIdentifier(node.iterator1, \\"v-for iterator\\", text2, warn2, range2);
  checkIdentifier(node.iterator2, \\"v-for iterator\\", text2, warn2, range2);
}
function checkIdentifier(ident, type, text2, warn2, range2) {
  if (typeof ident === \\"string\\") {
    try {
      new Function(\`var \${ident}=_\`);
    } catch (e) {
      warn2(\`invalid \${type} \\"\${ident}\\" in expression: \${text2.trim()}\`, range2);
    }
  }
}
function checkExpression(exp, text2, warn2, range2) {
  try {
    new Function(\`return \${exp}\`);
  } catch (e) {
    const keywordMatch = exp.replace(stripStringRE, \\"\\").match(prohibitedKeywordRE);
    if (keywordMatch) {
      warn2(\`avoid using JavaScript keyword as property name: \\"\${keywordMatch[0]}\\"
  Raw expression: \${text2.trim()}\`, range2);
    } else {
      warn2(\`invalid expression: \${e.message} in
    \${exp}
  Raw expression: \${text2.trim()}
\`, range2);
    }
  }
}
function checkFunctionParameterExpression(exp, text2, warn2, range2) {
  try {
    new Function(exp, \\"\\");
  } catch (e) {
    warn2(\`invalid function parameter expression: \${e.message} in
    \${exp}
  Raw expression: \${text2.trim()}
\`, range2);
  }
}
const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
  const lines = source.split(/\\\\r?/);
  let count = 0;
  const res = [];
  for (let i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;
    if (count >= start) {
      for (let j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length)
          continue;
        res.push(\`\${j + 1}\${repeat(\` \`, 3 - String(j + 1).length)}|  \${lines[j]}\`);
        const lineLength = lines[j].length;
        if (j === i) {
          const pad = start - (count - lineLength) + 1;
          const length = end > count ? lineLength - pad : end - start;
          res.push(\`   |  \` + repeat(\` \`, pad) + repeat(\`^\`, length));
        } else if (j > i) {
          if (end > count) {
            const length = Math.min(end - count, lineLength);
            res.push(\`   |  \` + repeat(\`^\`, length));
          }
          count += lineLength + 1;
        }
      }
      break;
    }
  }
  return res.join(\\"\\");
}
function repeat(str2, n) {
  let result = \\"\\";
  if (n > 0) {
    while (true) {
      if (n & 1)
        result += str2;
      n >>>= 1;
      if (n <= 0)
        break;
      str2 += str2;
    }
  }
  return result;
}
function createFunction(code, errors) {
  try {
    return new Function(code);
  } catch (err) {
    errors.push({err, code});
    return noop;
  }
}
function createCompileToFunctionFn(compile2) {
  const cache = Object.create(null);
  return function compileToFunctions2(template, options, vm) {
    options = extend({}, options);
    const warn$$1 = options.warn || warn;
    delete options.warn;
    {
      try {
        new Function(\\"return 1\\");
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$$1(\\"It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.\\");
        }
      }
    }
    const key = options.delimiters ? String(options.delimiters) + template : template;
    if (cache[key]) {
      return cache[key];
    }
    const compiled = compile2(template, options);
    {
      if (compiled.errors && compiled.errors.length) {
        if (options.outputSourceRange) {
          compiled.errors.forEach((e) => {
            warn$$1(\`Error compiling template:
\${e.msg}
\` + generateCodeFrame(template, e.start, e.end), vm);
          });
        } else {
          warn$$1(\`Error compiling template:
\${template}
\` + compiled.errors.map((e) => \`- \${e}\`).join(\\"\\") + \\"\\", vm);
        }
      }
      if (compiled.tips && compiled.tips.length) {
        if (options.outputSourceRange) {
          compiled.tips.forEach((e) => tip(e.msg, vm));
        } else {
          compiled.tips.forEach((msg) => tip(msg, vm));
        }
      }
    }
    const res = {};
    const fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map((code) => {
      return createFunction(code, fnGenErrors);
    });
    {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$$1(\`Failed to generate render function:
\` + fnGenErrors.map(({err, code}) => \`\${err.toString()} in
\${code}
\`).join(\\"\\"), vm);
      }
    }
    return cache[key] = res;
  };
}
function createCompilerCreator(baseCompile2) {
  return function createCompiler2(baseOptions2) {
    function compile2(template, options) {
      const finalOptions = Object.create(baseOptions2);
      const errors = [];
      const tips = [];
      let warn2 = (msg, range2, tip2) => {
        (tip2 ? tips : errors).push(msg);
      };
      if (options) {
        if (options.outputSourceRange) {
          const leadingSpaceLength = template.match(/^\\\\s*/)[0].length;
          warn2 = (msg, range2, tip2) => {
            const data = {msg};
            if (range2) {
              if (range2.start != null) {
                data.start = range2.start + leadingSpaceLength;
              }
              if (range2.end != null) {
                data.end = range2.end + leadingSpaceLength;
              }
            }
            (tip2 ? tips : errors).push(data);
          };
        }
        if (options.modules) {
          finalOptions.modules = (baseOptions2.modules || []).concat(options.modules);
        }
        if (options.directives) {
          finalOptions.directives = extend(Object.create(baseOptions2.directives || null), options.directives);
        }
        for (const key in options) {
          if (key !== \\"modules\\" && key !== \\"directives\\") {
            finalOptions[key] = options[key];
          }
        }
      }
      finalOptions.warn = warn2;
      const compiled = baseCompile2(template.trim(), finalOptions);
      {
        detectErrors(compiled.ast, warn2);
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled;
    }
    return {
      compile: compile2,
      compileToFunctions: createCompileToFunctionFn(compile2)
    };
  };
}
const createCompiler = createCompilerCreator(function baseCompile(template, options) {
  const ast = parse(template.trim(), options);
  if (options.optimize !== false) {
    optimize(ast, options);
  }
  const code = generate(ast, options);
  return {
    ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  };
});
const {compile, compileToFunctions} = createCompiler(baseOptions);
let div;
function getShouldDecode(href) {
  div = div || document.createElement(\\"div\\");
  div.innerHTML = href ? \`<a href=\\"
\\"/>\` : \`<div a=\\"
\\"/>\`;
  return div.innerHTML.indexOf(\\"&#10;\\") > 0;
}
const shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
const shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;
const idToTemplate = cached((id) => {
  const el = query(id);
  return el && el.innerHTML;
});
const mount = Vue.prototype.$mount;
Vue.prototype.$mount = function(el, hydrating) {
  el = el && query(el);
  if (el === document.body || el === document.documentElement) {
    warn(\`Do not mount Vue to <html> or <body> - mount to normal elements instead.\`);
    return this;
  }
  const options = this.$options;
  if (!options.render) {
    let template = options.template;
    if (template) {
      if (typeof template === \\"string\\") {
        if (template.charAt(0) === \\"#\\") {
          template = idToTemplate(template);
          if (!template) {
            warn(\`Template element not found or is empty: \${options.template}\`, this);
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        {
          warn(\\"invalid template option:\\" + template, this);
        }
        return this;
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      if (config.performance && mark) {
        mark(\\"compile\\");
      }
      const {render, staticRenderFns} = compileToFunctions(template, {
        outputSourceRange: true,
        shouldDecodeNewlines,
        shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      options.render = render;
      options.staticRenderFns = staticRenderFns;
      if (config.performance && mark) {
        mark(\\"compile end\\");
        measure(\`vue \${this._name} compile\`, \\"compile\\", \\"compile end\\");
      }
    }
  }
  return mount.call(this, el, hydrating);
};
function getOuterHTML(el) {
  if (el.outerHTML) {
    return el.outerHTML;
  } else {
    const container = document.createElement(\\"div\\");
    container.appendChild(el.cloneNode(true));
    return container.innerHTML;
  }
}
Vue.compile = compileToFunctions;
var vue_esm_browser_default = Vue;
export {
  vue_esm_browser_default as default
};"
`;

exports[`snowpack install esbuild-include: web_modules/test/esinstall/esbuild-include/node_modules/svelte/index.js 1`] = `
"// node_modules/svelte/internal/index.mjs
function noop() {
}
function run(fn) {
  return fn();
}
function run_all(fns) {
  fns.forEach(run);
}
const is_client = typeof window !== \\"undefined\\";
const tasks = new Set();
function custom_event(type, detail) {
  const e = document.createEvent(\\"CustomEvent\\");
  e.initCustomEvent(type, false, false, detail);
  return e;
}
const active_docs = new Set();
let current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error(\`Function called outside component initialization\`);
  return current_component;
}
function beforeUpdate(fn) {
  get_current_component().$$.before_update.push(fn);
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
  get_current_component().$$.after_update.push(fn);
}
function onDestroy(fn) {
  get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(type, detail);
      callbacks.slice().forEach((fn) => {
        fn.call(component, event);
      });
    }
  };
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
}
function getContext(key) {
  return get_current_component().$$.context.get(key);
}
const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function tick() {
  schedule_update();
  return resolved_promise;
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
  if (flushing)
    return;
  flushing = true;
  do {
    for (let i = 0; i < dirty_components.length; i += 1) {
      const component = dirty_components[i];
      set_current_component(component);
      update(component.$$);
    }
    dirty_components.length = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  flushing = false;
  seen_callbacks.clear();
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
const outroing = new Set();
const globals = typeof window !== \\"undefined\\" ? window : typeof globalThis !== \\"undefined\\" ? globalThis : window;
const boolean_attributes = new Set([
  \\"allowfullscreen\\",
  \\"allowpaymentrequest\\",
  \\"async\\",
  \\"autofocus\\",
  \\"autoplay\\",
  \\"checked\\",
  \\"controls\\",
  \\"default\\",
  \\"defer\\",
  \\"disabled\\",
  \\"formnovalidate\\",
  \\"hidden\\",
  \\"ismap\\",
  \\"loop\\",
  \\"multiple\\",
  \\"muted\\",
  \\"nomodule\\",
  \\"novalidate\\",
  \\"open\\",
  \\"playsinline\\",
  \\"readonly\\",
  \\"required\\",
  \\"reversed\\",
  \\"selected\\"
]);
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
let SvelteElement;
if (typeof HTMLElement === \\"function\\") {
  SvelteElement = class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({mode: \\"open\\"});
    }
    connectedCallback() {
      for (const key in this.$$.slotted) {
        this.appendChild(this.$$.slotted[key]);
      }
    }
    attributeChangedCallback(attr, _oldValue, newValue) {
      this[attr] = newValue;
    }
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    $on(type, callback) {
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    $set() {
    }
  };
}
class SvelteComponent {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set() {
  }
}
class SvelteComponentDev extends SvelteComponent {
  constructor(options) {
    if (!options || !options.target && !options.$$inline) {
      throw new Error(\`'target' is a required option\`);
    }
    super();
  }
  $destroy() {
    super.$destroy();
    this.$destroy = () => {
      console.warn(\`Component was already destroyed\`);
    };
  }
  $capture_state() {
  }
  $inject_state() {
  }
}
export {
  SvelteComponentDev as SvelteComponent,
  afterUpdate,
  beforeUpdate,
  createEventDispatcher,
  getContext,
  onDestroy,
  onMount,
  setContext,
  tick
};"
`;

exports[`snowpack install esbuild-include: web_modules/test/esinstall/esbuild-include/node_modules/vue-router/dist/vue-router.esm.js 1`] = `
"// node_modules/vue-router/dist/vue-router.esm.js
/**
  * vue-router v3.0.0
  * (c) 2017 Evan You
  * @license MIT
  */
function assert(condition, message) {
  if (!condition) {
    throw new Error(\\"[vue-router] \\" + message);
  }
}
function warn(condition, message) {
  if (!condition) {
    typeof console !== \\"undefined\\" && console.warn(\\"[vue-router] \\" + message);
  }
}
function isError(err) {
  return Object.prototype.toString.call(err).indexOf(\\"Error\\") > -1;
}
var View = {
  name: \\"router-view\\",
  functional: true,
  props: {
    name: {
      type: String,
      default: \\"default\\"
    }
  },
  render: function render(_, ref) {
    var props = ref.props;
    var children = ref.children;
    var parent = ref.parent;
    var data = ref.data;
    data.routerView = true;
    var h = parent.$createElement;
    var name = props.name;
    var route = parent.$route;
    var cache = parent._routerViewCache || (parent._routerViewCache = {});
    var depth = 0;
    var inactive = false;
    while (parent && parent._routerRoot !== parent) {
      if (parent.$vnode && parent.$vnode.data.routerView) {
        depth++;
      }
      if (parent._inactive) {
        inactive = true;
      }
      parent = parent.$parent;
    }
    data.routerViewDepth = depth;
    if (inactive) {
      return h(cache[name], data, children);
    }
    var matched = route.matched[depth];
    if (!matched) {
      cache[name] = null;
      return h();
    }
    var component = cache[name] = matched.components[name];
    data.registerRouteInstance = function(vm, val) {
      var current = matched.instances[name];
      if (val && current !== vm || !val && current === vm) {
        matched.instances[name] = val;
      }
    };
    (data.hook || (data.hook = {})).prepatch = function(_2, vnode) {
      matched.instances[name] = vnode.componentInstance;
    };
    data.props = resolveProps(route, matched.props && matched.props[name]);
    data.attrs = {};
    for (var key in data.props) {
      if (!(\\"props\\" in component) || !(key in component.props)) {
        data.attrs[key] = data.props[key];
        delete data.props[key];
      }
    }
    return h(component, data, children);
  }
};
function resolveProps(route, config) {
  switch (typeof config) {
    case \\"undefined\\":
      return;
    case \\"object\\":
      return config;
    case \\"function\\":
      return config(route);
    case \\"boolean\\":
      return config ? route.params : void 0;
    default:
      if (true) {
        warn(false, 'props in \\"' + route.path + '\\" is a ' + typeof config + \\", expecting an object, function or boolean.\\");
      }
  }
}
var encodeReserveRE = /[!'()*]/g;
var encodeReserveReplacer = function(c) {
  return \\"%\\" + c.charCodeAt(0).toString(16);
};
var commaRE = /%2C/g;
var encode = function(str) {
  return encodeURIComponent(str).replace(encodeReserveRE, encodeReserveReplacer).replace(commaRE, \\",\\");
};
var decode = decodeURIComponent;
function resolveQuery(query, extraQuery, _parseQuery) {
  if (extraQuery === void 0)
    extraQuery = {};
  var parse2 = _parseQuery || parseQuery;
  var parsedQuery;
  try {
    parsedQuery = parse2(query || \\"\\");
  } catch (e) {
    warn(false, e.message);
    parsedQuery = {};
  }
  for (var key in extraQuery) {
    parsedQuery[key] = extraQuery[key];
  }
  return parsedQuery;
}
function parseQuery(query) {
  var res = {};
  query = query.trim().replace(/^(\\\\?|#|&)/, \\"\\");
  if (!query) {
    return res;
  }
  query.split(\\"&\\").forEach(function(param) {
    var parts = param.replace(/\\\\+/g, \\" \\").split(\\"=\\");
    var key = decode(parts.shift());
    var val = parts.length > 0 ? decode(parts.join(\\"=\\")) : null;
    if (res[key] === void 0) {
      res[key] = val;
    } else if (Array.isArray(res[key])) {
      res[key].push(val);
    } else {
      res[key] = [res[key], val];
    }
  });
  return res;
}
function stringifyQuery(obj) {
  var res = obj ? Object.keys(obj).map(function(key) {
    var val = obj[key];
    if (val === void 0) {
      return \\"\\";
    }
    if (val === null) {
      return encode(key);
    }
    if (Array.isArray(val)) {
      var result = [];
      val.forEach(function(val2) {
        if (val2 === void 0) {
          return;
        }
        if (val2 === null) {
          result.push(encode(key));
        } else {
          result.push(encode(key) + \\"=\\" + encode(val2));
        }
      });
      return result.join(\\"&\\");
    }
    return encode(key) + \\"=\\" + encode(val);
  }).filter(function(x) {
    return x.length > 0;
  }).join(\\"&\\") : null;
  return res ? \\"?\\" + res : \\"\\";
}
var trailingSlashRE = /\\\\/?$/;
function createRoute(record, location, redirectedFrom, router) {
  var stringifyQuery$$1 = router && router.options.stringifyQuery;
  var query = location.query || {};
  try {
    query = clone(query);
  } catch (e) {
  }
  var route = {
    name: location.name || record && record.name,
    meta: record && record.meta || {},
    path: location.path || \\"/\\",
    hash: location.hash || \\"\\",
    query,
    params: location.params || {},
    fullPath: getFullPath(location, stringifyQuery$$1),
    matched: record ? formatMatch(record) : []
  };
  if (redirectedFrom) {
    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);
  }
  return Object.freeze(route);
}
function clone(value) {
  if (Array.isArray(value)) {
    return value.map(clone);
  } else if (value && typeof value === \\"object\\") {
    var res = {};
    for (var key in value) {
      res[key] = clone(value[key]);
    }
    return res;
  } else {
    return value;
  }
}
var START = createRoute(null, {
  path: \\"/\\"
});
function formatMatch(record) {
  var res = [];
  while (record) {
    res.unshift(record);
    record = record.parent;
  }
  return res;
}
function getFullPath(ref, _stringifyQuery) {
  var path = ref.path;
  var query = ref.query;
  if (query === void 0)
    query = {};
  var hash = ref.hash;
  if (hash === void 0)
    hash = \\"\\";
  var stringify = _stringifyQuery || stringifyQuery;
  return (path || \\"/\\") + stringify(query) + hash;
}
function isSameRoute(a, b) {
  if (b === START) {
    return a === b;
  } else if (!b) {
    return false;
  } else if (a.path && b.path) {
    return a.path.replace(trailingSlashRE, \\"\\") === b.path.replace(trailingSlashRE, \\"\\") && a.hash === b.hash && isObjectEqual(a.query, b.query);
  } else if (a.name && b.name) {
    return a.name === b.name && a.hash === b.hash && isObjectEqual(a.query, b.query) && isObjectEqual(a.params, b.params);
  } else {
    return false;
  }
}
function isObjectEqual(a, b) {
  if (a === void 0)
    a = {};
  if (b === void 0)
    b = {};
  if (!a || !b) {
    return a === b;
  }
  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) {
    return false;
  }
  return aKeys.every(function(key) {
    var aVal = a[key];
    var bVal = b[key];
    if (typeof aVal === \\"object\\" && typeof bVal === \\"object\\") {
      return isObjectEqual(aVal, bVal);
    }
    return String(aVal) === String(bVal);
  });
}
function isIncludedRoute(current, target) {
  return current.path.replace(trailingSlashRE, \\"/\\").indexOf(target.path.replace(trailingSlashRE, \\"/\\")) === 0 && (!target.hash || current.hash === target.hash) && queryIncludes(current.query, target.query);
}
function queryIncludes(current, target) {
  for (var key in target) {
    if (!(key in current)) {
      return false;
    }
  }
  return true;
}
var toTypes = [String, Object];
var eventTypes = [String, Array];
var Link = {
  name: \\"router-link\\",
  props: {
    to: {
      type: toTypes,
      required: true
    },
    tag: {
      type: String,
      default: \\"a\\"
    },
    exact: Boolean,
    append: Boolean,
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    event: {
      type: eventTypes,
      default: \\"click\\"
    }
  },
  render: function render2(h) {
    var this$1 = this;
    var router = this.$router;
    var current = this.$route;
    var ref = router.resolve(this.to, current, this.append);
    var location = ref.location;
    var route = ref.route;
    var href = ref.href;
    var classes = {};
    var globalActiveClass = router.options.linkActiveClass;
    var globalExactActiveClass = router.options.linkExactActiveClass;
    var activeClassFallback = globalActiveClass == null ? \\"router-link-active\\" : globalActiveClass;
    var exactActiveClassFallback = globalExactActiveClass == null ? \\"router-link-exact-active\\" : globalExactActiveClass;
    var activeClass = this.activeClass == null ? activeClassFallback : this.activeClass;
    var exactActiveClass = this.exactActiveClass == null ? exactActiveClassFallback : this.exactActiveClass;
    var compareTarget = location.path ? createRoute(null, location, null, router) : route;
    classes[exactActiveClass] = isSameRoute(current, compareTarget);
    classes[activeClass] = this.exact ? classes[exactActiveClass] : isIncludedRoute(current, compareTarget);
    var handler = function(e) {
      if (guardEvent(e)) {
        if (this$1.replace) {
          router.replace(location);
        } else {
          router.push(location);
        }
      }
    };
    var on = {click: guardEvent};
    if (Array.isArray(this.event)) {
      this.event.forEach(function(e) {
        on[e] = handler;
      });
    } else {
      on[this.event] = handler;
    }
    var data = {
      class: classes
    };
    if (this.tag === \\"a\\") {
      data.on = on;
      data.attrs = {href};
    } else {
      var a = findAnchor(this.$slots.default);
      if (a) {
        a.isStatic = false;
        var extend = _Vue.util.extend;
        var aData = a.data = extend({}, a.data);
        aData.on = on;
        var aAttrs = a.data.attrs = extend({}, a.data.attrs);
        aAttrs.href = href;
      } else {
        data.on = on;
      }
    }
    return h(this.tag, data, this.$slots.default);
  }
};
function guardEvent(e) {
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) {
    return;
  }
  if (e.defaultPrevented) {
    return;
  }
  if (e.button !== void 0 && e.button !== 0) {
    return;
  }
  if (e.currentTarget && e.currentTarget.getAttribute) {
    var target = e.currentTarget.getAttribute(\\"target\\");
    if (/\\\\b_blank\\\\b/i.test(target)) {
      return;
    }
  }
  if (e.preventDefault) {
    e.preventDefault();
  }
  return true;
}
function findAnchor(children) {
  if (children) {
    var child;
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      if (child.tag === \\"a\\") {
        return child;
      }
      if (child.children && (child = findAnchor(child.children))) {
        return child;
      }
    }
  }
}
var _Vue;
function install(Vue) {
  if (install.installed && _Vue === Vue) {
    return;
  }
  install.installed = true;
  _Vue = Vue;
  var isDef = function(v) {
    return v !== void 0;
  };
  var registerInstance = function(vm, callVal) {
    var i = vm.$options._parentVnode;
    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
      i(vm, callVal);
    }
  };
  Vue.mixin({
    beforeCreate: function beforeCreate() {
      if (isDef(this.$options.router)) {
        this._routerRoot = this;
        this._router = this.$options.router;
        this._router.init(this);
        Vue.util.defineReactive(this, \\"_route\\", this._router.history.current);
      } else {
        this._routerRoot = this.$parent && this.$parent._routerRoot || this;
      }
      registerInstance(this, this);
    },
    destroyed: function destroyed() {
      registerInstance(this);
    }
  });
  Object.defineProperty(Vue.prototype, \\"$router\\", {
    get: function get() {
      return this._routerRoot._router;
    }
  });
  Object.defineProperty(Vue.prototype, \\"$route\\", {
    get: function get() {
      return this._routerRoot._route;
    }
  });
  Vue.component(\\"router-view\\", View);
  Vue.component(\\"router-link\\", Link);
  var strats = Vue.config.optionMergeStrategies;
  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
}
var inBrowser = typeof window !== \\"undefined\\";
function resolvePath(relative, base, append) {
  var firstChar = relative.charAt(0);
  if (firstChar === \\"/\\") {
    return relative;
  }
  if (firstChar === \\"?\\" || firstChar === \\"#\\") {
    return base + relative;
  }
  var stack = base.split(\\"/\\");
  if (!append || !stack[stack.length - 1]) {
    stack.pop();
  }
  var segments = relative.replace(/^\\\\//, \\"\\").split(\\"/\\");
  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];
    if (segment === \\"..\\") {
      stack.pop();
    } else if (segment !== \\".\\") {
      stack.push(segment);
    }
  }
  if (stack[0] !== \\"\\") {
    stack.unshift(\\"\\");
  }
  return stack.join(\\"/\\");
}
function parsePath(path) {
  var hash = \\"\\";
  var query = \\"\\";
  var hashIndex = path.indexOf(\\"#\\");
  if (hashIndex >= 0) {
    hash = path.slice(hashIndex);
    path = path.slice(0, hashIndex);
  }
  var queryIndex = path.indexOf(\\"?\\");
  if (queryIndex >= 0) {
    query = path.slice(queryIndex + 1);
    path = path.slice(0, queryIndex);
  }
  return {
    path,
    query,
    hash
  };
}
function cleanPath(path) {
  return path.replace(/\\\\/\\\\//g, \\"/\\");
}
var isarray = Array.isArray || function(arr) {
  return Object.prototype.toString.call(arr) == \\"[object Array]\\";
};
var pathToRegexp_1 = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;
var PATH_REGEXP = new RegExp([
  \\"(\\\\\\\\\\\\\\\\.)\\",
  \\"([\\\\\\\\/.])?(?:(?:\\\\\\\\:(\\\\\\\\w+)(?:\\\\\\\\(((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\()])+)\\\\\\\\))?|\\\\\\\\(((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\()])+)\\\\\\\\))([+*?])?|(\\\\\\\\*))\\"
].join(\\"|\\"), \\"g\\");
function parse(str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = \\"\\";
  var defaultDelimiter = options && options.delimiter || \\"/\\";
  var res;
  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length;
    if (escaped) {
      path += escaped[1];
      continue;
    }
    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7];
    if (path) {
      tokens.push(path);
      path = \\"\\";
    }
    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === \\"+\\" || modifier === \\"*\\";
    var optional = modifier === \\"?\\" || modifier === \\"*\\";
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;
    tokens.push({
      name: name || key++,
      prefix: prefix || \\"\\",
      delimiter,
      optional,
      repeat,
      partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? \\".*\\" : \\"[^\\" + escapeString(delimiter) + \\"]+?\\"
    });
  }
  if (index < str.length) {
    path += str.substr(index);
  }
  if (path) {
    tokens.push(path);
  }
  return tokens;
}
function compile(str, options) {
  return tokensToFunction(parse(str, options));
}
function encodeURIComponentPretty(str) {
  return encodeURI(str).replace(/[\\\\/?#]/g, function(c) {
    return \\"%\\" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
function encodeAsterisk(str) {
  return encodeURI(str).replace(/[?#]/g, function(c) {
    return \\"%\\" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
function tokensToFunction(tokens) {
  var matches = new Array(tokens.length);
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === \\"object\\") {
      matches[i] = new RegExp(\\"^(?:\\" + tokens[i].pattern + \\")$\\");
    }
  }
  return function(obj, opts) {
    var path = \\"\\";
    var data = obj || {};
    var options = opts || {};
    var encode2 = options.pretty ? encodeURIComponentPretty : encodeURIComponent;
    for (var i2 = 0; i2 < tokens.length; i2++) {
      var token = tokens[i2];
      if (typeof token === \\"string\\") {
        path += token;
        continue;
      }
      var value = data[token.name];
      var segment;
      if (value == null) {
        if (token.optional) {
          if (token.partial) {
            path += token.prefix;
          }
          continue;
        } else {
          throw new TypeError('Expected \\"' + token.name + '\\" to be defined');
        }
      }
      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected \\"' + token.name + '\\" to not repeat, but received \`' + JSON.stringify(value) + \\"\`\\");
        }
        if (value.length === 0) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected \\"' + token.name + '\\" to not be empty');
          }
        }
        for (var j = 0; j < value.length; j++) {
          segment = encode2(value[j]);
          if (!matches[i2].test(segment)) {
            throw new TypeError('Expected all \\"' + token.name + '\\" to match \\"' + token.pattern + '\\", but received \`' + JSON.stringify(segment) + \\"\`\\");
          }
          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }
        continue;
      }
      segment = token.asterisk ? encodeAsterisk(value) : encode2(value);
      if (!matches[i2].test(segment)) {
        throw new TypeError('Expected \\"' + token.name + '\\" to match \\"' + token.pattern + '\\", but received \\"' + segment + '\\"');
      }
      path += token.prefix + segment;
    }
    return path;
  };
}
function escapeString(str) {
  return str.replace(/([.+*?=^!:\${}()[\\\\]|\\\\/\\\\\\\\])/g, \\"\\\\\\\\$1\\");
}
function escapeGroup(group) {
  return group.replace(/([=!:$\\\\/()])/g, \\"\\\\\\\\$1\\");
}
function attachKeys(re, keys) {
  re.keys = keys;
  return re;
}
function flags(options) {
  return options.sensitive ? \\"\\" : \\"i\\";
}
function regexpToRegexp(path, keys) {
  var groups = path.source.match(/\\\\((?!\\\\?)/g);
  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }
  return attachKeys(path, keys);
}
function arrayToRegexp(path, keys, options) {
  var parts = [];
  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }
  var regexp = new RegExp(\\"(?:\\" + parts.join(\\"|\\") + \\")\\", flags(options));
  return attachKeys(regexp, keys);
}
function stringToRegexp(path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options);
}
function tokensToRegExp(tokens, keys, options) {
  if (!isarray(keys)) {
    options = keys || options;
    keys = [];
  }
  options = options || {};
  var strict = options.strict;
  var end = options.end !== false;
  var route = \\"\\";
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];
    if (typeof token === \\"string\\") {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = \\"(?:\\" + token.pattern + \\")\\";
      keys.push(token);
      if (token.repeat) {
        capture += \\"(?:\\" + prefix + capture + \\")*\\";
      }
      if (token.optional) {
        if (!token.partial) {
          capture = \\"(?:\\" + prefix + \\"(\\" + capture + \\"))?\\";
        } else {
          capture = prefix + \\"(\\" + capture + \\")?\\";
        }
      } else {
        capture = prefix + \\"(\\" + capture + \\")\\";
      }
      route += capture;
    }
  }
  var delimiter = escapeString(options.delimiter || \\"/\\");
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + \\"(?:\\" + delimiter + \\"(?=$))?\\";
  }
  if (end) {
    route += \\"$\\";
  } else {
    route += strict && endsWithDelimiter ? \\"\\" : \\"(?=\\" + delimiter + \\"|$)\\";
  }
  return attachKeys(new RegExp(\\"^\\" + route, flags(options)), keys);
}
function pathToRegexp(path, keys, options) {
  if (!isarray(keys)) {
    options = keys || options;
    keys = [];
  }
  options = options || {};
  if (path instanceof RegExp) {
    return regexpToRegexp(path, keys);
  }
  if (isarray(path)) {
    return arrayToRegexp(path, keys, options);
  }
  return stringToRegexp(path, keys, options);
}
pathToRegexp_1.parse = parse_1;
pathToRegexp_1.compile = compile_1;
pathToRegexp_1.tokensToFunction = tokensToFunction_1;
pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;
var regexpCompileCache = Object.create(null);
function fillParams(path, params, routeMsg) {
  try {
    var filler = regexpCompileCache[path] || (regexpCompileCache[path] = pathToRegexp_1.compile(path));
    return filler(params || {}, {pretty: true});
  } catch (e) {
    if (true) {
      warn(false, \\"missing param for \\" + routeMsg + \\": \\" + e.message);
    }
    return \\"\\";
  }
}
function createRouteMap(routes, oldPathList, oldPathMap, oldNameMap) {
  var pathList = oldPathList || [];
  var pathMap = oldPathMap || Object.create(null);
  var nameMap = oldNameMap || Object.create(null);
  routes.forEach(function(route) {
    addRouteRecord(pathList, pathMap, nameMap, route);
  });
  for (var i = 0, l = pathList.length; i < l; i++) {
    if (pathList[i] === \\"*\\") {
      pathList.push(pathList.splice(i, 1)[0]);
      l--;
      i--;
    }
  }
  return {
    pathList,
    pathMap,
    nameMap
  };
}
function addRouteRecord(pathList, pathMap, nameMap, route, parent, matchAs) {
  var path = route.path;
  var name = route.name;
  if (true) {
    assert(path != null, '\\"path\\" is required in a route configuration.');
    assert(typeof route.component !== \\"string\\", 'route config \\"component\\" for path: ' + String(path || name) + \\" cannot be a string id. Use an actual component instead.\\");
  }
  var pathToRegexpOptions = route.pathToRegexpOptions || {};
  var normalizedPath = normalizePath(path, parent, pathToRegexpOptions.strict);
  if (typeof route.caseSensitive === \\"boolean\\") {
    pathToRegexpOptions.sensitive = route.caseSensitive;
  }
  var record = {
    path: normalizedPath,
    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
    components: route.components || {default: route.component},
    instances: {},
    name,
    parent,
    matchAs,
    redirect: route.redirect,
    beforeEnter: route.beforeEnter,
    meta: route.meta || {},
    props: route.props == null ? {} : route.components ? route.props : {default: route.props}
  };
  if (route.children) {
    if (true) {
      if (route.name && !route.redirect && route.children.some(function(child) {
        return /^\\\\/?$/.test(child.path);
      })) {
        warn(false, \\"Named Route '\\" + route.name + \`' has a default child route. When navigating to this named route (:to=\\"{name: '\` + route.name + \`'\\"), the default child route will not be rendered. Remove the name from this route and use the name of the default child route for named links instead.\`);
      }
    }
    route.children.forEach(function(child) {
      var childMatchAs = matchAs ? cleanPath(matchAs + \\"/\\" + child.path) : void 0;
      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
    });
  }
  if (route.alias !== void 0) {
    var aliases = Array.isArray(route.alias) ? route.alias : [route.alias];
    aliases.forEach(function(alias) {
      var aliasRoute = {
        path: alias,
        children: route.children
      };
      addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path || \\"/\\");
    });
  }
  if (!pathMap[record.path]) {
    pathList.push(record.path);
    pathMap[record.path] = record;
  }
  if (name) {
    if (!nameMap[name]) {
      nameMap[name] = record;
    } else if (!matchAs) {
      warn(false, 'Duplicate named routes definition: { name: \\"' + name + '\\", path: \\"' + record.path + '\\" }');
    }
  }
}
function compileRouteRegex(path, pathToRegexpOptions) {
  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);
  if (true) {
    var keys = Object.create(null);
    regex.keys.forEach(function(key) {
      warn(!keys[key.name], 'Duplicate param keys in route with path: \\"' + path + '\\"');
      keys[key.name] = true;
    });
  }
  return regex;
}
function normalizePath(path, parent, strict) {
  if (!strict) {
    path = path.replace(/\\\\/$/, \\"\\");
  }
  if (path[0] === \\"/\\") {
    return path;
  }
  if (parent == null) {
    return path;
  }
  return cleanPath(parent.path + \\"/\\" + path);
}
function normalizeLocation(raw, current, append, router) {
  var next = typeof raw === \\"string\\" ? {path: raw} : raw;
  if (next.name || next._normalized) {
    return next;
  }
  if (!next.path && next.params && current) {
    next = assign({}, next);
    next._normalized = true;
    var params = assign(assign({}, current.params), next.params);
    if (current.name) {
      next.name = current.name;
      next.params = params;
    } else if (current.matched.length) {
      var rawPath = current.matched[current.matched.length - 1].path;
      next.path = fillParams(rawPath, params, \\"path \\" + current.path);
    } else if (true) {
      warn(false, \\"relative params navigation requires a current route.\\");
    }
    return next;
  }
  var parsedPath = parsePath(next.path || \\"\\");
  var basePath = current && current.path || \\"/\\";
  var path = parsedPath.path ? resolvePath(parsedPath.path, basePath, append || next.append) : basePath;
  var query = resolveQuery(parsedPath.query, next.query, router && router.options.parseQuery);
  var hash = next.hash || parsedPath.hash;
  if (hash && hash.charAt(0) !== \\"#\\") {
    hash = \\"#\\" + hash;
  }
  return {
    _normalized: true,
    path,
    query,
    hash
  };
}
function assign(a, b) {
  for (var key in b) {
    a[key] = b[key];
  }
  return a;
}
function createMatcher(routes, router) {
  var ref = createRouteMap(routes);
  var pathList = ref.pathList;
  var pathMap = ref.pathMap;
  var nameMap = ref.nameMap;
  function addRoutes2(routes2) {
    createRouteMap(routes2, pathList, pathMap, nameMap);
  }
  function match2(raw, currentRoute, redirectedFrom) {
    var location = normalizeLocation(raw, currentRoute, false, router);
    var name = location.name;
    if (name) {
      var record = nameMap[name];
      if (true) {
        warn(record, \\"Route with name '\\" + name + \\"' does not exist\\");
      }
      if (!record) {
        return _createRoute(null, location);
      }
      var paramNames = record.regex.keys.filter(function(key2) {
        return !key2.optional;
      }).map(function(key2) {
        return key2.name;
      });
      if (typeof location.params !== \\"object\\") {
        location.params = {};
      }
      if (currentRoute && typeof currentRoute.params === \\"object\\") {
        for (var key in currentRoute.params) {
          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
            location.params[key] = currentRoute.params[key];
          }
        }
      }
      if (record) {
        location.path = fillParams(record.path, location.params, 'named route \\"' + name + '\\"');
        return _createRoute(record, location, redirectedFrom);
      }
    } else if (location.path) {
      location.params = {};
      for (var i = 0; i < pathList.length; i++) {
        var path = pathList[i];
        var record$1 = pathMap[path];
        if (matchRoute(record$1.regex, location.path, location.params)) {
          return _createRoute(record$1, location, redirectedFrom);
        }
      }
    }
    return _createRoute(null, location);
  }
  function redirect(record, location) {
    var originalRedirect = record.redirect;
    var redirect2 = typeof originalRedirect === \\"function\\" ? originalRedirect(createRoute(record, location, null, router)) : originalRedirect;
    if (typeof redirect2 === \\"string\\") {
      redirect2 = {path: redirect2};
    }
    if (!redirect2 || typeof redirect2 !== \\"object\\") {
      if (true) {
        warn(false, \\"invalid redirect option: \\" + JSON.stringify(redirect2));
      }
      return _createRoute(null, location);
    }
    var re = redirect2;
    var name = re.name;
    var path = re.path;
    var query = location.query;
    var hash = location.hash;
    var params = location.params;
    query = re.hasOwnProperty(\\"query\\") ? re.query : query;
    hash = re.hasOwnProperty(\\"hash\\") ? re.hash : hash;
    params = re.hasOwnProperty(\\"params\\") ? re.params : params;
    if (name) {
      var targetRecord = nameMap[name];
      if (true) {
        assert(targetRecord, 'redirect failed: named route \\"' + name + '\\" not found.');
      }
      return match2({
        _normalized: true,
        name,
        query,
        hash,
        params
      }, void 0, location);
    } else if (path) {
      var rawPath = resolveRecordPath(path, record);
      var resolvedPath = fillParams(rawPath, params, 'redirect route with path \\"' + rawPath + '\\"');
      return match2({
        _normalized: true,
        path: resolvedPath,
        query,
        hash
      }, void 0, location);
    } else {
      if (true) {
        warn(false, \\"invalid redirect option: \\" + JSON.stringify(redirect2));
      }
      return _createRoute(null, location);
    }
  }
  function alias(record, location, matchAs) {
    var aliasedPath = fillParams(matchAs, location.params, 'aliased route with path \\"' + matchAs + '\\"');
    var aliasedMatch = match2({
      _normalized: true,
      path: aliasedPath
    });
    if (aliasedMatch) {
      var matched = aliasedMatch.matched;
      var aliasedRecord = matched[matched.length - 1];
      location.params = aliasedMatch.params;
      return _createRoute(aliasedRecord, location);
    }
    return _createRoute(null, location);
  }
  function _createRoute(record, location, redirectedFrom) {
    if (record && record.redirect) {
      return redirect(record, redirectedFrom || location);
    }
    if (record && record.matchAs) {
      return alias(record, location, record.matchAs);
    }
    return createRoute(record, location, redirectedFrom, router);
  }
  return {
    match: match2,
    addRoutes: addRoutes2
  };
}
function matchRoute(regex, path, params) {
  var m = path.match(regex);
  if (!m) {
    return false;
  } else if (!params) {
    return true;
  }
  for (var i = 1, len = m.length; i < len; ++i) {
    var key = regex.keys[i - 1];
    var val = typeof m[i] === \\"string\\" ? decodeURIComponent(m[i]) : m[i];
    if (key) {
      params[key.name] = val;
    }
  }
  return true;
}
function resolveRecordPath(path, record) {
  return resolvePath(path, record.parent ? record.parent.path : \\"/\\", true);
}
var positionStore = Object.create(null);
function setupScroll() {
  window.history.replaceState({key: getStateKey()}, \\"\\");
  window.addEventListener(\\"popstate\\", function(e) {
    saveScrollPosition();
    if (e.state && e.state.key) {
      setStateKey(e.state.key);
    }
  });
}
function handleScroll(router, to, from, isPop) {
  if (!router.app) {
    return;
  }
  var behavior = router.options.scrollBehavior;
  if (!behavior) {
    return;
  }
  if (true) {
    assert(typeof behavior === \\"function\\", \\"scrollBehavior must be a function\\");
  }
  router.app.$nextTick(function() {
    var position = getScrollPosition();
    var shouldScroll = behavior(to, from, isPop ? position : null);
    if (!shouldScroll) {
      return;
    }
    if (typeof shouldScroll.then === \\"function\\") {
      shouldScroll.then(function(shouldScroll2) {
        scrollToPosition(shouldScroll2, position);
      }).catch(function(err) {
        if (true) {
          assert(false, err.toString());
        }
      });
    } else {
      scrollToPosition(shouldScroll, position);
    }
  });
}
function saveScrollPosition() {
  var key = getStateKey();
  if (key) {
    positionStore[key] = {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }
}
function getScrollPosition() {
  var key = getStateKey();
  if (key) {
    return positionStore[key];
  }
}
function getElementPosition(el, offset) {
  var docEl = document.documentElement;
  var docRect = docEl.getBoundingClientRect();
  var elRect = el.getBoundingClientRect();
  return {
    x: elRect.left - docRect.left - offset.x,
    y: elRect.top - docRect.top - offset.y
  };
}
function isValidPosition(obj) {
  return isNumber(obj.x) || isNumber(obj.y);
}
function normalizePosition(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : window.pageXOffset,
    y: isNumber(obj.y) ? obj.y : window.pageYOffset
  };
}
function normalizeOffset(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : 0,
    y: isNumber(obj.y) ? obj.y : 0
  };
}
function isNumber(v) {
  return typeof v === \\"number\\";
}
function scrollToPosition(shouldScroll, position) {
  var isObject = typeof shouldScroll === \\"object\\";
  if (isObject && typeof shouldScroll.selector === \\"string\\") {
    var el = document.querySelector(shouldScroll.selector);
    if (el) {
      var offset = shouldScroll.offset && typeof shouldScroll.offset === \\"object\\" ? shouldScroll.offset : {};
      offset = normalizeOffset(offset);
      position = getElementPosition(el, offset);
    } else if (isValidPosition(shouldScroll)) {
      position = normalizePosition(shouldScroll);
    }
  } else if (isObject && isValidPosition(shouldScroll)) {
    position = normalizePosition(shouldScroll);
  }
  if (position) {
    window.scrollTo(position.x, position.y);
  }
}
var supportsPushState = inBrowser && function() {
  var ua = window.navigator.userAgent;
  if ((ua.indexOf(\\"Android 2.\\") !== -1 || ua.indexOf(\\"Android 4.0\\") !== -1) && ua.indexOf(\\"Mobile Safari\\") !== -1 && ua.indexOf(\\"Chrome\\") === -1 && ua.indexOf(\\"Windows Phone\\") === -1) {
    return false;
  }
  return window.history && \\"pushState\\" in window.history;
}();
var Time = inBrowser && window.performance && window.performance.now ? window.performance : Date;
var _key = genKey();
function genKey() {
  return Time.now().toFixed(3);
}
function getStateKey() {
  return _key;
}
function setStateKey(key) {
  _key = key;
}
function pushState(url, replace2) {
  saveScrollPosition();
  var history = window.history;
  try {
    if (replace2) {
      history.replaceState({key: _key}, \\"\\", url);
    } else {
      _key = genKey();
      history.pushState({key: _key}, \\"\\", url);
    }
  } catch (e) {
    window.location[replace2 ? \\"replace\\" : \\"assign\\"](url);
  }
}
function replaceState(url) {
  pushState(url, true);
}
function runQueue(queue, fn, cb) {
  var step = function(index) {
    if (index >= queue.length) {
      cb();
    } else {
      if (queue[index]) {
        fn(queue[index], function() {
          step(index + 1);
        });
      } else {
        step(index + 1);
      }
    }
  };
  step(0);
}
function resolveAsyncComponents(matched) {
  return function(to, from, next) {
    var hasAsync = false;
    var pending = 0;
    var error = null;
    flatMapComponents(matched, function(def, _, match2, key) {
      if (typeof def === \\"function\\" && def.cid === void 0) {
        hasAsync = true;
        pending++;
        var resolve2 = once(function(resolvedDef) {
          if (isESModule(resolvedDef)) {
            resolvedDef = resolvedDef.default;
          }
          def.resolved = typeof resolvedDef === \\"function\\" ? resolvedDef : _Vue.extend(resolvedDef);
          match2.components[key] = resolvedDef;
          pending--;
          if (pending <= 0) {
            next();
          }
        });
        var reject = once(function(reason) {
          var msg = \\"Failed to resolve async component \\" + key + \\": \\" + reason;
          warn(false, msg);
          if (!error) {
            error = isError(reason) ? reason : new Error(msg);
            next(error);
          }
        });
        var res;
        try {
          res = def(resolve2, reject);
        } catch (e) {
          reject(e);
        }
        if (res) {
          if (typeof res.then === \\"function\\") {
            res.then(resolve2, reject);
          } else {
            var comp = res.component;
            if (comp && typeof comp.then === \\"function\\") {
              comp.then(resolve2, reject);
            }
          }
        }
      }
    });
    if (!hasAsync) {
      next();
    }
  };
}
function flatMapComponents(matched, fn) {
  return flatten(matched.map(function(m) {
    return Object.keys(m.components).map(function(key) {
      return fn(m.components[key], m.instances[key], m, key);
    });
  }));
}
function flatten(arr) {
  return Array.prototype.concat.apply([], arr);
}
var hasSymbol = typeof Symbol === \\"function\\" && typeof Symbol.toStringTag === \\"symbol\\";
function isESModule(obj) {
  return obj.__esModule || hasSymbol && obj[Symbol.toStringTag] === \\"Module\\";
}
function once(fn) {
  var called = false;
  return function() {
    var args = [], len = arguments.length;
    while (len--)
      args[len] = arguments[len];
    if (called) {
      return;
    }
    called = true;
    return fn.apply(this, args);
  };
}
var History = function History2(router, base) {
  this.router = router;
  this.base = normalizeBase(base);
  this.current = START;
  this.pending = null;
  this.ready = false;
  this.readyCbs = [];
  this.readyErrorCbs = [];
  this.errorCbs = [];
};
History.prototype.listen = function listen(cb) {
  this.cb = cb;
};
History.prototype.onReady = function onReady(cb, errorCb) {
  if (this.ready) {
    cb();
  } else {
    this.readyCbs.push(cb);
    if (errorCb) {
      this.readyErrorCbs.push(errorCb);
    }
  }
};
History.prototype.onError = function onError(errorCb) {
  this.errorCbs.push(errorCb);
};
History.prototype.transitionTo = function transitionTo(location, onComplete, onAbort) {
  var this$1 = this;
  var route = this.router.match(location, this.current);
  this.confirmTransition(route, function() {
    this$1.updateRoute(route);
    onComplete && onComplete(route);
    this$1.ensureURL();
    if (!this$1.ready) {
      this$1.ready = true;
      this$1.readyCbs.forEach(function(cb) {
        cb(route);
      });
    }
  }, function(err) {
    if (onAbort) {
      onAbort(err);
    }
    if (err && !this$1.ready) {
      this$1.ready = true;
      this$1.readyErrorCbs.forEach(function(cb) {
        cb(err);
      });
    }
  });
};
History.prototype.confirmTransition = function confirmTransition(route, onComplete, onAbort) {
  var this$1 = this;
  var current = this.current;
  var abort = function(err) {
    if (isError(err)) {
      if (this$1.errorCbs.length) {
        this$1.errorCbs.forEach(function(cb) {
          cb(err);
        });
      } else {
        warn(false, \\"uncaught error during route navigation:\\");
        console.error(err);
      }
    }
    onAbort && onAbort(err);
  };
  if (isSameRoute(route, current) && route.matched.length === current.matched.length) {
    this.ensureURL();
    return abort();
  }
  var ref = resolveQueue(this.current.matched, route.matched);
  var updated = ref.updated;
  var deactivated = ref.deactivated;
  var activated = ref.activated;
  var queue = [].concat(extractLeaveGuards(deactivated), this.router.beforeHooks, extractUpdateHooks(updated), activated.map(function(m) {
    return m.beforeEnter;
  }), resolveAsyncComponents(activated));
  this.pending = route;
  var iterator = function(hook, next) {
    if (this$1.pending !== route) {
      return abort();
    }
    try {
      hook(route, current, function(to) {
        if (to === false || isError(to)) {
          this$1.ensureURL(true);
          abort(to);
        } else if (typeof to === \\"string\\" || typeof to === \\"object\\" && (typeof to.path === \\"string\\" || typeof to.name === \\"string\\")) {
          abort();
          if (typeof to === \\"object\\" && to.replace) {
            this$1.replace(to);
          } else {
            this$1.push(to);
          }
        } else {
          next(to);
        }
      });
    } catch (e) {
      abort(e);
    }
  };
  runQueue(queue, iterator, function() {
    var postEnterCbs = [];
    var isValid = function() {
      return this$1.current === route;
    };
    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);
    var queue2 = enterGuards.concat(this$1.router.resolveHooks);
    runQueue(queue2, iterator, function() {
      if (this$1.pending !== route) {
        return abort();
      }
      this$1.pending = null;
      onComplete(route);
      if (this$1.router.app) {
        this$1.router.app.$nextTick(function() {
          postEnterCbs.forEach(function(cb) {
            cb();
          });
        });
      }
    });
  });
};
History.prototype.updateRoute = function updateRoute(route) {
  var prev = this.current;
  this.current = route;
  this.cb && this.cb(route);
  this.router.afterHooks.forEach(function(hook) {
    hook && hook(route, prev);
  });
};
function normalizeBase(base) {
  if (!base) {
    if (inBrowser) {
      var baseEl = document.querySelector(\\"base\\");
      base = baseEl && baseEl.getAttribute(\\"href\\") || \\"/\\";
      base = base.replace(/^https?:\\\\/\\\\/[^\\\\/]+/, \\"\\");
    } else {
      base = \\"/\\";
    }
  }
  if (base.charAt(0) !== \\"/\\") {
    base = \\"/\\" + base;
  }
  return base.replace(/\\\\/$/, \\"\\");
}
function resolveQueue(current, next) {
  var i;
  var max = Math.max(current.length, next.length);
  for (i = 0; i < max; i++) {
    if (current[i] !== next[i]) {
      break;
    }
  }
  return {
    updated: next.slice(0, i),
    activated: next.slice(i),
    deactivated: current.slice(i)
  };
}
function extractGuards(records, name, bind, reverse) {
  var guards = flatMapComponents(records, function(def, instance, match2, key) {
    var guard = extractGuard(def, name);
    if (guard) {
      return Array.isArray(guard) ? guard.map(function(guard2) {
        return bind(guard2, instance, match2, key);
      }) : bind(guard, instance, match2, key);
    }
  });
  return flatten(reverse ? guards.reverse() : guards);
}
function extractGuard(def, key) {
  if (typeof def !== \\"function\\") {
    def = _Vue.extend(def);
  }
  return def.options[key];
}
function extractLeaveGuards(deactivated) {
  return extractGuards(deactivated, \\"beforeRouteLeave\\", bindGuard, true);
}
function extractUpdateHooks(updated) {
  return extractGuards(updated, \\"beforeRouteUpdate\\", bindGuard);
}
function bindGuard(guard, instance) {
  if (instance) {
    return function boundRouteGuard() {
      return guard.apply(instance, arguments);
    };
  }
}
function extractEnterGuards(activated, cbs, isValid) {
  return extractGuards(activated, \\"beforeRouteEnter\\", function(guard, _, match2, key) {
    return bindEnterGuard(guard, match2, key, cbs, isValid);
  });
}
function bindEnterGuard(guard, match2, key, cbs, isValid) {
  return function routeEnterGuard(to, from, next) {
    return guard(to, from, function(cb) {
      next(cb);
      if (typeof cb === \\"function\\") {
        cbs.push(function() {
          poll(cb, match2.instances, key, isValid);
        });
      }
    });
  };
}
function poll(cb, instances, key, isValid) {
  if (instances[key]) {
    cb(instances[key]);
  } else if (isValid()) {
    setTimeout(function() {
      poll(cb, instances, key, isValid);
    }, 16);
  }
}
var HTML5History = function(History$$1) {
  function HTML5History2(router, base) {
    var this$1 = this;
    History$$1.call(this, router, base);
    var expectScroll = router.options.scrollBehavior;
    if (expectScroll) {
      setupScroll();
    }
    var initLocation = getLocation(this.base);
    window.addEventListener(\\"popstate\\", function(e) {
      var current = this$1.current;
      var location = getLocation(this$1.base);
      if (this$1.current === START && location === initLocation) {
        return;
      }
      this$1.transitionTo(location, function(route) {
        if (expectScroll) {
          handleScroll(router, route, current, true);
        }
      });
    });
  }
  if (History$$1)
    HTML5History2.__proto__ = History$$1;
  HTML5History2.prototype = Object.create(History$$1 && History$$1.prototype);
  HTML5History2.prototype.constructor = HTML5History2;
  HTML5History2.prototype.go = function go2(n) {
    window.history.go(n);
  };
  HTML5History2.prototype.push = function push2(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function(route) {
      pushState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };
  HTML5History2.prototype.replace = function replace2(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function(route) {
      replaceState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };
  HTML5History2.prototype.ensureURL = function ensureURL(push2) {
    if (getLocation(this.base) !== this.current.fullPath) {
      var current = cleanPath(this.base + this.current.fullPath);
      push2 ? pushState(current) : replaceState(current);
    }
  };
  HTML5History2.prototype.getCurrentLocation = function getCurrentLocation() {
    return getLocation(this.base);
  };
  return HTML5History2;
}(History);
function getLocation(base) {
  var path = window.location.pathname;
  if (base && path.indexOf(base) === 0) {
    path = path.slice(base.length);
  }
  return (path || \\"/\\") + window.location.search + window.location.hash;
}
var HashHistory = function(History$$1) {
  function HashHistory2(router, base, fallback) {
    History$$1.call(this, router, base);
    if (fallback && checkFallback(this.base)) {
      return;
    }
    ensureSlash();
  }
  if (History$$1)
    HashHistory2.__proto__ = History$$1;
  HashHistory2.prototype = Object.create(History$$1 && History$$1.prototype);
  HashHistory2.prototype.constructor = HashHistory2;
  HashHistory2.prototype.setupListeners = function setupListeners() {
    var this$1 = this;
    var router = this.router;
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;
    if (supportsScroll) {
      setupScroll();
    }
    window.addEventListener(supportsPushState ? \\"popstate\\" : \\"hashchange\\", function() {
      var current = this$1.current;
      if (!ensureSlash()) {
        return;
      }
      this$1.transitionTo(getHash(), function(route) {
        if (supportsScroll) {
          handleScroll(this$1.router, route, current, true);
        }
        if (!supportsPushState) {
          replaceHash(route.fullPath);
        }
      });
    });
  };
  HashHistory2.prototype.push = function push2(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function(route) {
      pushHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };
  HashHistory2.prototype.replace = function replace2(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function(route) {
      replaceHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };
  HashHistory2.prototype.go = function go2(n) {
    window.history.go(n);
  };
  HashHistory2.prototype.ensureURL = function ensureURL(push2) {
    var current = this.current.fullPath;
    if (getHash() !== current) {
      push2 ? pushHash(current) : replaceHash(current);
    }
  };
  HashHistory2.prototype.getCurrentLocation = function getCurrentLocation() {
    return getHash();
  };
  return HashHistory2;
}(History);
function checkFallback(base) {
  var location = getLocation(base);
  if (!/^\\\\/#/.test(location)) {
    window.location.replace(cleanPath(base + \\"/#\\" + location));
    return true;
  }
}
function ensureSlash() {
  var path = getHash();
  if (path.charAt(0) === \\"/\\") {
    return true;
  }
  replaceHash(\\"/\\" + path);
  return false;
}
function getHash() {
  var href = window.location.href;
  var index = href.indexOf(\\"#\\");
  return index === -1 ? \\"\\" : href.slice(index + 1);
}
function getUrl(path) {
  var href = window.location.href;
  var i = href.indexOf(\\"#\\");
  var base = i >= 0 ? href.slice(0, i) : href;
  return base + \\"#\\" + path;
}
function pushHash(path) {
  if (supportsPushState) {
    pushState(getUrl(path));
  } else {
    window.location.hash = path;
  }
}
function replaceHash(path) {
  if (supportsPushState) {
    replaceState(getUrl(path));
  } else {
    window.location.replace(getUrl(path));
  }
}
var AbstractHistory = function(History$$1) {
  function AbstractHistory2(router, base) {
    History$$1.call(this, router, base);
    this.stack = [];
    this.index = -1;
  }
  if (History$$1)
    AbstractHistory2.__proto__ = History$$1;
  AbstractHistory2.prototype = Object.create(History$$1 && History$$1.prototype);
  AbstractHistory2.prototype.constructor = AbstractHistory2;
  AbstractHistory2.prototype.push = function push2(location, onComplete, onAbort) {
    var this$1 = this;
    this.transitionTo(location, function(route) {
      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
      this$1.index++;
      onComplete && onComplete(route);
    }, onAbort);
  };
  AbstractHistory2.prototype.replace = function replace2(location, onComplete, onAbort) {
    var this$1 = this;
    this.transitionTo(location, function(route) {
      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
      onComplete && onComplete(route);
    }, onAbort);
  };
  AbstractHistory2.prototype.go = function go2(n) {
    var this$1 = this;
    var targetIndex = this.index + n;
    if (targetIndex < 0 || targetIndex >= this.stack.length) {
      return;
    }
    var route = this.stack[targetIndex];
    this.confirmTransition(route, function() {
      this$1.index = targetIndex;
      this$1.updateRoute(route);
    });
  };
  AbstractHistory2.prototype.getCurrentLocation = function getCurrentLocation() {
    var current = this.stack[this.stack.length - 1];
    return current ? current.fullPath : \\"/\\";
  };
  AbstractHistory2.prototype.ensureURL = function ensureURL() {
  };
  return AbstractHistory2;
}(History);
var VueRouter = function VueRouter2(options) {
  if (options === void 0)
    options = {};
  this.app = null;
  this.apps = [];
  this.options = options;
  this.beforeHooks = [];
  this.resolveHooks = [];
  this.afterHooks = [];
  this.matcher = createMatcher(options.routes || [], this);
  var mode = options.mode || \\"hash\\";
  this.fallback = mode === \\"history\\" && !supportsPushState && options.fallback !== false;
  if (this.fallback) {
    mode = \\"hash\\";
  }
  if (!inBrowser) {
    mode = \\"abstract\\";
  }
  this.mode = mode;
  switch (mode) {
    case \\"history\\":
      this.history = new HTML5History(this, options.base);
      break;
    case \\"hash\\":
      this.history = new HashHistory(this, options.base, this.fallback);
      break;
    case \\"abstract\\":
      this.history = new AbstractHistory(this, options.base);
      break;
    default:
      if (true) {
        assert(false, \\"invalid mode: \\" + mode);
      }
  }
};
var prototypeAccessors = {currentRoute: {configurable: true}};
VueRouter.prototype.match = function match(raw, current, redirectedFrom) {
  return this.matcher.match(raw, current, redirectedFrom);
};
prototypeAccessors.currentRoute.get = function() {
  return this.history && this.history.current;
};
VueRouter.prototype.init = function init(app) {
  var this$1 = this;
  assert(install.installed, \\"not installed. Make sure to call \`Vue.use(VueRouter)\` before creating root instance.\\");
  this.apps.push(app);
  if (this.app) {
    return;
  }
  this.app = app;
  var history = this.history;
  if (history instanceof HTML5History) {
    history.transitionTo(history.getCurrentLocation());
  } else if (history instanceof HashHistory) {
    var setupHashListener = function() {
      history.setupListeners();
    };
    history.transitionTo(history.getCurrentLocation(), setupHashListener, setupHashListener);
  }
  history.listen(function(route) {
    this$1.apps.forEach(function(app2) {
      app2._route = route;
    });
  });
};
VueRouter.prototype.beforeEach = function beforeEach(fn) {
  return registerHook(this.beforeHooks, fn);
};
VueRouter.prototype.beforeResolve = function beforeResolve(fn) {
  return registerHook(this.resolveHooks, fn);
};
VueRouter.prototype.afterEach = function afterEach(fn) {
  return registerHook(this.afterHooks, fn);
};
VueRouter.prototype.onReady = function onReady2(cb, errorCb) {
  this.history.onReady(cb, errorCb);
};
VueRouter.prototype.onError = function onError2(errorCb) {
  this.history.onError(errorCb);
};
VueRouter.prototype.push = function push(location, onComplete, onAbort) {
  this.history.push(location, onComplete, onAbort);
};
VueRouter.prototype.replace = function replace(location, onComplete, onAbort) {
  this.history.replace(location, onComplete, onAbort);
};
VueRouter.prototype.go = function go(n) {
  this.history.go(n);
};
VueRouter.prototype.back = function back() {
  this.go(-1);
};
VueRouter.prototype.forward = function forward() {
  this.go(1);
};
VueRouter.prototype.getMatchedComponents = function getMatchedComponents(to) {
  var route = to ? to.matched ? to : this.resolve(to).route : this.currentRoute;
  if (!route) {
    return [];
  }
  return [].concat.apply([], route.matched.map(function(m) {
    return Object.keys(m.components).map(function(key) {
      return m.components[key];
    });
  }));
};
VueRouter.prototype.resolve = function resolve(to, current, append) {
  var location = normalizeLocation(to, current || this.history.current, append, this);
  var route = this.match(location, current);
  var fullPath = route.redirectedFrom || route.fullPath;
  var base = this.history.base;
  var href = createHref(base, fullPath, this.mode);
  return {
    location,
    route,
    href,
    normalizedTo: location,
    resolved: route
  };
};
VueRouter.prototype.addRoutes = function addRoutes(routes) {
  this.matcher.addRoutes(routes);
  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};
Object.defineProperties(VueRouter.prototype, prototypeAccessors);
function registerHook(list, fn) {
  list.push(fn);
  return function() {
    var i = list.indexOf(fn);
    if (i > -1) {
      list.splice(i, 1);
    }
  };
}
function createHref(base, fullPath, mode) {
  var path = mode === \\"hash\\" ? \\"#\\" + fullPath : fullPath;
  return base ? cleanPath(base + \\"/\\" + path) : path;
}
VueRouter.install = install;
VueRouter.version = \\"3.0.0\\";
if (inBrowser && window.Vue) {
  window.Vue.use(VueRouter);
}
var vue_router_esm_default = VueRouter;
export {
  vue_router_esm_default as default
};"
`;
