{"version":3,"file":"until.js","sourceRoot":"","sources":["../src/directives/until.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH,OAAO,EAAC,WAAW,EAAC,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EAAC,SAAS,EAAO,MAAM,gBAAgB,CAAC;AAY/C,MAAM,MAAM,GAAG,IAAI,OAAO,EAAoB,CAAC;AAC/C,mCAAmC;AACnC,MAAM,SAAS,GAAG,UAAU,CAAC;AAE7B;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,CAAC,MAAM,KAAK,GAAG,SAAS,CAAC,CAAC,GAAG,IAAe,EAAE,EAAE,CAAC,CAAC,IAAU,EAAE,EAAE;IACpE,IAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;IAC9B,IAAI,KAAK,KAAK,SAAS,EAAE;QACvB,KAAK,GAAG;YACN,iBAAiB,EAAE,SAAS;YAC5B,MAAM,EAAE,EAAE;SACX,CAAC;QACF,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;KACzB;IACD,MAAM,cAAc,GAAG,KAAK,CAAC,MAAM,CAAC;IACpC,IAAI,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC;IAC3C,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;IAEpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACpC,2DAA2D;QAC3D,IAAI,CAAC,GAAG,KAAK,CAAC,iBAAiB,EAAE;YAC/B,MAAM;SACP;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAEtB,wCAAwC;QACxC,IAAI,WAAW,CAAC,KAAK,CAAC;YAClB,OAAQ,KAA0B,CAAC,IAAI,KAAK,UAAU,EAAE;YAC1D,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrB,KAAK,CAAC,iBAAiB,GAAG,CAAC,CAAC;YAC5B,sEAAsE;YACtE,kDAAkD;YAClD,MAAM;SACP;QAED,uDAAuD;QACvD,IAAI,CAAC,GAAG,cAAc,IAAI,KAAK,KAAK,cAAc,CAAC,CAAC,CAAC,EAAE;YACrD,SAAS;SACV;QAED,wEAAwE;QACxE,2CAA2C;QAC3C,KAAK,CAAC,iBAAiB,GAAG,SAAS,CAAC;QACpC,cAAc,GAAG,CAAC,CAAC;QAEnB,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,aAAsB,EAAE,EAAE;YACrD,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC1C,uEAAuE;YACvE,mEAAmE;YACnE,qDAAqD;YACrD,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,KAAK,CAAC,iBAAiB,EAAE;gBACjD,KAAK,CAAC,iBAAiB,GAAG,KAAK,CAAC;gBAChC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;gBAC7B,IAAI,CAAC,MAAM,EAAE,CAAC;aACf;QACH,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isPrimitive} from '../lib/parts.js';\nimport {directive, Part} from '../lit-html.js';\n\ninterface AsyncState {\n  /**\n   * The last rendered index of a call to until(). A value only renders if its\n   * index is less than the `lastRenderedIndex`.\n   */\n  lastRenderedIndex: number;\n\n  values: unknown[];\n}\n\nconst _state = new WeakMap<Part, AsyncState>();\n// Effectively infinity, but a SMI.\nconst _infinity = 0x7fffffff;\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n *     const content = fetch('./content.txt').then(r => r.text());\n *     html`${until(content, html`<span>Loading...</span>`)}`\n */\nexport const until = directive((...args: unknown[]) => (part: Part) => {\n  let state = _state.get(part)!;\n  if (state === undefined) {\n    state = {\n      lastRenderedIndex: _infinity,\n      values: [],\n    };\n    _state.set(part, state);\n  }\n  const previousValues = state.values;\n  let previousLength = previousValues.length;\n  state.values = args;\n\n  for (let i = 0; i < args.length; i++) {\n    // If we've rendered a higher-priority value already, stop.\n    if (i > state.lastRenderedIndex) {\n      break;\n    }\n\n    const value = args[i];\n\n    // Render non-Promise values immediately\n    if (isPrimitive(value) ||\n        typeof (value as {then?: unknown}).then !== 'function') {\n      part.setValue(value);\n      state.lastRenderedIndex = i;\n      // Since a lower-priority value will never overwrite a higher-priority\n      // synchronous value, we can stop processsing now.\n      break;\n    }\n\n    // If this is a Promise we've already handled, skip it.\n    if (i < previousLength && value === previousValues[i]) {\n      continue;\n    }\n\n    // We have a Promise that we haven't seen before, so priorities may have\n    // changed. Forget what we rendered before.\n    state.lastRenderedIndex = _infinity;\n    previousLength = 0;\n\n    Promise.resolve(value).then((resolvedValue: unknown) => {\n      const index = state.values.indexOf(value);\n      // If state.values doesn't contain the value, we've re-rendered without\n      // the value, so don't render it. Then, only render if the value is\n      // higher-priority than what's already been rendered.\n      if (index > -1 && index < state.lastRenderedIndex) {\n        state.lastRenderedIndex = index;\n        part.setValue(resolvedValue);\n        part.commit();\n      }\n    });\n  }\n});\n"]}