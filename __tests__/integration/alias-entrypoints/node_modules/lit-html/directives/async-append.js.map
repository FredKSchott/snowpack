{"version":3,"file":"async-append.js","sourceRoot":"","sources":["../src/directives/async-append.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;;;;;;AAEH,OAAO,EAAC,YAAY,EAAE,SAAS,EAAE,QAAQ,EAAO,MAAM,gBAAgB,CAAC;AAEvE;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,SAAS,CAChC,CAAI,KAAuB,EACvB,MAA0C,EAAE,EAAE,CAAC,KAAK,EAAE,IAAU,EAAE,EAAE;;IACtE,IAAI,CAAC,CAAC,IAAI,YAAY,QAAQ,CAAC,EAAE;QAC/B,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;KAClE;IACD,kEAAkE;IAClE,kBAAkB;IAClB,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE;QACxB,OAAO;KACR;IACD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAEnB,gEAAgE;IAChE,gDAAgD;IAChD,IAAI,QAAQ,CAAC;IACb,IAAI,CAAC,GAAG,CAAC,CAAC;;QAEV,KAAoB,IAAA,UAAA,cAAA,KAAK,CAAA,WAAA;YAAd,IAAI,CAAC,kBAAA,CAAA;YACd,kEAAkE;YAClE,+DAA+D;YAC/D,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,EAAE;gBACxB,MAAM;aACP;YAED,6DAA6D;YAC7D,kDAAkD;YAClD,IAAI,CAAC,KAAK,CAAC,EAAE;gBACX,IAAI,CAAC,KAAK,EAAE,CAAC;aACd;YAED,yDAAyD;YACzD,kEAAkE;YAClE,iEAAiE;YACjE,sCAAsC;YACtC,IAAI,MAAM,KAAK,SAAS,EAAE;gBACxB,iEAAiE;gBACjE,0BAA0B;gBAC1B,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAM,CAAC;aACvB;YAED,iEAAiE;YACjE,qDAAqD;YACrD,+DAA+D;YAC/D,+DAA+D;YAC/D,6DAA6D;YAC7D,yBAAyB;YAEzB,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;YAEnC,mDAAmD;YACnD,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC1B,4DAA4D;gBAC5D,aAAa,GAAG,YAAY,EAAE,CAAC;gBAC/B,4DAA4D;gBAC5D,yDAAyD;gBACzD,aAAa;gBACb,QAAQ,CAAC,OAAO,GAAG,aAAa,CAAC;gBACjC,IAAI,CAAC,OAAO,CAAC,UAAW,CAAC,YAAY,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;aACpE;YACD,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACtC,QAAQ,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YACxC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACrB,QAAQ,CAAC,MAAM,EAAE,CAAC;YAClB,CAAC,EAAE,CAAC;SACL;;;;;;;;;AACH,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {createMarker, directive, NodePart, Part} from '../lit-html.js';\n\n/**\n * A directive that renders the items of an async iterable[1], appending new\n * values after previous values, similar to the built-in support for iterables.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is appended to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://github.com/tc39/proposal-async-iteration\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncAppend = directive(\n    <T>(value: AsyncIterable<T>,\n        mapper?: (v: T, index?: number) => unknown) => async (part: Part) => {\n      if (!(part instanceof NodePart)) {\n        throw new Error('asyncAppend can only be used in text bindings');\n      }\n      // If we've already set up this particular iterable, we don't need\n      // to do anything.\n      if (value === part.value) {\n        return;\n      }\n      part.value = value;\n\n      // We keep track of item Parts across iterations, so that we can\n      // share marker nodes between consecutive Parts.\n      let itemPart;\n      let i = 0;\n\n      for await (let v of value) {\n        // Check to make sure that value is the still the current value of\n        // the part, and if not bail because a new value owns this part\n        if (part.value !== value) {\n          break;\n        }\n\n        // When we get the first value, clear the part. This lets the\n        // previous value display until we can replace it.\n        if (i === 0) {\n          part.clear();\n        }\n\n        // As a convenience, because functional-programming-style\n        // transforms of iterables and async iterables requires a library,\n        // we accept a mapper function. This is especially convenient for\n        // rendering a template for each item.\n        if (mapper !== undefined) {\n          // This is safe because T must otherwise be treated as unknown by\n          // the rest of the system.\n          v = mapper(v, i) as T;\n        }\n\n        // Like with sync iterables, each item induces a Part, so we need\n        // to keep track of start and end nodes for the Part.\n        // Note: Because these Parts are not updatable like with a sync\n        // iterable (if we render a new value, we always clear), it may\n        // be possible to optimize away the Parts and just re-use the\n        // Part.setValue() logic.\n\n        let itemStartNode = part.startNode;\n\n        // Check to see if we have a previous item and Part\n        if (itemPart !== undefined) {\n          // Create a new node to separate the previous and next Parts\n          itemStartNode = createMarker();\n          // itemPart is currently the Part for the previous item. Set\n          // it's endNode to the node we'll use for the next Part's\n          // startNode.\n          itemPart.endNode = itemStartNode;\n          part.endNode.parentNode!.insertBefore(itemStartNode, part.endNode);\n        }\n        itemPart = new NodePart(part.options);\n        itemPart.insertAfterNode(itemStartNode);\n        itemPart.setValue(v);\n        itemPart.commit();\n        i++;\n      }\n    });\n"]}