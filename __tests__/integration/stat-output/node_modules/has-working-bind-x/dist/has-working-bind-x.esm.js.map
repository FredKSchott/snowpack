{"version":3,"sources":["../src/has-working-bind-x.js"],"names":[],"mappings":"AAAA,OAAO,IAAP,MAAiB,QAAjB;IAEO,I,GAAQ,I,CAAR,I;;AAEP,IAAM,KAAK,GAAG,SAAS,KAAT,GAAiB;AAC7B,MAAI,EAAE,GAAG,IAAT;AACA,MAAI,EAAE,GAAG,IAAT;AACA,MAAI,OAAO,GAAG,IAAd;AACA,MAAM,QAAQ,GAAG,EAAjB;;AAEA,MAAM,OAAO,GAAG,SAAS,OAAT,CAAiB,IAAjB,EAAuB,IAAvB,EAA6B;AAC3C;AACA,IAAA,OAAO,GAAG,IAAV;AACA,IAAA,EAAE,GAAG,IAAL;AACA,IAAA,EAAE,GAAG,IAAL;AAEA;;AACA,WAAO,SAAP;AACD,GARD;;AAUA,MAAI;AACF,QAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,OAAX,EAAoB,CAAC,QAAD,EAAW,CAAX,CAApB,CAAhB;AACA,QAAM,IAAI,GAAG,OAAO,CAAC,CAAD,CAApB;AAEA,WAAO,OAAO,CAAC,MAAR,KAAmB,CAAnB,IAAwB,IAAI,CAAC,MAAL,KAAgB,CAAxC,IAA6C,EAAE,KAAK,CAApD,IAAyD,EAAE,KAAK,CAAhE,IAAqE,OAAO,KAAK,QAAxF;AACD,GALD,CAKE,OAAO,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF,CAxBD;;AA0BA,IAAM,KAAK,GAAG,SAAS,KAAT,GAAiB;AAC7B,MAAI,EAAE,GAAG,IAAT;AACA,MAAI,EAAE,GAAG,IAAT;AACA,MAAI,OAAO,GAAG,IAAd;AACA,MAAM,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAf;;AAEA,MAAM,GAAG,GAAG,SAAS,GAAT,CAAa,IAAb,EAAmB,IAAnB,EAAyB;AACnC,IAAA,EAAE,GAAG,IAAL;AACA,IAAA,EAAE,GAAG,IAAL;AACA,IAAA,OAAO,GAAG,IAAV;AAEA,WAAO,MAAP;AACD,GAND;;AAQA,MAAI;AACF,QAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,EAAgB,CAAC,IAAD,CAAhB,CAAhB;AACA,QAAM,QAAQ,GAAG,IAAI,OAAJ,CAAY,CAAZ,EAAe,CAAf,CAAjB;AAEA,WAAO,OAAO,CAAC,MAAR,KAAmB,GAAG,CAAC,MAAvB,IAAiC,QAAQ,KAAK,MAA9C,IAAwD,EAAE,KAAK,CAA/D,IAAoE,EAAE,KAAK,CAA3E,IAAgF,OAAO,KAAK,MAAnG;AACD,GALD,CAKE,OAAO,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF,CAtBD;AAwBA;;;;;;;AAKA,IAAM,SAAS,GAAG,OAAO,IAAP,KAAgB,UAAhB,IAA8B,KAAK,EAAnC,IAAyC,KAAK,EAAhE;AAEA,eAAe,SAAf","file":"has-working-bind-x.esm.js","sourcesContent":["import noop from 'noop-x';\n\nconst {bind} = noop;\n\nconst test1 = function test1() {\n  let a1 = null;\n  let a2 = null;\n  let context = null;\n  const testThis = [];\n\n  const test1Fn = function test1Fn(arg1, arg2) {\n    /* eslint-disable-next-line babel/no-invalid-this */\n    context = this;\n    a1 = arg1;\n    a2 = arg2;\n\n    /* eslint-disable-next-line prefer-rest-params */\n    return arguments;\n  };\n\n  try {\n    const boundFn = bind.apply(test1Fn, [testThis, 1]);\n    const args = boundFn(2);\n\n    return boundFn.length === 1 && args.length === 2 && a1 === 1 && a2 === 2 && context === testThis;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst test2 = function test2() {\n  let a1 = null;\n  let a2 = null;\n  let context = null;\n  const oracle = [1, 2, 3];\n\n  const Ctr = function Ctr(arg1, arg2) {\n    a1 = arg1;\n    a2 = arg2;\n    context = this;\n\n    return oracle;\n  };\n\n  try {\n    const BoundFn = bind.apply(Ctr, [null]);\n    const returned = new BoundFn(1, 2);\n\n    return BoundFn.length === Ctr.length && returned === oracle && a1 === 1 && a2 === 2 && context !== oracle;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Indicates if the engine has a working bind function.\n *\n * @type {boolean}\n */\nconst isWorking = typeof bind === 'function' && test1() && test2();\n\nexport default isWorking;\n"]}