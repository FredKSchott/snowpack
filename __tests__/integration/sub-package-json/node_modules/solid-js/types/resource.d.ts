import { Context } from "./signal";
import { StateNode, SetStateFunction, Wrapped } from "./state";
declare type SuspenseState = "running" | "suspended" | "fallback";
declare type SuspenseContextType = {
    increment?: () => void;
    decrement?: () => void;
    state?: () => SuspenseState;
    initializing?: boolean;
};
declare type SuspenseConfig = {
    timeoutMs: number;
};
export declare const SuspenseContext: Context<SuspenseContextType> & {
    transition?: {
        timeoutMs: number;
        increment(): void;
        decrement(): void;
    };
    active?(): boolean;
    increment?(): void;
    decrement?(): void;
};
export declare function createResource<T>(value?: T): [() => T | undefined, (p?: Promise<T>) => () => boolean];
declare type LoadStateFunction<T> = {
    (v: {
        [P in keyof T]: Promise<T[P]> | T[P];
    }, reconcilerFn?: (v: Partial<T>) => (state: Wrapped<T>) => void): {
        [P in keyof T]: boolean;
    };
};
export declare function createResourceState<T extends StateNode>(state: T | Wrapped<T>): [Wrapped<T>, LoadStateFunction<T>, SetStateFunction<T>];
interface ComponentType<T> {
    (props: T): any;
}
export declare function lazy<T extends ComponentType<any>>(fn: () => Promise<{
    default: T;
}>): T;
export declare function useTransition(config: SuspenseConfig): [() => boolean, (fn: () => any) => void];
export declare function awaitSuspense<T>(fn: () => T): () => T;
export {};
