export * from "./runtime";
export * from "./Suspense";
import { createMemo } from "../index.js";
declare type MountableElement = Element | Document | ShadowRoot | DocumentFragment;
export declare function render(code: () => any, element: MountableElement): () => void;
export declare function renderToString(code: () => any, options: {
    timeoutMs?: number;
}): Promise<string>;
export declare function hydrate(code: () => any, element: MountableElement): () => void;
export { createMemo as wrapMemo };
export declare function wrapCondition<T>(fn: () => T): () => T;
export declare function For<T, U>(props: {
    each: T[];
    fallback?: any;
    transform?: (mapped: () => U[]) => () => U[];
    children: (item: T) => U;
}): () => U[];
export declare function Show<T>(props: {
    when: boolean;
    fallback?: T;
    transform?: (mapped: () => T | undefined) => () => T | undefined;
    children: T;
}): () => T | undefined;
export declare function Switch<T>(props: {
    fallback?: T;
    transform?: (mapped: () => T) => () => T;
    children: any;
}): () => any;
declare type MatchProps = {
    when: boolean;
    children: any;
};
export declare function Match(props: MatchProps): MatchProps;
export declare function Portal(props: {
    mount?: MountableElement;
    useShadow?: boolean;
    ref?: (e: HTMLDivElement) => void;
    children: any;
}): Text;
