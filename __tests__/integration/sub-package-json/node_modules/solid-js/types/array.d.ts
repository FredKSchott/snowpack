export declare function mapArray<T, U>(mapFn: (v: T, i: number) => U, options?: {
    fallback?: () => U;
}): (list: () => T[]) => () => U[];
export declare function mapArray<T, U>(list: () => T[], mapFn: (v: T, i: number) => U, options?: {
    fallback?: () => U;
}): () => U[];
export declare function reduceArray<T, U>(fn: (memo: U, value: T, i: number) => U, seed: U): (list: () => T[]) => () => U;
export declare function reduceArray<T, U>(list: () => T[], fn: (memo: U, value: T, i: number) => U, seed: U): () => U;
