import { sample, createEffect, runtimeConfig, createContext, useContext, createSignal, equalFn, SuspenseContext, createRoot, createMemo, awaitSuspense, mapArray, onCleanup } from '../index.js';
export { getContextOwner as currentContext, createEffect as wrap, createMemo as wrapMemo } from '../index.js';

const Types = {
  ATTRIBUTE: "attribute",
  PROPERTY: "property"
},
      Attributes = {
  href: {
    type: Types.ATTRIBUTE
  },
  style: {
    type: Types.PROPERTY,
    alias: "style.cssText"
  },
  for: {
    type: Types.PROPERTY,
    alias: "htmlFor"
  },
  class: {
    type: Types.PROPERTY,
    alias: "className"
  },
  spellCheck: {
    type: Types.PROPERTY,
    alias: "spellcheck"
  },
  allowFullScreen: {
    type: Types.PROPERTY,
    alias: "allowFullscreen"
  },
  autoCapitalize: {
    type: Types.PROPERTY,
    alias: "autocapitalize"
  },
  autoFocus: {
    type: Types.PROPERTY,
    alias: "autofocus"
  },
  autoPlay: {
    type: Types.PROPERTY,
    alias: "autoplay"
  }
},
      SVGAttributes = {
  className: {
    type: Types.ATTRIBUTE,
    alias: "class"
  },
  htmlFor: {
    type: Types.ATTRIBUTE,
    alias: "for"
  },
  tabIndex: {
    type: Types.ATTRIBUTE,
    alias: "tabindex"
  },
  allowReorder: {
    type: Types.ATTRIBUTE
  },
  attributeName: {
    type: Types.ATTRIBUTE
  },
  attributeType: {
    type: Types.ATTRIBUTE
  },
  autoReverse: {
    type: Types.ATTRIBUTE
  },
  baseFrequency: {
    type: Types.ATTRIBUTE
  },
  calcMode: {
    type: Types.ATTRIBUTE
  },
  clipPathUnits: {
    type: Types.ATTRIBUTE
  },
  contentScriptType: {
    type: Types.ATTRIBUTE
  },
  contentStyleType: {
    type: Types.ATTRIBUTE
  },
  diffuseConstant: {
    type: Types.ATTRIBUTE
  },
  edgeMode: {
    type: Types.ATTRIBUTE
  },
  externalResourcesRequired: {
    type: Types.ATTRIBUTE
  },
  filterRes: {
    type: Types.ATTRIBUTE
  },
  filterUnits: {
    type: Types.ATTRIBUTE
  },
  gradientTransform: {
    type: Types.ATTRIBUTE
  },
  gradientUnits: {
    type: Types.ATTRIBUTE
  },
  kernelMatrix: {
    type: Types.ATTRIBUTE
  },
  kernelUnitLength: {
    type: Types.ATTRIBUTE
  },
  keyPoints: {
    type: Types.ATTRIBUTE
  },
  keySplines: {
    type: Types.ATTRIBUTE
  },
  keyTimes: {
    type: Types.ATTRIBUTE
  },
  lengthAdjust: {
    type: Types.ATTRIBUTE
  },
  limitingConeAngle: {
    type: Types.ATTRIBUTE
  },
  markerHeight: {
    type: Types.ATTRIBUTE
  },
  markerUnits: {
    type: Types.ATTRIBUTE
  },
  maskContentUnits: {
    type: Types.ATTRIBUTE
  },
  maskUnits: {
    type: Types.ATTRIBUTE
  },
  numOctaves: {
    type: Types.ATTRIBUTE
  },
  pathLength: {
    type: Types.ATTRIBUTE
  },
  patternContentUnits: {
    type: Types.ATTRIBUTE
  },
  patternTransform: {
    type: Types.ATTRIBUTE
  },
  patternUnits: {
    type: Types.ATTRIBUTE
  },
  pointsAtX: {
    type: Types.ATTRIBUTE
  },
  pointsAtY: {
    type: Types.ATTRIBUTE
  },
  pointsAtZ: {
    type: Types.ATTRIBUTE
  },
  preserveAlpha: {
    type: Types.ATTRIBUTE
  },
  preserveAspectRatio: {
    type: Types.ATTRIBUTE
  },
  primitiveUnits: {
    type: Types.ATTRIBUTE
  },
  refX: {
    type: Types.ATTRIBUTE
  },
  refY: {
    type: Types.ATTRIBUTE
  },
  repeatCount: {
    type: Types.ATTRIBUTE
  },
  repeatDur: {
    type: Types.ATTRIBUTE
  },
  requiredExtensions: {
    type: Types.ATTRIBUTE
  },
  requiredFeatures: {
    type: Types.ATTRIBUTE
  },
  specularConstant: {
    type: Types.ATTRIBUTE
  },
  specularExponent: {
    type: Types.ATTRIBUTE
  },
  spreadMethod: {
    type: Types.ATTRIBUTE
  },
  startOffset: {
    type: Types.ATTRIBUTE
  },
  stdDeviation: {
    type: Types.ATTRIBUTE
  },
  stitchTiles: {
    type: Types.ATTRIBUTE
  },
  surfaceScale: {
    type: Types.ATTRIBUTE
  },
  systemLanguage: {
    type: Types.ATTRIBUTE
  },
  tableValues: {
    type: Types.ATTRIBUTE
  },
  targetX: {
    type: Types.ATTRIBUTE
  },
  targetY: {
    type: Types.ATTRIBUTE
  },
  textLength: {
    type: Types.ATTRIBUTE
  },
  viewBox: {
    type: Types.ATTRIBUTE
  },
  viewTarget: {
    type: Types.ATTRIBUTE
  },
  xChannelSelector: {
    type: Types.ATTRIBUTE
  },
  yChannelSelector: {
    type: Types.ATTRIBUTE
  },
  zoomAndPan: {
    type: Types.ATTRIBUTE
  }
};
const NonComposedEvents = new Set(["abort", "animationstart", "animationend", "animationiteration", "blur", "change", "copy", "cut", "error", "focus", "load", "loadend", "loadstart", "mouseenter", "mouseleave", "paste", "progress", "reset", "select", "submit", "transitionstart", "transitioncancel", "transitionend", "transitionrun"]);

const eventRegistry = new Set();
const config = runtimeConfig;
function template(html, isSVG) {
  const t = document.createElement('template');
  t.innerHTML = html;
  if (t.innerHTML !== html) throw new Error(`Template html does not match input:\n${t.innerHTML}\n${html}`);
  let node = t.content.firstChild;
  if (isSVG) node = node.firstChild;
  return node;
}
function createComponent(Comp, props, dynamicKeys) {
  if (dynamicKeys) {
    for (let i = 0; i < dynamicKeys.length; i++) dynamicProp(props, dynamicKeys[i]);
  }
  return sample(() => Comp(props));
}
function delegateEvents(eventNames) {
  for (let i = 0, l = eventNames.length; i < l; i++) {
    const name = eventNames[i];
    if (!eventRegistry.has(name)) {
      eventRegistry.add(name);
      document.addEventListener(name, eventHandler);
    }
  }
}
function clearDelegatedEvents() {
  for (let name of eventRegistry.keys()) document.removeEventListener(name, eventHandler);
  eventRegistry.clear();
}
function classList(node, value, prev) {
  const classKeys = Object.keys(value);
  for (let i = 0, len = classKeys.length; i < len; i++) {
    const key = classKeys[i],
          classValue = value[key],
          classNames = key.split(/\s+/);
    if (prev && prev[key] === classValue) continue;
    for (let j = 0, nameLen = classNames.length; j < nameLen; j++) node.classList.toggle(classNames[j], classValue);
  }
}
function spread(node, accessor, isSVG, skipChildren) {
  if (typeof accessor === 'function') {
    createEffect(current => spreadExpression(node, accessor(), current, isSVG, skipChildren));
  } else spreadExpression(node, accessor, undefined, isSVG, skipChildren);
}
function insert(parent, accessor, marker, initial) {
  if (marker !== undefined && !initial) initial = [];
  if (typeof accessor !== 'function') return insertExpression(parent, accessor, initial, marker);
  createEffect(current => insertExpression(parent, accessor(), current, marker), initial);
}
function renderToString(code, options = {}) {
  options = {
    timeoutMs: 10000,
    ...options
  };
  config.hydrate = {
    id: '',
    count: 0
  };
  const container = document.createElement("div");
  return new Promise(resolve => {
    setTimeout(() => resolve(container.innerHTML), options.timeoutMs);
    if (!code.length) {
      insert(container, code());
      resolve(container.innerHTML);
    } else insert(container, code(() => resolve(container.innerHTML)));
  });
}
function hydrate(code, root) {
  config.hydrate = {
    id: '',
    count: 0,
    registry: new Map()
  };
  const templates = root.querySelectorAll(`*[_hk]`);
  for (let i = 0; i < templates.length; i++) {
    const node = templates[i];
    config.hydrate.registry.set(node.getAttribute('_hk'), node);
  }
  code();
  delete config.hydrate;
}
function getNextElement(template, isSSR) {
  const hydrate = config.hydrate;
  let node, key;
  if (!hydrate || !hydrate.registry || !(node = hydrate.registry.get(key = `${hydrate.id}:${hydrate.count++}`))) {
    const el = template.cloneNode(true);
    if (isSSR && hydrate) el.setAttribute('_hk', `${hydrate.id}:${hydrate.count++}`);
    return el;
  }
  if (window && window._$HYDRATION) window._$HYDRATION.completed.add(key);
  return node;
}
function getNextMarker(start) {
  let end = start,
      count = 0,
      current = [];
  if (config.hydrate && config.hydrate.registry) {
    while (end) {
      if (end.nodeType === 8) {
        const v = end.nodeValue;
        if (v === "#") count++;else if (v === "/") {
          if (count === 0) return [end, current];
          count--;
        }
      }
      current.push(end);
      end = end.nextSibling;
    }
  }
  return [end, current];
}
function runHydrationEvents(id) {
  if (window && window._$HYDRATION) {
    const {
      completed,
      events
    } = window._$HYDRATION;
    while (events.length) {
      const [id, e] = events[0];
      if (!completed.has(id)) return;
      eventHandler(e);
      events.shift();
    }
  }
}
function generateHydrationEventsScript(eventNames) {
  return `!function(){function t(t){const e=function t(e){return e&&(e.getAttribute("_hk")||t(e.host&&e.host instanceof Node?e.host:e.parentNode))}(t.composedPath&&t.composedPath()[0]||t.target);e&&!window._$HYDRATION.completed.has(e)&&window._$HYDRATION.events.push([e,t])}window._$HYDRATION={events:[],completed:new Set},["${eventNames.join('","')}"].forEach(e=>document.addEventListener(e,t))}();`;
}
function dynamicProp(props, key) {
  const src = props[key];
  Object.defineProperty(props, key, {
    get() {
      return src();
    },
    enumerable: true
  });
}
function lookup(el) {
  return el && (el.model || lookup(el.host || el.parentNode));
}
function eventHandler(e) {
  const key = `__${e.type}`;
  let node = e.composedPath && e.composedPath()[0] || e.target;
  if (e.target !== node) {
    Object.defineProperty(e, 'target', {
      configurable: true,
      value: node
    });
  }
  Object.defineProperty(e, 'currentTarget', {
    configurable: true,
    get() {
      return node;
    }
  });
  while (node !== null) {
    const handler = node[key];
    if (handler) {
      const model = handler.length > 1 ? lookup(node) : undefined;
      handler(e, model);
      if (e.cancelBubble) return;
    }
    node = node.host && node.host instanceof Node ? node.host : node.parentNode;
  }
}
function spreadExpression(node, props, prevProps = {}, isSVG, skipChildren) {
  let info;
  if (!skipChildren && "children" in props) {
    createEffect(() => prevProps.children = insertExpression(node, props.children, prevProps.children));
  }
  createEffect(() => {
    for (const prop in props) {
      if (prop === "children") continue;
      const value = props[prop];
      if (value === prevProps[prop]) continue;
      if (prop === "style") {
        Object.assign(node.style, value);
      } else if (prop === "classList") {
        classList(node, value, prevProps[prop]);
      } else if (prop === "ref" || prop === "forwardRef") {
        value(node);
      } else if (prop.slice(0, 2) === "on") {
        const lc = prop.toLowerCase();
        if (lc !== prop && !NonComposedEvents.has(lc.slice(2))) {
          const name = lc.slice(2);
          node[`__${name}`] = value;
          delegateEvents([name]);
        } else node[lc] = value;
      } else if (prop === "events") {
        for (const eventName in value) node.addEventListener(eventName, value[eventName]);
      } else if (info = Attributes[prop]) {
        if (info.type === "attribute") {
          node.setAttribute(prop, value);
        } else node[info.alias] = value;
      } else if (isSVG) {
        if (info = SVGAttributes[prop]) {
          if (info.alias) node.setAttribute(info.alias, value);else node.setAttribute(prop, value);
        } else node.setAttribute(prop.replace(/([A-Z])/g, g => `-${g[0].toLowerCase()}`), value);
      } else node[prop] = value;
      prevProps[prop] = value;
    }
  });
  return prevProps;
}
function normalizeIncomingArray(normalized, array, unwrap) {
  let dynamic = false;
  for (let i = 0, len = array.length; i < len; i++) {
    let item = array[i],
        t;
    if (item instanceof Node) {
      normalized.push(item);
    } else if (item == null || item === true || item === false) ; else if (Array.isArray(item)) {
      dynamic = normalizeIncomingArray(normalized, item) || dynamic;
    } else if ((t = typeof item) === 'string') {
      normalized.push(document.createTextNode(item));
    } else if (t === 'function') {
      if (unwrap) {
        const idx = item();
        dynamic = normalizeIncomingArray(normalized, Array.isArray(idx) ? idx : [idx]) || dynamic;
      } else {
        normalized.push(item);
        dynamic = true;
      }
    } else normalized.push(document.createTextNode(item.toString()));
  }
  return dynamic;
}
function appendNodes(parent, array, marker) {
  for (let i = 0, len = array.length; i < len; i++) parent.insertBefore(array[i], marker);
}
function cleanChildren(parent, current, marker, replacement) {
  if (marker === undefined) return parent.textContent = '';
  const node = replacement || document.createTextNode('');
  if (current.length) {
    node !== current[0] && parent.replaceChild(node, current[0]);
    for (let i = current.length - 1; i > 0; i--) parent.removeChild(current[i]);
  } else parent.insertBefore(node, marker);
  return [node];
}
function insertExpression(parent, value, current, marker, unwrapArray) {
  while (typeof current === "function") current = current();
  if (value === current) return current;
  const t = typeof value,
        multi = marker !== undefined;
  parent = multi && current[0] && current[0].parentNode || parent;
  if (t === 'string' || t === 'number') {
    if (t === 'number') value = value.toString();
    if (multi) {
      let node = current[0];
      if (node && node.nodeType === 3) {
        node.data = value;
      } else node = document.createTextNode(value);
      current = cleanChildren(parent, current, marker, node);
    } else {
      if (current !== '' && typeof current === 'string') {
        current = parent.firstChild.data = value;
      } else current = parent.textContent = value;
    }
  } else if (value == null || t === 'boolean') {
    if (config.hydrate && config.hydrate.registry) return current;
    current = cleanChildren(parent, current, marker);
  } else if (t === 'function') {
    createEffect(() => current = insertExpression(parent, value(), current, marker));
    return () => current;
  } else if (Array.isArray(value)) {
    const array = [];
    if (normalizeIncomingArray(array, value, unwrapArray)) {
      createEffect(() => current = insertExpression(parent, array, current, marker, true));
      return () => current;
    }
    if (config.hydrate && config.hydrate.registry) return current;
    if (array.length === 0) {
      current = cleanChildren(parent, current, marker);
      if (multi) return current;
    } else {
      if (Array.isArray(current)) {
        if (current.length === 0) {
          appendNodes(parent, array, marker);
        } else reconcileArrays(parent, current, array);
      } else if (current == null || current === '') {
        appendNodes(parent, array);
      } else {
        reconcileArrays(parent, multi && current || [parent.firstChild], array);
      }
    }
    current = array;
  } else if (value instanceof Node) {
    if (Array.isArray(current)) {
      if (multi) return current = cleanChildren(parent, current, marker, value);
      cleanChildren(parent, current, null, value);
    } else if (current == null || current === '') {
      parent.appendChild(value);
    } else parent.replaceChild(value, parent.firstChild);
    current = value;
  }
  return current;
}
var NOMATCH = -1;
function reconcileArrays(parent, ns, us) {
  var ulen = us.length,
  nmin = 0,
      nmax = ns.length - 1,
      umin = 0,
      umax = ulen - 1,
  n = ns[nmin],
      u = us[umin],
  nx = ns[nmax],
      ux = us[umax],
  ul = nx.nextSibling,
      i,
      loop = true;
  fixes: while (loop) {
    loop = false;
    while (u === n) {
      umin++;
      nmin++;
      if (umin > umax || nmin > nmax) break fixes;
      u = us[umin];
      n = ns[nmin];
    }
    while (ux === nx) {
      ul = nx;
      umax--;
      nmax--;
      if (umin > umax || nmin > nmax) break fixes;
      ux = us[umax];
      nx = ns[nmax];
    }
    while (u === nx) {
      loop = true;
      parent.insertBefore(nx, n);
      umin++;
      nmax--;
      if (umin > umax || nmin > nmax) break fixes;
      u = us[umin];
      nx = ns[nmax];
    }
    while (ux === n) {
      loop = true;
      if (ul === null) parent.appendChild(n);else parent.insertBefore(n, ul);
      ul = n;
      umax--;
      nmin++;
      if (umin > umax || nmin > nmax) break fixes;
      ux = us[umax];
      n = ns[nmin];
    }
  }
  if (umin > umax) {
    while (nmin <= nmax) {
      parent.removeChild(ns[nmax]);
      nmax--;
    }
    return;
  }
  if (nmin > nmax) {
    while (umin <= umax) {
      parent.insertBefore(us[umin], ul);
      umin++;
    }
    return;
  }
  const P = new Array(umax - umin + 1),
        I = new Map();
  for (let i = umin; i <= umax; i++) {
    P[i] = NOMATCH;
    I.set(us[i], i);
  }
  let reusingNodes = umin + us.length - 1 - umax,
      toRemove = [];
  for (let i = nmin; i <= nmax; i++) {
    if (I.has(ns[i])) {
      P[I.get(ns[i])] = i;
      reusingNodes++;
    } else toRemove.push(i);
  }
  if (reusingNodes === 0) {
    if (n !== parent.firstChild || nx !== parent.lastChild) {
      for (i = nmin; i <= nmax; i++) parent.removeChild(ns[i]);
      while (umin <= umax) {
        parent.insertBefore(us[umin], ul);
        umin++;
      }
      return;
    }
    parent.textContent = '';
    while (umin <= umax) {
      parent.appendChild(us[umin]);
      umin++;
    }
    return;
  }
  var lcs = longestPositiveIncreasingSubsequence(P, umin),
      nodes = [],
      tmp = ns[nmin],
      lisIdx = lcs.length - 1,
      tmpB;
  for (let i = nmin; i <= nmax; i++) {
    nodes[i] = tmp;
    tmp = tmp.nextSibling;
  }
  for (let i = 0; i < toRemove.length; i++) parent.removeChild(nodes[toRemove[i]]);
  for (let i = umax; i >= umin; i--) {
    if (lcs[lisIdx] === i) {
      ul = nodes[P[lcs[lisIdx]]];
      lisIdx--;
    } else {
      tmpB = P[i] === NOMATCH ? us[i] : nodes[P[i]];
      parent.insertBefore(tmpB, ul);
      ul = tmpB;
    }
  }
}
function longestPositiveIncreasingSubsequence(ns, newStart) {
  let seq = [],
      is = [],
      l = -1,
      pre = new Array(ns.length);
  for (let i = newStart, len = ns.length; i < len; i++) {
    let n = ns[i];
    if (n < 0) continue;
    let j = findGreatestIndexLEQ(seq, n);
    if (j !== -1) pre[i] = is[j];
    if (j === l) {
      l++;
      seq[l] = n;
      is[l] = i;
    } else if (n < seq[j + 1]) {
      seq[j + 1] = n;
      is[j + 1] = i;
    }
  }
  for (let i = is[l]; l >= 0; i = pre[i], l--) {
    seq[l] = i;
  }
  return seq;
}
function findGreatestIndexLEQ(seq, n) {
  var lo = -1,
      hi = seq.length;
  if (hi > 0 && seq[hi - 1] <= n) return hi - 1;
  while (hi - lo > 1) {
    var mid = Math.floor((lo + hi) / 2);
    if (seq[mid] > n) {
      hi = mid;
    } else {
      lo = mid;
    }
  }
  return lo;
}

const SuspenseListContext = createContext();
function SuspenseList(props) {
  let index = 0,
      suspenseSetter,
      showContent,
      showFallback;
  const listContext = useContext(SuspenseListContext);
  if (listContext) {
    const [state, stateSetter] = createSignal("running", equalFn);
    suspenseSetter = stateSetter;
    [showContent, showFallback] = listContext.register(state);
  }
  const registry = [],
        comp = createComponent(SuspenseListContext.Provider, {
    value: {
      register: state => {
        const [showingContent, showContent] = createSignal(false, equalFn),
              [showingFallback, showFallback] = createSignal(false, equalFn);
        registry[index++] = {
          state,
          showContent,
          showFallback
        };
        return [showingContent, showingFallback];
      }
    },
    children: () => props.children
  }, ["children"]);
  createEffect(() => {
    const reveal = props.revealOrder,
          tail = props.tail,
          visibleContent = showContent ? showContent() : true,
          visibleFallback = showFallback ? showFallback() : true,
          reverse = reveal === "backwards";
    if (reveal === "together") {
      const all = registry.every(i => i.state() === "running");
      suspenseSetter && suspenseSetter(all ? "running" : "fallback");
      registry.forEach(i => {
        i.showContent(all && visibleContent);
        i.showFallback(visibleFallback);
      });
      return;
    }
    let stop = false;
    for (let i = 0, len = registry.length; i < len; i++) {
      const n = reverse ? len - i - 1 : i,
            s = registry[n].state();
      if (!stop && (s === "running" || s === "suspended")) {
        registry[n].showContent(visibleContent);
        registry[n].showFallback(visibleFallback);
      } else {
        const next = !stop;
        if (next && suspenseSetter) suspenseSetter("fallback");
        if (!tail || next && tail === "collapsed") {
          registry[n].showFallback(visibleFallback);
        } else registry[n].showFallback(false);
        stop = true;
        registry[n].showContent(next);
      }
    }
    if (!stop && suspenseSetter) suspenseSetter("running");
  });
  return comp;
}
function Suspense(props) {
  let counter = 0,
      t,
      state = "running",
      showContent,
      showFallback,
      transition;
  const [get, next] = createSignal(),
        store = {
    increment: () => {
      if (++counter === 1) {
        if (!store.initializing) {
          if (SuspenseContext.transition) {
            state = "suspended";
            !transition && (transition = SuspenseContext.transition).increment();
            t = setTimeout(() => (state = "fallback", next()), SuspenseContext.transition.timeoutMs);
          } else state = "fallback";
          next();
        } else state = "fallback";
        SuspenseContext.increment();
      }
    },
    decrement: () => {
      if (--counter === 0) {
        t && clearTimeout(t);
        if (state !== "running") {
          state = "running";
          transition && transition.decrement();
          transition = undefined;
          next();
          SuspenseContext.decrement();
        }
      }
    },
    state: () => {
      get();
      return state;
    },
    initializing: true
  };
  const listContext = useContext(SuspenseListContext);
  if (listContext) [showContent, showFallback] = listContext.register(store.state);
  return createComponent(SuspenseContext.Provider, {
    value: store,
    children: () => {
      let dispose;
      const rendered = sample(() => props.children),
            marker = document.createTextNode(""),
            doc = document.implementation.createHTMLDocument();
      Object.defineProperty(doc.body, "host", {
        get() {
          return marker && marker.parentNode;
        }
      });
      return () => {
        const value = store.state(),
              visibleContent = showContent ? showContent() : true,
              visibleFallback = showFallback ? showFallback() : true;
        if (store.initializing) store.initializing = false;
        dispose && dispose();
        dispose = null;
        if (value === "running" && visibleContent || value === "suspended") return [marker, rendered];
        if (!visibleFallback) return [marker];
        return [marker, props.fallback];
      };
    }
  }, ["children"]);
}

function render(code, element) {
  let disposer;
  createRoot(dispose => {
    disposer = dispose;
    insert(element, code());
  });
  return disposer;
}
function renderToString$1(code, options) {
  return createRoot(dispose => renderToString(done => {
    const rendered = code();
    createEffect(() => {
      if (!SuspenseContext.active()) {
        dispose();
        done();
      }
    });
    return rendered;
  }, options));
}
function hydrate$1(code, element) {
  let disposer;
  hydrate(() => {
    disposer = render(code, element);
  }, element);
  return disposer;
}
function wrapCondition(fn) {
  return createMemo(fn, undefined, equalFn);
}
function For(props) {
  const fallback = "fallback" in props && {
    fallback: () => props.fallback
  },
        mapped = awaitSuspense(createMemo(mapArray(() => props.each, props.children, fallback ? fallback : undefined)));
  return props.transform ? props.transform(mapped) : mapped;
}
function Show(props) {
  const useFallback = "fallback" in props,
        condition = createMemo(() => !!props.when, undefined, equalFn),
        mapped = awaitSuspense(createMemo(() => condition() ? sample(() => props.children) : useFallback ? sample(() => props.fallback) : undefined));
  return props.transform ? props.transform(mapped) : mapped;
}
function Switch(props) {
  let conditions = props.children;
  Array.isArray(conditions) || (conditions = [conditions]);
  const useFallback = "fallback" in props,
        evalConditions = createMemo(() => {
    for (let i = 0; i < conditions.length; i++) {
      if (conditions[i].when) return i;
    }
    return -1;
  }, undefined, equalFn),
        mapped = awaitSuspense(createMemo(() => {
    const index = evalConditions();
    return sample(() => index < 0 ? useFallback && props.fallback : conditions[index].children);
  }));
  return props.transform ? props.transform(mapped) : mapped;
}
function Match(props) {
  return props;
}
function Portal(props) {
  const {
    useShadow
  } = props,
        container = document.createElement("div"),
        marker = document.createTextNode(""),
        mount = props.mount || document.body,
        renderRoot = useShadow && container.attachShadow ? container.attachShadow({
    mode: "open"
  }) : container;
  Object.defineProperty(container, "host", {
    get() {
      return marker.parentNode;
    }
  });
  insert(renderRoot, sample(() => props.children));
  mount.appendChild(container);
  props.ref && props.ref(container);
  onCleanup(() => mount.removeChild(container));
  return marker;
}

export { For, Match, Portal, Show, Suspense, SuspenseList, Switch, classList, clearDelegatedEvents, createComponent, delegateEvents, generateHydrationEventsScript, getNextElement, getNextMarker, hydrate$1 as hydrate, insert, render, renderToString$1 as renderToString, runHydrationEvents, spread, template, wrapCondition };
